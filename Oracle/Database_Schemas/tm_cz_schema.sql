                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIOMARKER_GENE_UID" (                     
  GENE_ID VARCHAR2                                                              
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'GENE:' || nvl(GENE_ID, 'ERROR');                                      
END biomarker_gene_uid;                                                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."TEXT_PARSER" (                            
		 text_to_parse IN VARCHAR2,                                                   
     text_delimiter IN VARCHAR2                                                 
)                                                                               
--Custom Collection type returned                                               
RETURN varchar_table                                                            
                                                                                
IS                                                                              
   start_pos NUMBER;                                                            
   end_pos   NUMBER;                                                            
   string_length INTEGER;                                                       
   string_tokens VARCHAR2(32676);                                               
   counter INTEGER;                                                             
   token_value VARCHAR2(1000);                                                  
                                                                                
   list_values varchar_table;                                                   
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
   -- Populates a temp_token table with parsed values for any comma separated li
st.                                                                             
   -- Requires a type so that multiple records can exist for different uses.    
   -- KCR@20090106 - First rev.                                                 
   -- Copyright ? 2009 Recombinant Data Corp.                                   
   -----------------------------------------------------------------------------
--                                                                              
  --Add a delimiter to the end of the string so we dont lose last value         
  string_tokens := text_to_parse || text_delimiter;                             
                                                                                
  --Initialize the collection                                                   
  list_values := varchar_table() ;                                              
                                                                                
  --get length of string                                                        
  string_length := length(string_tokens);                                       
                                                                                
  --set start and end for first token                                           
  start_pos := 1;                                                               
  end_pos   := instr(string_tokens,text_delimiter,1,1);                         
  counter := 1;                                                                 
                                                                                
  LOOP                                                                          
    --Get substring                                                             
    token_value := substr(string_tokens, start_pos, end_pos - start_pos);       
    --add values to collection                                                  
   list_values.EXTEND;                                                          
   list_values(list_Values.LAST):= token_value;                                 
                                                                                
    --Check to see if we are done                                               
    IF end_pos = string_length                                                  
    THEN                                                                        
      EXIT;                                                                     
    ELSE                                                                        
      -- Increment Start Pos and End Pos                                        
      start_pos := end_pos + 1;                                                 
      --increment counter                                                       
      counter := counter + 1;                                                   
      end_pos := instr(string_tokens, text_delimiter,1, counter);               
                                                                                
    END IF;                                                                     
  END LOOP;                                                                     
                                                                                
  return list_values;                                                           
                                                                                
END text_parser;                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."STRING_AGG" (p_input VARCHAR2)            
RETURN VARCHAR2                                                                 
PARALLEL_ENABLE AGGREGATE USING t_string_agg;                                   
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."RDC_INIT_CAP" (                           
     text_to_parse IN VARCHAR2                                                  
	-- text_delimiter IN VARCHAR2                                                  
)                                                                               
--	text string returned with words initcapped except for any in category_path_ex
cluded_words                                                                    
                                                                                
RETURN VARCHAR2                                                                 
                                                                                
AS                                                                              
   start_pos 		NUMBER;                                                          
   end_pos   		NUMBER;                                                          
   string_length 	INTEGER;                                                      
   string_tokens 	VARCHAR2(32676);                                              
   counter 			INTEGER;                                                          
   token_value 		VARCHAR2(1000);                                                
   text_delimiter 	char(1);                                                     
   noInitCap 		boolean;                                                         
                                                                                
   --	create array to hold strings that will not be initcapped                  
                                                                                
	type excluded_aat is table of category_path_excluded_words%ROWTYPE index by PLS
_INTEGER;                                                                       
	excludedText excluded_aat;                                                     
	exclCt PLS_INTEGER;                                                            
                                                                                
   --	text to return                                                            
   initcap_text varchar2(1000);                                                 
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
   -- Performs custom initcap for category paths where specific text strings are
                                                                                
   -- excluded from the process.  Strings are delimited by a space.  The \ in   
   -- the category path are converted to ' \ ' before parsing.                  
                                                                                
   -- JEA@20091001 - First rev.                                                 
   -- Copyright ? 2009 Recombinant Data Corp.                                   
   -----------------------------------------------------------------------------
--                                                                              
                                                                                
	--	Load exclusion text                                                         
                                                                                
	select excluded_text                                                           
		bulk collect into excludedText                                                
		from category_path_excluded_words;                                            
                                                                                
	--	Add a delimiter to the end of the string so we dont lose last value and     
	--	surround \ with spaces                                                      
	                                                                               
	text_delimiter := ' ';                                                         
	string_tokens := replace(text_to_parse,'\',' \ ') || text_delimiter;           
                                                                                
	--get length of string                                                         
	string_length := length(string_tokens);                                        
                                                                                
	--set start and end for first token                                            
	start_pos := 1;                                                                
	end_pos   := instr(string_tokens,text_delimiter,1,1);                          
	counter := 1;                                                                  
                                                                                
	LOOP                                                                           
		--	Get substring                                                              
		token_value := substr(string_tokens, start_pos, end_pos - start_pos);         
	                                                                               
		--	check if token_value is in excludedText, if yes, set indicator             
	                                                                               
		noInitCap := false;                                                           
		exclCt := excludedText.FIRST;                                                 
                                                                                
		if (substr(token_value,1,1) = '(' and substr(token_value,length(token_value),1
) = ')' ) then                                                                  
			noInitCap := true;                                                           
		else                                                                          
		while (exclCt is not null and not noInitCap)                                  
			loop                                                                         
				if token_value = excludedText(exclCt).excluded_text then                    
					noInitCap := true;                                                         
				end if;                                                                     
				exclCt := excludedText.NEXT (exclCt);                                       
			end loop;                                                                    
		end if;                                                                       
	                                                                               
		if noInitCap then                                                             
			initcap_text := initcap_text || token_value || ' ';                          
		else                                                                          
			initcap_text := initcap_text || initcap(token_value) || ' ';                 
		end if;                                                                       
                                                                                
		--Check to see if we are done                                                 
		IF end_pos = string_length                                                    
		THEN                                                                          
			initcap_text := replace(rtrim(initcap_text,' '),' \ ','\');                  
			EXIT;                                                                        
		ELSE                                                                          
			-- Increment Start Pos and End Pos                                           
			start_pos := end_pos + 1;                                                    
			--	increment counter                                                         
			counter := counter + 1;                                                      
			end_pos := instr(string_tokens, text_delimiter,1, counter);                  
                                                                                
		END IF;                                                                       
  END LOOP;                                                                     
                                                                                
  return initcap_text;                                                          
                                                                                
END RDC_INIT_CAP;                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."PARSE_NTH_VALUE" (pValue varchar2, locatio
n NUMBER, delimiter VARCHAR2)                                                   
   return varchar2                                                              
is                                                                              
   v_posA number;                                                               
   v_posB number;                                                               
                                                                                
begin                                                                           
                                                                                
   if location = 1 then                                                         
      v_posA := 1; -- Start at the beginning                                    
   else                                                                         
      v_posA := instr (pValue, delimiter, 1, location - 1);                     
      if v_posA = 0 then                                                        
         return null; --No values left.                                         
      end if;                                                                   
      v_posA := v_posA + length(delimiter);                                     
   end if;                                                                      
                                                                                
   v_posB := instr (pValue, delimiter, 1, location);                            
   if v_posB = 0 then -- Use the end of the file                                
      return substr (pValue, v_posA);                                           
   end if;                                                                      
                                                                                
   return substr (pValue, v_posA, v_posB - v_posA);                             
                                                                                
end parse_nth_value;                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."NUM_OCCURANCES" (                         
  input_str nvarchar2,                                                          
  search_str nvarchar2                                                          
) return number                                                                 
as                                                                              
  num number;                                                                   
begin                                                                           
  num := 0;                                                                     
  while instr(input_str, search_str, 1, num + 1) > 0 loop                       
    num := num + 1;                                                             
  end loop;                                                                     
  return num;                                                                   
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."IS_NUMBER_V2"                             
 ( p_string in varchar2)                                                        
 return number                                                                  
    as                                                                          
        l_number number;                                                        
    begin                                                                       
        l_number := p_string;                                                   
        return l_number;                                                        
   exception                                                                    
       when others then                                                         
           return 1;                                                            
   end;                                                                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."IS_NUMBER"                                
 ( p_string in varchar2)                                                        
 return number                                                                  
    as                                                                          
        l_number number;                                                        
    begin                                                                       
        l_number := p_string;                                                   
        return 0;                                                               
   exception                                                                    
       when others then                                                         
           return 1;                                                            
   end;                                                                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."IS_DATE"                                  
 ( p_string in varchar2                                                         
 , d_fmt varchar2 := 'YYYYMMDD')                                                
 return number                                                                  
    as                                                                          
        x_date date;                                                            
    begin                                                                       
        x_date := to_date(p_string,d_fmt);                                      
        return 0;                                                               
   exception                                                                    
       when others then                                                         
           return 1;                                                            
   end;                                                                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."INSERT_ETL_JOB_STEP" (                    
  jobrunid IN CONTROL.AZ_JOB_RUN.JOB_RUN_ID%TYPE,                               
  stepname IN CONTROL.CZ_JOB_STEP.STEP_NAME%TYPE,                               
  stepDesc IN CONTROL.CZ_JOB_STEP.STEP_DESC%TYPE,                               
  tablename IN CONTROL.CZ_JOB_STEP_EXP_RESULT.TABLE_NAME%TYPE,                  
  dmltype IN CONTROL.CZ_JOB_STEP_EXP_RESULT.DML_TYPE%TYPE,                      
  expRecordcnt IN CONTROL.CZ_JOB_STEP_EXP_RESULT.EXP_RECORD_CNT%TYPE            
)                                                                               
                                                                                
  RETURN CONTROL.AZ_JOB_STEP_RUN.JOB_STEP_RUN_ID%TYPE                           
                                                                                
IS                                                                              
                                                                                
  insertDt CONTROL.AZ_JOB_RUN.START_DATE%TYPE;                                  
  --ID                                                                          
  seqID CONTROL.CZ_JOB_X_JOB_STEP.SEQ_ID%TYPE;                                  
  jobStepID CONTROL.CZ_JOB_STEP.JOB_STEP_ID%TYPE;                               
  jobID CONTROL.CZ_JOB_X_JOB_STEP.JOB_ID%TYPE;                                  
                                                                                
  --return value                                                                
  jobStepRunID CONTROL.AZ_JOB_STEP_RUN.JOB_STEP_RUN_ID%TYPE;                    
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
   -- Inserts a record into the AZ_JOB_RUN_STEP                                 
   -- Returns the job step id for updating the step.                            
   -- KCR@20090109 - First rev.                                                 
  --  KCR@20090330 - rewriting for new data structure                           
                                                                                
   -----------------------------------------------------------------------------
--                                                                              
  --get insert date/time                                                        
  insertDt := SYSDATE;                                                          
  --job_step_id := 0;                                                           
                                                                                
  --get the job id                                                              
  select job_id into jobID                                                      
    from control.az_job_run                                                     
    where job_run_id = jobRunID;                                                
                                                                                
                                                                                
  --DETERMINE IF STEP EXISTS:                                                   
    select coalesce(max(b.seq_id), 1),                                          
      coalesce(max(a.job_step_id),0)                                            
      into seqID, jobStepID                                                     
    from control.cz_job_step a                                                  
    left outer join control.cz_job_x_job_step b                                 
      on a.job_step_id = b.job_step_id                                          
    where a.step_name = stepName;                                               
                                                                                
     dbms_output.put_line(seqID ||'A' || jobStepID ||'B' || jobID);             
                                                                                
  --doesn't exist                                                               
  if jobStepID = 0                                                              
    then                                                                        
    --1. Create a new step                                                      
    INSERT INTO                                                                 
    CZ_JOB_STEP                                                                 
      (STEP_NAME,                                                               
      STEP_DESC)                                                                
      VALUES (                                                                  
    stepName,                                                                   
    stepDesc);                                                                  
  COMMIT;                                                                       
                                                                                
    --2. get the step id                                                        
    select coalesce(max(b.seq_id)+1, 1),                                        
      max(a.job_step_id)                                                        
      into seqID, jobStepID                                                     
    from control.cz_job_step a                                                  
    left outer join control.cz_job_x_job_step b                                 
      on a.job_step_id = b.job_step_id                                          
    where a.step_name = stepName;                                               
                                                                                
     dbms_output.put_line(seqID ||'A' || jobStepID ||'B' || jobID);             
    --3. Insert a record into the Job to Step crosstable                        
    INSERT INTO                                                                 
      CONTROL.CZ_JOB_X_JOB_STEP                                                 
        (JOB_ID,                                                                
        JOB_STEP_ID,                                                            
        SEQ_ID)                                                                 
                                                                                
    VALUES  (                                                                   
      jobID,                                                                    
      jobStepID,                                                                
      seqID);                                                                   
    COMMIT;                                                                     
                                                                                
    --4. Insert the Job Step Expected Results                                   
    INSERT INTO                                                                 
      CZ_JOB_STEP_EXP_RESULT                                                    
        (JOB_STEP_ID,                                                           
        TABLE_NAME,                                                             
        DML_TYPE,                                                               
        EXP_RECORD_CNT)                                                         
    VALUES(                                                                     
      jobStepID,                                                                
      tableName,                                                                
      dmlType,                                                                  
      expRecordCnt);                                                            
    COMMIT;                                                                     
                                                                                
  end if;                                                                       
                                                                                
     dbms_output.put_line(seqID ||'A' || jobStepID ||'B' || jobID);             
                                                                                
--insert a record into the job step run table                                   
  INSERT INTO                                                                   
    AZ_JOB_STEP_RUN (                                                           
      JOB_RUN_ID,                                                               
      JOB_STEP_ID,                                                              
      START_DATE,                                                               
      STATUS,                                                                   
      SEQ_ID)                                                                   
  VALUES(                                                                       
    jobRunID,                                                                   
    jobStepID,                                                                  
    insertDt,                                                                   
    'RUNNING',                                                                  
    seqID);                                                                     
   COMMIT;                                                                      
                                                                                
  --Get Job step Run ID                                                         
  SELECT max(JOB_STEP_RUN_ID)                                                   
    INTO jobStepRunID                                                           
    FROM CONTROL.AZ_JOB_STEP_RUN a                                              
    WHERE                                                                       
      a.job_run_id = jobRunID                                                   
      and a.job_step_id = jobStepID;                                            
                                                                                
   --Return Job Run ID                                                          
   RETURN jobStepRunID;                                                         
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."INSERT_ETL_JOB_RUN" (                     
  jobName IN CONTROL.CZ_JOB.JOB_NAME%TYPE, --Name from SYSTEM_JOB Table         
  dataFileID IN CONTROL.CZ_DATA_FILE.DATA_FILE_ID% TYPE,                        
  userName IN CONTROL.CZ_PERSON.USER_NAME%TYPE,                                 
  jobDesc IN CONTROL.CZ_JOB.JOB_DESC%TYPE,                                      
  runFreq IN CONTROL.CZ_JOB.RUN_FREQ%TYPE,                                      
  conceptLoadType IN CONTROL.CZ_JOB.CONCEPT_LOAD_TYPE%TYPE                      
)                                                                               
                                                                                
RETURN CONTROL.AZ_JOB_RUN.JOB_RUN_ID%TYPE                                       
                                                                                
IS                                                                              
insertDt CONTROL.AZ_JOB_RUN.START_DATE%TYPE;                                    
jobID CONTROL.AZ_JOB_RUN.JOB_ID%TYPE;                                           
personID CONTROL.CZ_PERSON.PERSON_ID%TYPE;                                      
jobRunID CONTROL.AZ_JOB_RUN.JOB_RUN_ID%TYPE; --return value                     
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
   -- iF a Job does, not exist, it will create it.                              
  -- Adds a record to the Job Run table                                         
   -- OUTER JOIN TO  SYSPERSON USED SO THAT ROW IS INSERTED NO MATTER WHAT.     
   -- Returns the job run id for adding steps.                                  
   -- KCR@20090327 - First rev.                                                 
   -----------------------------------------------------------------------------
--                                                                              
  --get insert date/time                                                        
  insertDt := SYSDATE;                                                          
  jobid := '';                                                                  
  personid := '';                                                               
                                                                                
                                                                                
                                                                                
  BEGIN                                                                         
    --GET JOB ID                                                                
    SELECT a.JOB_ID                                                             
      INTO jobID                                                                
    FROM CONTROL.CZ_JOB a                                                       
      WHERE UPPER(a.JOB_NAME) = UPPER(jobName);                                 
                                                                                
  EXCEPTION                                                                     
    WHEN NO_DATA_FOUND                                                          
    THEN jobid := 0;                                                            
                                                                                
  END;                                                                          
                                                                                
  BEGIN                                                                         
    --GET PERSON ID                                                             
    SELECT a.PERSON_ID                                                          
      INTO personID                                                             
    FROM CONTROL.CZ_PERSON a                                                    
      WHERE UPPER(a.USER_NAME) = UPPER(userName);                               
                                                                                
  EXCEPTION                                                                     
  WHEN NO_DATA_FOUND                                                            
  THEN personid := '';                                                          
                                                                                
  END;                                                                          
                                                                                
  --if the job doesn't exist, create a new job                                  
  IF jobID = 0                                                                  
  THEN                                                                          
    Insert into                                                                 
      CONTROL.CZ_JOB                                                            
      (JOB_NAME,                                                                
      JOB_DESC,                                                                 
      RUN_FREQ,                                                                 
      CREATE_DATE,                                                              
      CREATED_BY,                                                               
      CONCEPT_LOAD_TYPE)                                                        
    VALUES                                                                      
      (jobName,                                                                 
      jobDesc,                                                                  
      runFreq,                                                                  
      insertDt,                                                                 
      personID,                                                                 
      conceptLoadType                                                           
      );                                                                        
    COMMIT;                                                                     
                                                                                
    --GET JOB ID                                                                
    SELECT a.JOB_ID                                                             
      INTO jobID                                                                
    FROM CONTROL.CZ_JOB a                                                       
      WHERE UPPER(a.JOB_NAME) = UPPER(jobName);                                 
                                                                                
    --IF PERSON EXISTS, INSERT IT                                               
    IF personID !=''                                                            
    THEN                                                                        
      UPDATE CONTROL.CZ_JOB                                                     
        SET CREATED_BY = personID;                                              
                                                                                
    END IF;                                                                     
 END IF;                                                                        
                                                                                
  --Insert Record                                                               
  INSERT INTO                                                                   
   CONTROL.AZ_JOB_RUN                                                           
    (JOB_ID, START_DATE, STATUS, DW_VERSION_ID, PERSON_ID)                      
  SELECT                                                                        
   jobID,                                                                       
   insertDt,                                                                    
   'RUNNING',                                                                   
   a.DW_VERSION_ID,                                                             
   personID                                                                     
  FROM  CONTROL.CZ_DW_VERSION a                                                 
  WHERE                                                                         
   UPPER(a.IS_CURRENT) = 'Y';                                                   
  COMMIT;                                                                       
                                                                                
  --Get Job Run ID                                                              
  SELECT a.JOB_RUN_ID                                                           
    INTO jobRunID                                                               
    FROM CONTROL.AZ_JOB_RUN a                                                   
    WHERE                                                                       
      a.JOB_ID = jobID                                                          
      AND a.START_DATE = insertDt;                                              
                                                                                
  --insert JOB RUN TO DATA FILE INFO                                            
  INSERT INTO                                                                   
    AZ_JOB_RUN_X_DATA_FILE                                                      
      (JOB_RUN_ID,                                                              
      DATA_FILE_ID)                                                             
  SELECT                                                                        
    jobRunID,                                                                   
    a.data_file_id                                                              
  FROM                                                                          
    CONTROL.cz_data_file a                                                      
  WHERE a.data_file_id = dataFileID;                                            
                                                                                
   --Return Job Run ID                                                          
   RETURN jobRunID;                                                             
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."CZF_PARSE_NTH_VALUE" (pValue varchar2, loc
ation NUMBER, delimiter VARCHAR2)                                               
   return varchar2                                                              
is                                                                              
   v_posA number;                                                               
   v_posB number;                                                               
                                                                                
begin                                                                           
                                                                                
   if location = 1 then                                                         
      v_posA := 1; -- Start at the beginning                                    
   else                                                                         
      v_posA := instr (pValue, delimiter, 1, location - 1);                     
      if v_posA = 0 then                                                        
         return null; --No values left.                                         
      end if;                                                                   
      v_posA := v_posA + length(delimiter);                                     
   end if;                                                                      
                                                                                
   v_posB := instr (pValue, delimiter, 1, location);                            
   if v_posB = 0 then -- Use the end of the file                                
      return substr (pValue, v_posA);                                           
   end if;                                                                      
                                                                                
   return substr (pValue, v_posA, v_posB - v_posA);                             
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."CZF_NUM_OCCURANCES" (                     
  input_str nvarchar2,                                                          
  search_str nvarchar2                                                          
) return number                                                                 
as                                                                              
  num number;                                                                   
begin                                                                           
  num := 0;                                                                     
  while instr(input_str, search_str, 1, num + 1) > 0 loop                       
    num := num + 1;                                                             
  end loop;                                                                     
  return num;                                                                   
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."CZF_INIT_CAP" (                           
     text_to_parse IN VARCHAR2                                                  
	-- text_delimiter IN VARCHAR2                                                  
)                                                                               
--	text string returned with words initcapped except for any in category_path_ex
cluded_words                                                                    
                                                                                
RETURN VARCHAR2                                                                 
                                                                                
AS                                                                              
   start_pos 		NUMBER;                                                          
   end_pos   		NUMBER;                                                          
   string_length 	INTEGER;                                                      
   string_tokens 	VARCHAR2(32676);                                              
   counter 			INTEGER;                                                          
   token_value 		VARCHAR2(1000);                                                
   text_delimiter 	char(1);                                                     
   noInitCap 		boolean;                                                         
                                                                                
   --	create array to hold strings that will not be initcapped                  
                                                                                
	type excluded_aat is table of category_path_excluded_words%ROWTYPE index by PLS
_INTEGER;                                                                       
	excludedText excluded_aat;                                                     
	exclCt PLS_INTEGER;                                                            
                                                                                
   --	text to return                                                            
   initcap_text varchar2(1000);                                                 
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
   -- Performs custom initcap for category paths where specific text strings are
                                                                                
   -- excluded from the process.  Strings are delimited by a space.  The \ in   
   -- the category path are converted to ' \ ' before parsing.                  
                                                                                
   -- JEA@20091001 - First rev.                                                 
   -- Copyright ? 2009 Recombinant Data Corp.                                   
   -----------------------------------------------------------------------------
--                                                                              
                                                                                
	--	Load exclusion text                                                         
                                                                                
	select excluded_text                                                           
		bulk collect into excludedText                                                
		from category_path_excluded_words;                                            
                                                                                
	--	Add a delimiter to the end of the string so we dont lose last value and     
	--	surround \ with spaces                                                      
	                                                                               
	text_delimiter := ' ';                                                         
	string_tokens := replace(text_to_parse,'\',' \ ') || text_delimiter;           
                                                                                
	--get length of string                                                         
	string_length := length(string_tokens);                                        
                                                                                
	--set start and end for first token                                            
	start_pos := 1;                                                                
	end_pos   := instr(string_tokens,text_delimiter,1,1);                          
	counter := 1;                                                                  
                                                                                
	LOOP                                                                           
		--	Get substring                                                              
		token_value := substr(string_tokens, start_pos, end_pos - start_pos);         
	                                                                               
		--	check if token_value is in excludedText, if yes, set indicator             
	                                                                               
		noInitCap := false;                                                           
		exclCt := excludedText.FIRST;                                                 
                                                                                
		while (exclCt is not null and not noInitCap)                                  
		loop                                                                          
			if token_value = excludedText(exclCt).excluded_text then                     
				noInitCap := true;                                                          
			end if;                                                                      
			exclCt := excludedText.NEXT (exclCt);                                        
		end loop;                                                                     
	                                                                               
		if noInitCap then                                                             
			initcap_text := initcap_text || token_value || ' ';                          
		else                                                                          
			initcap_text := initcap_text || initcap(token_value) || ' ';                 
		end if;                                                                       
                                                                                
		--Check to see if we are done                                                 
		IF end_pos = string_length                                                    
		THEN                                                                          
			initcap_text := replace(rtrim(initcap_text,' '),' \ ','\');                  
			EXIT;                                                                        
		ELSE                                                                          
			-- Increment Start Pos and End Pos                                           
			start_pos := end_pos + 1;                                                    
			--	increment counter                                                         
			counter := counter + 1;                                                      
			end_pos := instr(string_tokens, text_delimiter,1, counter);                  
                                                                                
		END IF;                                                                       
  END LOOP;                                                                     
                                                                                
  return initcap_text;                                                          
                                                                                
END CZF_INIT_CAP;                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_JUB_ONCOL_SUM_DATA_UID" (             
  RECORD_ID NUMBER,                                                             
  BIO_CURATION_NAME VARCHAR2                                                    
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BJOS:' || nvl(TO_CHAR(RECORD_ID), 'ERROR') || ':' || nvl(BIO_CURATION_
NAME, 'ERROR');                                                                 
END BIO_JUB_ONCOL_SUM_DATA_UID;                                                 
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_JUB_ONCOL_DATA_UID" (                 
  RECORD_ID NUMBER,                                                             
  BIO_CURATION_NAME VARCHAR2                                                    
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BJOD:' || nvl(TO_CHAR(RECORD_ID), 'ERROR') || ':' || nvl(BIO_CURATION_
NAME, 'ERROR');                                                                 
END BIO_JUB_ONCOL_DATA_UID;                                                     
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_EXPERIMENT_UID" (                     
  PRIMARY_ID VARCHAR2                                                           
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'EXP:' || nvl(PRIMARY_ID, 'ERROR');                                    
END bio_experiment_uid;                                                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_DISEASE_UID" (                        
  MESH_CODE VARCHAR2                                                            
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates bio_disease_uid.                                                   
                                                                                
  RETURN 'DIS:' || nvl(MESH_CODE, 'ERROR');                                     
END BIO_DISEASE_UID;                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_CURATION_DATASET_UID" (               
  BIO_CURATION_TYPE VARCHAR2                                                    
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BCD:' || nvl(BIO_CURATION_TYPE, 'ERROR');                             
END BIO_CURATION_DATASET_UID;                                                   
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_COMPOUND_UID"                         
( CAS_REGISTRY IN VARCHAR2,                                                     
  JNJ_NUMBER IN VARCHAR2,                                                       
  CNTO_NUMBER IN VARCHAR2                                                       
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Function to create compound_uid.                                           
                                                                                
  RETURN 'COM:' || nvl(CAS_REGISTRY, nvl(JNJ_NUMBER, nvl(CNTO_NUMBER, 'ERROR')))
;                                                                               
END BIO_COMPOUND_UID;                                                           
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_ASY_ANALYSIS_PLTFM_UID" (             
  PLATFORM_NAME VARCHAR2                                                        
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BAAP:' || nvl(PLATFORM_NAME, 'ERROR');                                
END bio_asy_analysis_pltfm_uid;                                                 
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_ASSAY_PLATFORM_UID" (                 
  PLATFORM_NAME VARCHAR2                                                        
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BAP:' || nvl(PLATFORM_NAME, 'ERROR');                                 
END bio_assay_platform_uid;                                                     
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIO_ASSAY_ANALYSIS_UID" (                 
  ANALYSIS_NAME VARCHAR2                                                        
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'BAA:' || nvl(ANALYSIS_NAME, 'ERROR');                                 
END bio_assay_analysis_uid;                                                     
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FUNCTION "TM_CZ"."BIOMARKER_PATHWAY_UID" (                  
  P_SOURCE IN VARCHAR2 ,                                                        
  PATHWAY_ID  IN VARCHAR2                                                       
) RETURN VARCHAR2 AS                                                            
BEGIN                                                                           
  -- $Id$                                                                       
  -- Creates uid for bio_experiment.                                            
                                                                                
  RETURN 'PATHWAY:'|| P_SOURCE || ':' || nvl(PATHWAY_ID, 'ERROR');              
END biomarker_pathway_uid;                                                      
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_FORM_LAYOUT_PK" ON "TM_CZ"."CZ_FORM_LAYOUT" ("
FORM_LAYOUT_ID")                                                                
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"                                                             
                                                                                
                                                                                
                                                                                
  CREATE INDEX "TM_CZ"."T_A_G_T500_IDX" ON "BIOMART"."TMP_ANALYSIS_GWAS_TOP500" 
("RS_ID")                                                                       
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"                                                             
                                                                                
                                                                                
                                                                                
  CREATE INDEX "TM_CZ"."T_A_GA_T500_IDX" ON "BIOMART"."TMP_ANALYSIS_GWAS_TOP500"
 ("BIO_ASSAY_ANALYSIS_ID")                                                      
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"                                                             
                                                                                
                                                                                
                                                                                
  CREATE INDEX "TM_CZ"."PROBESET_DEAPP_I2" ON "TM_CZ"."PROBESET_DEAPP" ("PROBESE
T", "PLATFORM")                                                                 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 10485760 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645      
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE INDEX "TM_CZ"."PROBESET_DEAPP_I1" ON "TM_CZ"."PROBESET_DEAPP" ("PROBESE
T_ID")                                                                          
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 4194304 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."NODE_CURATION_PK" ON "TM_CZ"."NODE_CURATION" ("NO
DE_TYPE", "NODE_NAME", "STUDY_ID")                                              
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"                                                             
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_TEST_PK" ON "TM_CZ"."CZ_TEST" ("TEST_ID")     
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_TEST_CATEGORY_PK" ON "TM_CZ"."CZ_TEST_CATEGORY
" ("TEST_CATEGORY_ID")                                                          
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_REQUIRED_UPLOAD_FIELD_PK" ON "TM_CZ"."CZ_REQUI
RED_UPLOAD_FIELD" ("REQUIRED_UPLOAD_FIELD_ID")                                  
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"                                                             
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_PERSON_PK" ON "TM_CZ"."CZ_PERSON" ("PERSON_ID"
)                                                                               
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_JOB_MASTER_PK" ON "TM_CZ"."CZ_JOB_MASTER" ("JO
B_ID")                                                                          
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645        
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE UNIQUE INDEX "TM_CZ"."CZ_JOB_AUDIT_PK" ON "TM_CZ"."CZ_JOB_AUDIT" ("SEQ_
ID")                                                                            
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS               
  STORAGE(INITIAL 3145728 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CREATE_SYNONYMS" (                       
  fromDB IN VARCHAR2,                                                           
  toDB IN VARCHAR2                                                              
)                                                                               
AS                                                                              
  CURSOR cTableList is                                                          
    select                                                                      
      UPPER(owner) AS OWNER,                                                    
      UPPER(table_name) AS TABLE_NAME                                           
    from                                                                        
      all_tables                                                                
    order by owner, table_name;                                                 
                                                                                
  dbCount NUMBER;                                                               
  sourceDB varchar2(200);                                                       
  targetDB VARCHAR2(200);                                                       
                                                                                
  dynamicSQL varchar2(2000);                                                    
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
    --Create or replace Synonyms Point to DB A (TO) From DB B (FROM)            
    --Input: From DB, TO DB                                                     
    --Output: Nothing                                                           
   -- KCR@20090310 - First rev.                                                 
   -----------------------------------------------------------------------------
--                                                                              
                                                                                
/* CANT READ FROM DBA_TABLESPACES                                               
    --Check that DB's exist                                                     
    select count(*) into dbCount from dba_tablespaces where tablespace_name = up
per(fromDB);                                                                    
    if dbCOunt > 1                                                              
      then                                                                      
      dbms_output.put_line('From DB is invalid!: ' || fromDB);                  
   end if;                                                                      
                                                                                
    if dbCount > 1                                                              
      then                                                                      
      dbms_output.put_line('TO DB is invalid!: ' || toDB);                      
   end if;                                                                      
*/                                                                              
                                                                                
  sourceDB := UPPER(fromDB);                                                    
  targetDB := UPPER(toDB);                                                      
                                                                                
                                                                                
                                                                                
    --Loop through full list of results (All table for all schemas)             
    for r_cTableList in cTableList                                              
    loop                                                                        
      --if The current owner(DB) matched the toDB then begin creating Synonyms. 
      if r_cTableList.owner = targetDB                                          
        then                                                                    
        dynamicSQL := 'CREATE OR REPLACE SYNONYM "' || sourceDB || '"."' || r_cT
ableList.table_name || '" FOR "' || targetDB || '"."' || r_cTableList.table_name
 || '"';                                                                        
        dbms_output.put_line(dynamicSQL);                                       
        EXECUTE IMMEDIATE dynamicSQL;                                           
     end if;                                                                    
    commit;                                                                     
    end loop; --Loops through full resultset                                    
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_TRUNCATE_TABLE"                     
(                                                                               
  v_tabname IN VARCHAR2 DEFAULT NULL ,                                          
  v_dummyarg IN VARCHAR2 DEFAULT 'Y'                                            
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_TRUNCATE_TABLE                                                    
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   CURSOR v_cmdlist IS                                                          
     /* disable all foreign key constraints on this table */                    
     SELECT 'alter table ' || t1.owner ||'.' || t1.table_name ||' disable constr
aint '|| t1.constraint_name || '' cmd                                           
     FROM user_constraints t1, user_constraints t2                              
     WHERE T1.CONSTRAINT_TYPE='R' and T1.R_CONSTRAINT_NAME=T2.CONSTRAINT_NAME an
d                                                                               
        T2.TABLE_NAME = v_tabname                                               
     UNION ALL                                                                  
     /* finally actually truncate the table */                                  
     SELECT 'truncate table ' || v_tabname || '' cmd                            
     FROM dual                                                                  
     UNION ALL                                                                  
     /* do a delete just incase the truncate failed */                          
     SELECT 'delete from ' || v_tabname || '' cmd                               
     FROM dual;                                                                 
                                                                                
   v_cmdline VARCHAR2(200);                                                     
   v_drop_if_populated INTEGER;                                                 
                                                                                
BEGIN                                                                           
                                                                                
   /* done with the SQL select - now process each command we selected */        
   OPEN v_cmdlist;                                                              
   FETCH v_cmdlist INTO v_cmdline;                                              
   WHILE v_cmdlist%FOUND                                                        
   LOOP                                                                         
                                                                                
      BEGIN                                                                     
         BEGIN                                                                  
                                                                                
            BEGIN                                                               
               EXECUTE IMMEDIATE v_cmdline;                                     
               DBMS_OUTPUT.PUT_LINE('SUCCESS ' || v_cmdline);                   
            END;                                                                
         EXCEPTION                                                              
            WHEN OTHERS THEN                                                    
                                                                                
               BEGIN                                                            
                  DBMS_OUTPUT.PUT_LINE('ERROR ' || v_cmdline);                  
               END;                                                             
         END;                                                                   
         FETCH v_cmdlist INTO v_cmdline;                                        
      END;                                                                      
   END LOOP;                                                                    
   -- while loop                                                                
   CLOSE v_cmdlist;-- procedure                                                 
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_RECOMPILE_ALL"                      
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_RECOMPILE_ALL                                                     
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   CURSOR v_proclist IS                                                         
     SELECT distinct 'alter '|| object_type || ' ' || object_name || ' compile '
                                                                                
     FROM user_procedures;                                                      
                                                                                
   v_procname VARCHAR2(50);                                                     
                                                                                
BEGIN                                                                           
                                                                                
   OPEN v_proclist;                                                             
   FETCH v_proclist INTO v_procname;                                            
   WHILE v_proclist%FOUND                                                       
   LOOP                                                                         
                                                                                
      BEGIN                                                                     
         BEGIN                                                                  
                                                                                
            BEGIN                                                               
               execute immediate v_procname;                                    
               DBMS_OUTPUT.PUT_LINE('succesfully compiled ' || v_procname);     
            END;                                                                
         EXCEPTION                                                              
            WHEN OTHERS THEN                                                    
                                                                                
               BEGIN                                                            
                  DBMS_OUTPUT.PUT_LINE('error compiling ' || v_procname);       
               END;                                                             
         END;                                                                   
         FETCH v_proclist INTO v_procname;                                      
      END;                                                                      
   END LOOP;                                                                    
   -- while loop                                                                
   CLOSE v_proclist;-- procedure                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_MAKE_OBJECT_LIST"                   
(                                                                               
  -- comma-separated list of things,                                            
  v_whattype IN VARCHAR2 DEFAULT NULL,                                          
                                                                                
  -- resolved list of things formatted as a list of quoted strings              
  -- but without the enclosing parentheses.                                     
  v_things OUT VARCHAR2                                                         
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_MAKE_OBJECT_LIST                                                  
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
                                                                                
BEGIN                                                                           
                                                                                
   v_things := REPLACE(UPPER(v_whattype), 'PROCEDURES', 'P,PC') ;               
   v_things := REPLACE(UPPER(v_things), 'PROCEDURE', 'P,PC') ;                  
   v_things := REPLACE(UPPER(v_things), 'CONSTRAINTS', 'PK,F') ;                
   v_things := REPLACE(UPPER(v_things), 'CONSTRAINT', 'PK,F') ;                 
   v_things := REPLACE(UPPER(v_things), 'FUNCTIONS', 'FN') ;                    
   v_things := REPLACE(UPPER(v_things), 'FUNCTION', 'FN') ;                     
   v_things := REPLACE(UPPER(v_things), 'TABLES', 'U') ;                        
   v_things := REPLACE(UPPER(v_things), 'TABLE', 'U') ;                         
   v_things := REPLACE(UPPER(v_things), 'VIEWS', 'V') ;                         
   v_things := REPLACE(UPPER(v_things), 'VIEW', 'V') ;                          
                                                                                
   -- add more common names for things                                          
   -- but now transform a,b into 'a','b'                                        
   v_things := REPLACE(UPPER(v_things), ',', ''',''') ;                         
   v_things := '''' || v_things || '''' ;                                       
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_IS_POPULATED"                       
(                                                                               
  tabname IN varchar2,                                                          
  retval OUT integer                                                            
)                                                                               
AUTHID CURRENT_USER                                                             
as                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_IS_POPULATED                                                      
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
  sqltext varchar2(500);                                                        
  l_count pls_integer;                                                          
                                                                                
begin                                                                           
                                                                                
   sqltext := 'select count(*) into :result from ' || tabname;                  
                                                                                
   execute immediate sqltext into l_count;                                      
                                                                                
                                                                                
   if l_count > 0 then                                                          
   retval :=1;                                                                  
   else                                                                         
    retval := 0;                                                                
   end if;                                                                      
                                                                                
   --dbms_output.put_line(l_count);                                             
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_GRANT_SELECT"                       
(username	varchar2 := 'DATATRUST')                                              
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_GRANT_ALL                                                         
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
                                                                                
    --GRANTS SELECT PERMISSIONS to DATATRUST (default) or specified user        
    --ON OBJECTS OWNED BY THE CURRENT USER                                      
	                                                                               
	--	JEA@20110927	New, cloned from UTIL_GRANT_ALL                                
                                                                                
    v_user      varchar2(2000) := SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');     
                                                                                
  begin                                                                         
                                                                                
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);     
    dbms_output.put_line('Tables');                                             
                                                                                
     for L_TABLE in (select table_name from user_tables) LOOP                   
                                                                                
	 execute immediate 'grant select on ' || L_TABLE.table_name || ' to ' || userna
me;                                                                             
          DBMS_OUTPUT.put_line('grant select on ' || L_TABLE.table_name || ' to 
' || username);                                                                 
                                                                                
     END LOOP; --TABLE LOOP                                                     
                                                                                
  --  dbms_output.put_line(chr(10) || 'Views');                                 
                                                                                
 --   for L_VIEW in (select object_name from user_objects where object_type = 'V
IEW' )                                                                          
  --   LOOP                                                                     
                                                                                
   --    execute immediate 'grant select on ' || L_VIEW.object_name || ' to ' ||
 username;                                                                      
   --    DBMS_OUTPUT.put_line('grant select on ' || L_VIEW.object_name || ' to '
 || username);                                                                  
                                                                                
   --  END LOOP; --VIEW LOOP                                                    
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_GRANT_EXECUTE"                      
(                                                                               
  v_to_zone IN VARCHAR2 DEFAULT NULL ,                                          
  v_type IN VARCHAR2 DEFAULT 'TABLES,VIEWS'                                     
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_GRANT_EXECUTE                                                     
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
                                                                                
   v_object_name VARCHAR2(50);                                                  
   v_cmdline VARCHAR2(200);                                                     
                                                                                
   cursor l_table is                                                            
        select table_name from all_tables where owner = v_to_zone;              
                                                                                
   cursor l_view is                                                             
        select view_name from all_views where owner = v_to_zone;                
                                                                                
BEGIN                                                                           
                                                                                
   if upper(v_type) like '%TABLE%' then                                         
       OPEN l_table;                                                            
       FETCH l_table INTO v_object_name;                                        
       WHILE l_table%FOUND                                                      
       LOOP                                                                     
          BEGIN                                                                 
             v_cmdline := 'grant select on ' || v_object_name || ' to ' || v_to_
zone;                                                                           
                                                                                
             BEGIN                                                              
                                                                                
                BEGIN                                                           
                   EXECUTE IMMEDIATE v_cmdline;                                 
                   DBMS_OUTPUT.PUT_LINE('SUCCESS ' || v_cmdline);               
                END;                                                            
             EXCEPTION                                                          
                WHEN OTHERS THEN                                                
                                                                                
                   BEGIN                                                        
                      DBMS_OUTPUT.PUT_LINE('ERROR ' || v_cmdline);              
                   END;                                                         
             END;                                                               
                                                                                
             FETCH l_table INTO v_object_name;                                  
          END;                                                                  
       END LOOP;                                                                
       CLOSE l_table;                                                           
   end if;                                                                      
                                                                                
   if upper(v_type) like '%VIEW%' then                                          
       OPEN l_view;                                                             
       FETCH l_view INTO v_object_name;                                         
       WHILE l_view%FOUND                                                       
       LOOP                                                                     
          BEGIN                                                                 
                                                                                
             v_cmdline := 'grant select on ' || v_object_name || ' to ' || v_to_
zone;                                                                           
                                                                                
             BEGIN                                                              
                                                                                
                BEGIN                                                           
                   EXECUTE IMMEDIATE v_cmdline;                                 
                   DBMS_OUTPUT.PUT_LINE('SUCCESS ' || v_cmdline);               
                END;                                                            
             EXCEPTION                                                          
                WHEN OTHERS THEN                                                
                                                                                
                   BEGIN                                                        
                      DBMS_OUTPUT.PUT_LINE('ERROR ' || v_cmdline);              
                   END;                                                         
             END;                                                               
                                                                                
             FETCH l_view INTO v_object_name;                                   
          END;                                                                  
       END LOOP;                                                                
       CLOSE l_view;                                                            
   end if;                                                                      
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_GRANT_ALL"                          
(username	varchar2 := 'DATATRUST'                                               
,V_WHATTYPE IN VARCHAR2 DEFAULT 'PROCEDURES,FUNCTIONS,TABLES,VIEWS,PACKAGES')   
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_GRANT_ALL                                                         
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
                                                                                
    --GRANTS DATATRUST POSSIBLE PERMISSIONS                                     
    --ON OBJECTS OWNED BY THE CURRENT USER                                      
	                                                                               
	--	JEA@20110901	Added parameter to allow username other than DATATRUST, look fo
r EXTRNL as external table names                                                
                                                                                
    v_user      varchar2(2000) := SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');     
                                                                                
  begin                                                                         
                                                                                
	IF UPPER(V_WHATTYPE) LIKE '%TABLE%' THEN                                       
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);     
    dbms_output.put_line('Tables');                                             
                                                                                
     for L_TABLE in (select table_name from user_tables where table_name not lik
e '%EXTRNL%') LOOP                                                              
                                                                                
       if L_TABLE.table_name like '%EXTRNL%' then                               
          --grant select only to External tables                                
          execute immediate 'grant select on ' || L_TABLE.table_name || ' to ' |
| username;                                                                     
                                                                                
       else                                                                     
          --Grant full permissions on regular tables                            
          execute immediate 'grant select, insert, update, delete on ' || L_TABL
E.table_name || ' to ' || username;                                             
          --DBMS_OUTPUT.put_line('grant select, insert, update, delete on ' || L
_TABLE.table_name || ' to ' || username);                                       
       end if;                                                                  
                                                                                
     END LOOP; --TABLE LOOP                                                     
     end if;                                                                    
                                                                                
	IF UPPER(V_WHATTYPE) LIKE '%VIEW%' THEN                                        
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);     
    dbms_output.put_line('Views');                                              
                                                                                
     for L_VIEW in (select view_name from user_views ) LOOP                     
          execute immediate 'grant select on ' || L_VIEW.view_name || ' to ' || 
username;                                                                       
                                                                                
     END LOOP; --TABLE LOOP                                                     
 end if;                                                                        
                                                                                
 IF UPPER(V_WHATTYPE) LIKE '%PROCEDURE%' or UPPER(V_WHATTYPE) LIKE '%FUNCTION%' 
or UPPER(V_WHATTYPE) LIKE '%PACKAGE%' THEN                                      
    dbms_output.put_line(chr(10) || 'Procedures, functions and packages');      
                                                                                
    for L_PROCEDURE in (select object_name from user_objects where object_type i
n ('PROCEDURE', 'FUNCTION', 'PACKAGE') )                                        
     LOOP                                                                       
                                                                                
       execute immediate 'grant execute on ' || L_PROCEDURE.object_name || ' to 
' || username;                                                                  
      -- DBMS_OUTPUT.put_line('grant execute on ' || L_PROCEDURE.object_name || 
' to ' || username);                                                            
                                                                                
     END LOOP; --PROCEDURE LOOP                                                 
  end if;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_DROP_TABLE"                         
(                                                                               
  v_tabname IN VARCHAR2 DEFAULT NULL                                            
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_DROP_TABLE                                                        
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
  v_exists INTEGER;                                                             
  v_cmdline VARCHAR2(200);                                                      
                                                                                
BEGIN                                                                           
                                                                                
  --Check if table exists                                                       
  select count(*)                                                               
  into v_exists                                                                 
  from user_tables                                                              
  where table_name = v_tabname;                                                 
                                                                                
  if v_exists > 0 then                                                          
     v_cmdline := 'drop table ' || v_tabname;                                   
     EXECUTE IMMEDIATE v_cmdline;                                               
  end if;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_DROP_SYNONYM_BY_OWNER"              
(                                                                               
  v_owner in varchar2,                                                          
  v_dropifempty IN VARCHAR2 DEFAULT 'Y'                                         
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_DROP_SYNONYM_BY_OWNER                                             
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   v_procname VARCHAR2(50);                                                     
   v_objtype VARCHAR2(50);                                                      
   v_table_name VARCHAR2(50);                                                   
   v_view_name VARCHAR2(50);                                                    
   v_synonym_name VARCHAR2(50);                                                 
   v_constraint_name VARCHAR2(50);                                              
                                                                                
                                                                                
   cursor l_synonym is                                                          
     select synonym_name from all_synonyms                                      
	 where owner = v_owner;                                                        
                                                                                
                                                                                
BEGIN                                                                           
                                                                                
   -- drop synonyms(s)                                                          
                                                                                
      open l_synonym;                                                           
      fetch l_synonym into v_synonym_name;                                      
      while l_synonym%FOUND                                                     
      loop                                                                      
         -- dbms_output.put_line( v_synonym_name);                              
         execute immediate( 'drop synonym ' || v_synonym_name) ;                
                                                                                
         fetch l_synonym into v_synonym_name;                                   
      end loop;                                                                 
      close l_synonym;                                                          
                                                                                
                                                                                
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_DROP_SYNONYM"                       
(                                                                               
  v_objname IN VARCHAR2 DEFAULT NULL                                            
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_DROP_SYNONYM                                                      
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   v_cmdline VARCHAR2(100);                                                     
                                                                                
   cursor ts is                                                                 
     select 'drop synonym ' || synonym_name || ' ' from user_synonyms;          
                                                                                
                                                                                
BEGIN                                                                           
                                                                                
  OPEN ts;                                                                      
   FETCH ts INTO v_cmdline;                                                     
   WHILE ts%FOUND                                                               
   LOOP                                                                         
                                                                                
      BEGIN                                                                     
         BEGIN                                                                  
                                                                                
            BEGIN                                                               
               EXECUTE IMMEDIATE v_cmdline;                                     
               DBMS_OUTPUT.PUT_LINE('SUCCESS ' || v_cmdline);                   
            END;                                                                
         EXCEPTION                                                              
            WHEN OTHERS THEN                                                    
                                                                                
               BEGIN                                                            
                  DBMS_OUTPUT.PUT_LINE('ERROR ' || v_cmdline);                  
               END;                                                             
         END;                                                                   
         FETCH ts INTO v_cmdline;                                               
      END;                                                                      
   END LOOP;                                                                    
   CLOSE ts;                                                                    
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_DROP_ANYTHING"                      
(                                                                               
  v_objname IN VARCHAR2 DEFAULT NULL ,                                          
  v_objtype IN VARCHAR2 DEFAULT NULL                                            
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_DROP_ANYTHING                                                     
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   v_cmdline VARCHAR2(100);                                                     
                                                                                
BEGIN                                                                           
                                                                                
   if upper(v_objtype) like 'TABLE%' then                                       
       v_cmdline := 'drop '|| v_objtype || ' '|| v_objname || ' cascade constrai
nt';                                                                            
   else                                                                         
       v_cmdline := 'drop '|| v_objtype || ' '|| v_objname;                     
   end if;                                                                      
                                                                                
   BEGIN                                                                        
      execute immediate v_cmdline;                                              
      DBMS_OUTPUT.PUT_LINE('SUCCESS ' || v_cmdline);                            
   EXCEPTION                                                                    
      WHEN OTHERS THEN                                                          
         DBMS_OUTPUT.PUT_LINE('ERROR ' || v_cmdline);                           
   END;                                                                         
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_DROP_ALL"                           
(                                                                               
  v_whattype IN VARCHAR2 DEFAULT 'PROCEDURES,FUNCTIONS,VIEWS,SYNONYMS' ,        
  v_dropifempty IN VARCHAR2 DEFAULT 'Y'                                         
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_DROP_ALL                                                          
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
   v_procname VARCHAR2(50);                                                     
   v_objtype VARCHAR2(50);                                                      
   v_table_name VARCHAR2(50);                                                   
   v_view_name VARCHAR2(50);                                                    
   v_synonym_name VARCHAR2(50);                                                 
   v_constraint_name VARCHAR2(50);                                              
                                                                                
                                                                                
   cursor l_table is                                                            
     select table_name from user_tables;                                        
                                                                                
   cursor l_view is                                                             
     select view_name from user_views;                                          
                                                                                
   cursor l_procedure is                                                        
     select distinct object_name, object_type from user_procedures;             
                                                                                
   cursor l_synonym is                                                          
     select synonym_name from user_synonyms;                                    
                                                                                
   cursor l_constraint is                                                       
     select distinct table_name, constraint_name from user_constraints;         
                                                                                
BEGIN                                                                           
                                                                                
   --util_make_object_list(v_whattype, v_things);                               
                                                                                
   -- drop procedure(s) or function(s)                                          
   if upper(v_whattype) like 'PROCEDURE' or upper(v_whattype) like 'FUNCTION' th
en                                                                              
      open l_procedure;                                                         
      fetch l_procedure into v_procname, v_objtype;                             
      while l_procedure%FOUND                                                   
      loop                                                                      
         -- dbms_output.put_line( v_objtype || '  ' || v_procname);             
         execute immediate 'drop '|| v_objtype || ' ' || v_procname;            
                                                                                
         fetch l_procedure into v_procname, v_objtype;                          
      end loop;                                                                 
      close l_procedure;                                                        
   end if;                                                                      
                                                                                
                                                                                
   -- drop table(s)                                                             
   if upper(v_whattype) like 'TABLE' then                                       
      open l_table;                                                             
      fetch l_table into v_table_name;                                          
      while l_table%FOUND                                                       
      loop                                                                      
         -- dbms_output.put_line( v_table_name);                                
         execute immediate 'drop table '|| v_table_name || ' cascade constraints
 ';                                                                             
                                                                                
         fetch l_table into v_table_name;                                       
      end loop;                                                                 
      close l_table;                                                            
   end if;                                                                      
                                                                                
   -- drop synonyms(s)                                                          
   if upper(v_whattype) like 'SYNONYM' then                                     
      open l_synonym;                                                           
      fetch l_synonym into v_synonym_name;                                      
      while l_synonym%FOUND                                                     
      loop                                                                      
         -- dbms_output.put_line( v_synonym_name);                              
         execute immediate 'drop synonym ' || v_synonym_name ;                  
                                                                                
         fetch l_synonym into v_synonym_name;                                   
      end loop;                                                                 
      close l_synonym;                                                          
   end if;                                                                      
                                                                                
                                                                                
   -- drop view(s)                                                              
   if upper(v_whattype) like 'VIEW' then                                        
      open l_view;                                                              
      fetch l_view into v_view_name;                                            
      while l_view%FOUND                                                        
      loop                                                                      
         -- dbms_output.put_line( v_view_name);                                 
         execute immediate 'drop view '|| v_table_name ;                        
                                                                                
         fetch l_view into v_view_name;                                         
      end loop;                                                                 
      close l_view;                                                             
   end if;                                                                      
                                                                                
                                                                                
   -- drop constraint(s)                                                        
   if upper(v_whattype) like 'CONSTRAINT' then                                  
      open l_constraint;                                                        
      fetch l_constraint into v_table_name, v_constraint_name;                  
      while l_constraint%FOUND                                                  
      loop                                                                      
         -- dbms_output.put_line( v_constraint_name);                           
         execute immediate 'alter table '|| v_table_name || ' drop constraint '|
| v_constraint_name ;                                                           
                                                                                
         fetch l_constraint into v_table_name, v_constraint_name;               
      end loop;                                                                 
      close l_constraint;                                                       
   end if;                                                                      
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."UTIL_CREATE_SYNONYM_ALL"                 
(                                                                               
	V_FROMZONE IN VARCHAR2 DEFAULT NULL ,                                          
	V_WHATTYPE IN VARCHAR2 DEFAULT 'PROCEDURES,FUNCTIONS,TABLES,VIEWS'             
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: UTIL_CREATE_SYNONYM_ALL                                                
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
	--The name of the table, proc, function or view.                               
	V_OBJNAME VARCHAR2(50);                                                        
                                                                                
	--Dynamic SQL line                                                             
	V_CMDLINE VARCHAR2(200);                                                       
                                                                                
	--Table list                                                                   
	CURSOR L_TABLE IS                                                              
		SELECT TABLE_NAME FROM ALL_TABLES WHERE OWNER = UPPER(V_FROMZONE);            
	--View List                                                                    
	CURSOR L_VIEW IS                                                               
		SELECT VIEW_NAME FROM ALL_VIEWS WHERE OWNER = UPPER(V_FROMZONE);              
	--Procedure and function list (OBJTYPE are PROCEDURE, FUNCTION, TRIGGER)       
	CURSOR L_PROCEDURE (OBJTYPE VARCHAR2) IS                                       
		SELECT DISTINCT OBJECT_NAME FROM ALL_PROCEDURES                               
			WHERE OWNER = UPPER(V_FROMZONE) AND OBJECT_TYPE = OBJTYPE                    
      AND UPPER(OBJECT_NAME) NOT LIKE 'UTIL%';                                  
                                                                                
BEGIN                                                                           
                                                                                
	-- Create synonyms for Tables                                                  
	IF UPPER(V_WHATTYPE) LIKE '%TABLE%' THEN                                       
                                                                                
		OPEN L_TABLE;                                                                 
			FETCH L_TABLE INTO V_OBJNAME;                                                
		WHILE L_TABLE%FOUND                                                           
			LOOP                                                                         
			BEGIN                                                                        
                                                                                
				V_CMDLINE := 'create or replace synonym ' || V_OBJNAME || ' for ' || UPPER(V
_FROMZONE) || '.' || V_OBJNAME ;                                                
                                                                                
				EXECUTE IMMEDIATE V_CMDLINE;                                                
				--DBMS_OUTPUT.PUT_LINE('SUCCESS ' || V_CMDLINE);                            
	                                                                               
				FETCH L_TABLE  INTO V_OBJNAME;                                              
                                                                                
			EXCEPTION                                                                    
			WHEN OTHERS THEN                                                             
			BEGIN                                                                        
				DBMS_OUTPUT.PUT_LINE('ERROR ' || V_CMDLINE);                                
				DBMS_OUTPUT.PUT_LINE(SQLERRM);                                              
			END;                                                                         
		END;                                                                          
       END LOOP;                                                                
       CLOSE L_TABLE;                                                           
   end if;                                                                      
                                                                                
	--CREATE SYNONYMS FOR VIEWS                                                    
	IF UPPER(V_WHATTYPE) LIKE '%VIEW%' THEN                                        
                                                                                
		OPEN L_VIEW;                                                                  
			FETCH L_VIEW INTO V_OBJNAME;                                                 
		WHILE L_VIEW%FOUND                                                            
			LOOP                                                                         
			BEGIN                                                                        
                                                                                
				V_CMDLINE := 'create or replace synonym ' || V_OBJNAME || ' for ' || UPPER(V
_FROMZONE) || '.' || V_OBJNAME ;                                                
                                                                                
				EXECUTE IMMEDIATE V_CMDLINE;                                                
				--DBMS_OUTPUT.PUT_LINE('SUCCESS ' || V_CMDLINE);                            
                                                                                
				FETCH L_VIEW INTO V_OBJNAME;                                                
                                                                                
			EXCEPTION                                                                    
			WHEN OTHERS THEN                                                             
			BEGIN                                                                        
				DBMS_OUTPUT.PUT_LINE('ERROR ' || V_CMDLINE);                                
				DBMS_OUTPUT.PUT_LINE(SQLERRM);                                              
			END;                                                                         
		END;                                                                          
		END LOOP;                                                                     
		CLOSE L_VIEW;                                                                 
   END IF;                                                                      
                                                                                
-- CREATE SYNONYMS FOR PROCEDURES                                               
	IF UPPER(V_WHATTYPE) LIKE '%PROCEDURE%' THEN                                   
                                                                                
		OPEN L_PROCEDURE('PROCEDURE');                                                
			FETCH L_PROCEDURE INTO V_OBJNAME;                                            
		WHILE L_PROCEDURE%FOUND                                                       
			LOOP                                                                         
			BEGIN                                                                        
                                                                                
				V_CMDLINE := 'create or replace synonym ' || V_OBJNAME || ' for ' || UPPER(V
_FROMZONE) || '.' || V_OBJNAME ;                                                
                                                                                
				EXECUTE IMMEDIATE V_CMDLINE;                                                
				--DBMS_OUTPUT.PUT_LINE('SUCCESS ' || V_CMDLINE);                            
                                                                                
				FETCH l_procedure INTO V_OBJNAME;                                           
                                                                                
			EXCEPTION                                                                    
			WHEN OTHERS THEN                                                             
			BEGIN                                                                        
				DBMS_OUTPUT.PUT_LINE('ERROR ' || V_CMDLINE);                                
				DBMS_OUTPUT.PUT_LINE(SQLERRM);                                              
			END;                                                                         
		END;                                                                          
		END LOOP;                                                                     
		CLOSE l_procedure;                                                            
   end if;                                                                      
                                                                                
-- CREATE SYNONYMS FOR FUNCTIONS                                                
	IF UPPER(V_WHATTYPE) LIKE '%FUNCTION%' THEN                                    
		                                                                              
		OPEN l_procedure('FUNCTION');                                                 
			FETCH l_procedure INTO V_OBJNAME;                                            
		WHILE l_procedure%FOUND                                                       
			LOOP                                                                         
			BEGIN                                                                        
                                                                                
				V_CMDLINE := 'create synonym ' || V_OBJNAME || ' for ' || UPPER(V_FROMZONE) 
|| '.' || V_OBJNAME ;                                                           
                                                                                
				EXECUTE IMMEDIATE V_CMDLINE;                                                
				--DBMS_OUTPUT.PUT_LINE('SUCCESS ' || V_CMDLINE);                            
                                                                                
				FETCH L_PROCEDURE INTO V_OBJNAME;                                           
		                                                                              
			EXCEPTION                                                                    
			WHEN OTHERS THEN                                                             
			BEGIN                                                                        
				DBMS_OUTPUT.PUT_LINE('ERROR ' || V_CMDLINE);                                
				DBMS_OUTPUT.PUT_LINE(SQLERRM);                                              
			END;                                                                         
		END;                                                                          
		END LOOP;                                                                     
		CLOSE L_PROCEDURE;                                                            
   END IF;                                                                      
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."SET_BIO_DATA_UID_PATH"                   
as                                                                              
 -- jobRunID CONTROL.SYSTEM_JOB_RUN.JOB_RUN_ID%TYPE;                            
 -- jobStepID CONTROL.SYSTEM_JOB_STEP.JOB_STEP_ID%TYPE;                         
--CREATE SYNONYM genego for pictor.genego;                                      
BEGIN                                                                           
                                                                                
------------------------------------------------------------------------------- 
-- Loads data from PICTOR into biomart_LZ                                       
--  emt@20090310                                                                
--------------------------------------------------------------------------------
                                                                                
  --jobrunid := control.insert_system_job_run('LoadGeneGOPathways', 'Load All Pa
thways from GENEGO in PICTOR');                                                 
                                                                                
                                                                                
                                                                                
  --jobStepID := control.insert_system_job_step(jobRunID, 'Insert disease pathwa
ys into bio_marker for GENEGO disease pathways'                                 
  --, 'Insert disease pathways into bio_marker for GENEGO disease pathways', 22)
;                                                                               
  execute immediate 'delete from bio_data_uid where unique_id in                
                    (select biomarker_pathway_uid(primary_source_code, primary_e
xternal_id)                                                                     
                    from bio_marker)';                                          
  execute immediate 'delete from bio_data_uid where unique_id in                
                    (select biomarker_gene_uid(primary_external_id)             
                    from bio_marker)';                                          
  execute immediate 'insert into bio_data_uid(                                  
                    bio_data_id, unique_id, bio_data_type)                      
                    select                                                      
                    bio_marker_id                                               
                    , biomarker_pathway_uid(primary_source_code, primary_externa
l_id)                                                                           
                    , ''BIO_MARKER.PATHWAY''                                    
                    from bio_marker                                             
                    where bio_marker_type=''PATHWAY''                           
                    and not exists                                              
                      (select 1 from bio_data_uid                               
                      where biomarker_pathway_uid(bio_marker.primary_source_code
, bio_marker.primary_external_id) =                                             
                      bio_data_uid.unique_id)';                                 
  execute immediate 'insert into bio_data_uid(                                  
                    bio_data_id, unique_id, bio_data_type)                      
                    select                                                      
                    bio_marker_id                                               
                    , biomarker_gene_uid(primary_external_id)                   
                    , ''BIO_MARKER.GENE''                                       
                    from bio_marker                                             
                    where bio_marker_type=''GENE''                              
                    and not exists                                              
                      (select 1 from bio_data_uid                               
                      where biomarker_gene_uid(bio_marker.primary_external_id) =
 bio_data_uid.unique_id)';                                                      
                                                                                
                                                                                
  --control.update_system_job_step_pass(jobStepID, SQL%ROWCOUNT);               
  commit;                                                                       
                                                                                
                                                                                
--control.update_system_job_run_pass(jobRunID);                                 
--exception                                                                     
--when others then                                                              
  --control.update_system_job_step_fail(jobStepID, sqlcode, sqlerrm()           
  --, dbms_utility.format_error_stack, dbms_utility.format_error_backtrace);    
  --control.update_system_job_run_fail(jobRunID);                               
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."SET_BIO_DATA_UID_DIS"                    
as                                                                              
  --jobRunID CONTROL.SYSTEM_JOB_RUN.JOB_RUN_ID%TYPE;                            
  --jobStepID CONTROL.SYSTEM_JOB_STEP.JOB_STEP_ID%TYPE;                         
--CREATE SYNONYM genego for pictor.genego;                                      
BEGIN                                                                           
                                                                                
------------------------------------------------------------------------------- 
-- Loads data from PICTOR into biomart_LZ                                       
--  emt@20090310                                                                
--------------------------------------------------------------------------------
                                                                                
--  jobrunid := control.insert_system_job_run('LoadGeneGOPathways', 'Load All Pa
thways from GENEGO in PICTOR');                                                 
                                                                                
begin                                                                           
                                                                                
  --jobStepID := control.insert_system_job_step(jobRunID, 'Insert disease pathwa
ys into bio_marker for GENEGO disease pathways'                                 
  --, 'Insert disease pathways into bio_marker for GENEGO disease pathways', 22)
;                                                                               
  execute immediate 'delete from bio_data_uid where unique_id in                
                    (select bio_disease_uid(mesh_code) from bio_disease)';      
  execute immediate 'insert into bio_data_uid(                                  
                    bio_data_id, unique_id, bio_data_type)                      
                    select                                                      
                    bio_disease_id, bio_disease_uid(mesh_code), ''BIO_DISEASE'' 
                    from bio_disease                                            
                    where not exists                                            
                      (select 1 from bio_data_uid                               
                      where bio_disease_uid(bio_disease.mesh_code) = bio_data_ui
d.unique_id)';                                                                  
                                                                                
  --control.update_system_job_step_pass(jobStepID, SQL%ROWCOUNT);               
  commit;                                                                       
                                                                                
end;                                                                            
/*                                                                              
control.update_system_job_run_pass(jobRunID);                                   
exception                                                                       
when others then                                                                
  control.update_system_job_step_fail(jobStepID, sqlcode, sqlerrm()             
  , dbms_utility.format_error_stack, dbms_utility.format_error_backtrace);      
  control.update_system_job_run_fail(jobRunID);                                 
  */                                                                            
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."PARSE_DESIGN_FIELD"                      
as                                                                              
                                                                                
  bcc_exp number;                                                               
                                                                                
  design_fields varchar_table;                                                  
                                                                                
  cursor c_design                                                               
  is                                                                            
  select bio_experiment_id, design from bio_experiment                          
  where bio_experiment_type='Experiment'                                        
  and design is not null;                                                       
                                                                                
begin                                                                           
                                                                                
  begin                                                                         
    delete from bio_data_attribute                                              
      where bio_data_id in                                                      
        (select bio_experiment_id                                               
        from bio_experiment                                                     
        where bio_experiment.bio_experiment_type='Experiment'                   
        and design is not null);                                                
   end;                                                                         
                                                                                
  begin                                                                         
    insert into bio_concept_code(                                               
      bio_concept_code                                                          
    , code_description                                                          
    , code_type_name                                                            
    )                                                                           
    select                                                                      
      'Experiment Design'                                                       
    , 'Experiment Design'                                                       
    , 'Design'                                                                  
    from dual                                                                   
    where not exists                                                            
      (select 1 from bio_concept_code                                           
      where bio_concept_code='Experiment Design');                              
  commit;                                                                       
  end;                                                                          
                                                                                
  begin                                                                         
                                                                                
    select bio_concept_code_id                                                  
    into bcc_exp                                                                
    from bio_concept_code                                                       
    where bio_concept_code = 'Experiment Design';                               
                                                                                
    design_fields := control.varchar_table();                                   
                                                                                
    for r_design in c_design loop                                               
      design_fields := control.text_parser(r_design.design, ',');               
      for i in design_fields.first..design_fields.last loop                     
        insert into bio_data_attribute(                                         
          bio_data_id                                                           
        , property_code                                                         
        , property_value                                                        
        )                                                                       
        select                                                                  
          r_design.bio_experiment_id                                            
        , bcc_exp                                                               
        , ltrim(upper(replace(design_fields(i), '_', ' ')))                     
        from dual                                                               
        where r_design.bio_experiment_id not in (                               
          select bio_data_id from bio_data_attribute                            
          where property_code=bcc_exp                                           
          and property_value=ltrim(upper(replace(design_fields(i), '_', ' '))));
                                                                                
                                                                                
      end loop;                                                                 
                                                                                
    end loop;                                                                   
                                                                                
  commit;                                                                       
  end;                                                                          
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."LOAD_KEGG_CONTENT_DATA"                  
as                                                                              
begin                                                                           
                                                                                
begin                                                                           
                                                                                
  delete from bio_content_reference                                             
    where bio_content_id in                                                     
      (select bio_file_content_id                                               
      from bio_content                                                          
      where repository_id in                                                    
        (select bio_content_repo_id                                             
        from bio_content_repository                                             
        where upper(repository_type)='KEGG')                                    
      );                                                                        
  --806                                                                         
  delete from bio_content                                                       
    where repository_id =                                                       
      (select bio_content_repo_id                                               
      from bio_content_repository                                               
      where upper(repository_type)='KEGG');                                     
  --806                                                                         
  delete from bio_content_repository                                            
    where upper(repository_type)='KEGG';                                        
  --1                                                                           
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
-- populate bio_content_repository                                              
  insert into bio_content_repository(                                           
    location                                                                    
  , active_y_n                                                                  
  , repository_type                                                             
  , location_type                                                               
  )                                                                             
  values (                                                                      
    'http://www.genome.jp/'                                                     
  , 'Y'                                                                         
  , 'Kegg'                                                                      
  , 'URL'                                                                       
  );                                                                            
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
                                                                                
  insert into bio_content(                                                      
  --  file_name                                                                 
    repository_id                                                               
  , location                                                                    
  --, title  , abstract                                                         
  , file_type                                                                   
  --, etl_id                                                                    
  )                                                                             
  select distinct                                                               
    bcr.bio_content_repo_id                                                     
  , bcr.location||'dbget-bin/show_pathway?'|| bm.primary_external_id            
  , 'Data'                                                                      
  from                                                                          
    bio_content_repository bcr                                                  
  , bio_marker bm                                                               
  where upper(bcr.repository_type)='KEGG'                                       
  and upper(bm.primary_source_code)='KEGG';                                     
  --806 rows inserted                                                           
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
                                                                                
  insert into bio_content_reference(                                            
    bio_content_id                                                              
  , bio_data_id                                                                 
  , content_reference_type                                                      
  )                                                                             
  select distinct                                                               
    bc.bio_file_content_id                                                      
  , path.bio_marker_id                                                          
  , bcr.location_type                                                           
  from                                                                          
    bio_content bc                                                              
  , bio_marker path                                                             
  , bio_content_repository bcr                                                  
  where bc.repository_id = bcr.bio_content_repo_id                              
  and path.primary_external_id=substr(bc.location, length(bc.location)-7)       
  and path.primary_source_code='KEGG';                                          
  --806                                                                         
commit;                                                                         
end;                                                                            
                                                                                
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."LOAD_KEGG_COMP_PATH_DATA"                
as                                                                              
  --jobRunID CONTROL.SYSTEM_JOB_RUN.JOB_RUN_ID%TYPE;                            
  --jobStepID CONTROL.SYSTEM_JOB_STEP.JOB_STEP_ID%TYPE;                         
--CREATE SYNONYM kegg_compound_name FOR PICTOR.kegg_compound_name;              
--CREATE SYNONYM kegg_compound_xref FOR PICTOR.kegg_compound_xref;              
                                                                                
BEGIN                                                                           
--------------------------------------------------------------------------------
                                                                                
-- Loads data from PICTOR into biomart_LZ                                       
--  emt@20090324                                                                
--------------------------------------------------------------------------------
                                                                                
  --jobrunid := control.insert_system_job_run('LoadPictorPathways', 'Load All Pa
thways from Pictor -- KEGG');                                                   
                                                                                
  begin                                                                         
  --delete residual kegg records from the target tables                         
  -- NOTE: this delete statement deletes both pathways and genes                
    delete from bio_marker                                                      
      where primary_source_code='KEGG';                                         
                                                                                
    commit;                                                                     
  end;                                                                          
                                                                                
  begin                                                                         
                                                                                
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert compound pat
hways into bio_marker for KEGG compound pathways'                               
  --, 'Insert compound pathways into bio_marker for KEGG compound pathways', 22)
;                                                                               
                                                                                
    insert into bio_marker(                                                     
      bio_marker_name                                                           
    , bio_marker_description                                                    
    , organism                                                                  
    , primary_source_code                                                       
    , primary_external_id                                                       
    , bio_marker_type)                                                          
    select distinct                                                             
      kd.description                                                            
    , kd.description                                                            
    , upper(tax.taxonomy_name)                                                  
    , 'KEGG'                                                                    
    , kd.map_id                                                                 
    , 'PATHWAY'                                                                 
    from                                                                        
      pictor.kmap_desc kd                                                       
    , pictor.taxonomy tax                                                       
    where kd.taxonomy_id = tax.taxonomy_id;                                     
    --806                                                                       
  --control.update_system_job_step_pass(jobStepID, SQL%ROWCOUNT);               
                                                                                
  commit;                                                                       
  end;                                                                          
                                                                                
    begin                                                                       
                                                                                
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert pathway gene
s  into bio_marker for KEGG compound pathways'                                  
  --, 'Insert pathway genes into bio_marker for KEGG compound pathways', 22);   
 -- insert genes from kmap_gene that are not already in bio_marker              
                                                                                
    insert into bio_marker(                                                     
      bio_marker_name                                                           
    , bio_marker_description                                                    
    , organism                                                                  
    --, primary_source_code                                                     
    , primary_external_id                                                       
    , bio_marker_type)                                                          
    select distinct                                                             
      agi.gene_symbol                                                           
    , agi.description                                                           
    , upper(tn.name)                                                            
    , agi.gene_id                                                               
    , 'GENE'                                                                    
    from                                                                        
      pictor.kmap_gene kg                                                       
    , pictor.kmap_desc kd                                                       
    , reference.ext_all_gene_info agi                                           
    , reference.taxonomy_names tn                                               
    , pictor.taxonomy tax                                                       
    where kg.map_id = kd.map_id                                                 
    and kd.taxonomy_id = tax.taxonomy_id                                        
    and kg.gene_id = agi.gene_id                                                
    and agi.tax_id = tn.tax_id                                                  
    and tn.tax_id = tax.taxonomy_id                                             
    and to_char(kg.gene_id) not in                                              
      (select primary_external_id from bio_marker                               
      WHERE bio_marker.bio_marker_type='GENE');                                 
      --14,413 new - this should be 0 subsequently                              
  --control.update_system_job_step_pass(jobStepID, SQL%ROWCOUNT);               
                                                                                
  commit;                                                                       
  end;                                                                          
                                                                                
  begin                                                                         
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert disease path
ways into bio_marker for KEGG compound pathways'                                
  --, 'Insert disease pathways into bio_marker for KEGG compound pathways', 22);
                                                                                
                                                                                
    insert into bio_data_correlation(                                           
      bio_data_id                                                               
    , asso_bio_data_id                                                          
    , bio_data_correl_descr_id                                                  
    )                                                                           
    select distinct                                                             
      path.bio_marker_id                                                        
    , gene.bio_marker_id                                                        
    , bdcd.bio_data_correl_descr_id                                             
    from                                                                        
      bio_marker path                                                           
    , bio_marker gene                                                           
    , pictor.kmap_gene kg                                                       
    , bio_data_correl_descr bdcd                                                
    where path.bio_marker_type = 'PATHWAY'                                      
    and gene.bio_marker_type = 'GENE'                                           
    and path.primary_external_id = to_char(kg.map_id)                           
    and gene.primary_external_id = to_char(kg.gene_id)                          
    and bdcd.correlation='PATHWAY GENE';                                        
    -- 42,826                                                                   
-- 43,075 distinct map, gene, tax                                               
-- 305 genes that are not in ext_gene_id                                        
-- 4,794 genes are human                                                        
-- 1 that is not human: rat, geneid 5212, pancreatic cancer                     
-- 14,529 not in bio_marker and not human                                       
                                                                                
    --control.update_system_job_step_pass(jobStepID, SQL%ROWCOUNT);             
  commit;                                                                       
  end;                                                                          
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."LOAD_JUB_TARGET_SUM_FROM_DB"             
AS                                                                              
  --initiate variables for Job run and step ID's                                
  --jobRunID CONTROL.SYSTEM_JOB_RUN.JOB_RUN_ID%TYPE;                            
  --jobStepID CONTROL.SYSTEM_JOB_STEP.JOB_STEP_ID%TYPE;                         
                                                                                
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
  -- Loads Jubilant Summary Data from the Jubilant DB received on 3/2009        
  -- KCR@20090324 - First rev.                                                  
  ------------------------------------------------------------------------------
-                                                                               
  --Start ETL Control: Create a Job Run                                         
  --jobRunID := control.insert_system_job_run('LoadCCJubilantTargetSummaryData',
'Load Jubilant Target Summary data from CentClinRD');                           
                                                                                
  BEGIN                                                                         
                                                                                
    --Delete                                                                    
--    DELETE                                                                    
--      FROM BIO_CURATED_DATA                                                   
--      WHERE BIO_CURATION_DATASET_ID IN                                        
--        (SELECT BIO_CURATION_DATASET_ID                                       
--          FROM BIO_CURATION_DATASET                                           
--            BIO_CURATION_NAME = 'Jubilant DB from March 2009');               
                                                                                
    DELETE                                                                      
      FROM BIO_DATA_UID                                                         
      WHERE BIO_DATA_TYPE = 'BIO_JUB_ONC_SUM_DATA'                              
        AND UNIQUE_ID LIKE '5-%';                                               
                                                                                
                                                                                
    DELETE                                                                      
      FROM BIO_JUB_ONC_SUM_DATA                                                 
      WHERE UNIQUE_ID LIKE '5-%';                                               
                                                                                
    COMMIT;                                                                     
  END;                                                                          
                                                                                
  BEGIN                                                                         
  	--Insert Job Run Info                                                        
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert to BIO_JUB_O
NCOL_DATA', 'Inserting Jubilant Target Summary Data from CentClinRD', 915);     
                                                                                
    --Loading Target table                                                      
    INSERT INTO                                                                 
      BIO_JUB_ONC_SUM_DATA                                                      
        (DATATYPE,                                                              
        ALTERATION_TYPE,                                                        
        TOTAL_FREQUENCY,                                                        
        TOTAL_AFFECTED_CASES,                                                   
        TARGET_NAME,                                                            
        VARRIANT_NAME,                                                          
        DISEASE_SITE_NAME,                                                      
        TOTAL_NUMERATOR,                                                        
        TOTAL_DENOMINATOR,                                                      
        UNIQUE_ID)                                                              
    SELECT                                                                      
      DATA_TYPE,                                                                
      ALTERATION_TYPE,                                                          
      TOTAL_FREQUENCY,                                                          
      TOTAL_AFFECTED_CASES,                                                     
      TARGET_NAME,                                                              
      VARRIANT_NAME,                                                            
      DISEASE_SITE_NAME,                                                        
      TOTAL_NUMERATOR,                                                          
      TOTAL_DENOMINATOR,                                                        
      '5-' || rownum                                                            
    FROM jbl_jwb.TEMP_DISEASE_SUMMARY;                                          
                                                                                
    --control.UPDATE_SYSTEM_JOB_STEP_PASS(jobStepID, SQL%ROWCOUNT);             
    COMMIT;                                                                     
                                                                                
  END;                                                                          
                                                                                
  BEGIN                                                                         
  	--Insert Job Run Info                                                        
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert to BIO_DATA_
UID', 'Inserting UID data for Jubilant Target Summary Data', 915);              
                                                                                
    --INSERT THE UID FOR THIS TYPE.                                             
    INSERT INTO                                                                 
      BIO_DATA_UID                                                              
        (BIO_DATA_ID,                                                           
        UNIQUE_ID,                                                              
        BIO_DATA_TYPE)                                                          
    SELECT                                                                      
      BIO_DATA_ID,                                                              
      unique_id,                                                                
      'BIO_JUB_ONC_SUM_DATA'                                                    
    FROM BIO_JUB_ONC_SUM_DATA                                                   
    WHERE                                                                       
      UNIQUE_ID LIKE '5-%';                                                     
                                                                                
    --control.UPDATE_SYSTEM_JOB_STEP_PASS(jobStepID, SQL%ROWCOUNT);             
    COMMIT;                                                                     
                                                                                
  END;                                                                          
                                                                                
  BEGIN                                                                         
  	--Insert Job Run Info                                                        
    --jobStepID := control.insert_system_job_step(jobRunID, 'Insert to BIO_CURAT
ED_DATA', 'Inserting Jubilant Target Summary Data to the Curated Data table.', 9
15);                                                                            
                                                                                
    --BIO_CURATED DATA                                                          
    INSERT INTO                                                                 
      BIO_CURATED_DATA                                                          
        (BIO_DATA_ID,                                                           
        BIO_CURATION_DATASET_ID,                                                
        DATA_TYPE)                                                              
      SELECT                                                                    
        a.bio_data_id,                                                          
        b.BIO_CURATION_DATASET_ID,                                              
        'JUBILANT_ONCOLOGY_SUMMARY'                                             
      FROM BIO_JUB_ONC_SUM_DATA a,                                              
        BIO_CURATION_DATASET b                                                  
      where                                                                     
        BIO_CURATION_NAME = 'Jubilant DB from March 2009'                       
        AND a.UNIQUE_ID LIKE '5-%';                                             
                                                                                
    --control.UPDATE_SYSTEM_JOB_STEP_PASS(jobStepID, SQL%ROWCOUT);              
    COMMIT;                                                                     
                                                                                
  END;                                                                          
                                                                                
  --END ETL CONTROL: Update Job Run with TIME/STATUS                            
--  control.UPDATE_SYSTEM_JOB_RUN_PASS(jobRunID);                               
--  EXCEPTION                                                                   
--  WHEN OTHERS THEN                                                            
--    control.UPDATE_SYSTEM_JOB_STEP_FAIL(jobStepID, SQLCODE, SQLERRM(), DBMS_UT
ILITY.FORMAT_ERROR_STACK, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);                 
--    control.UPDATE_SYSTEM_JOB_RUN_FAIL(jobRunID);                             
    --RAISE;                                                                    
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."LOAD_DISEASE_UID"                        
AS                                                                              
  --initiate variables for Job run and step ID's                                
  jobRunID CONTROL.AZ_JOB_RUN.JOB_RUN_ID%TYPE;                                  
  jobStepID CONTROL.CZ_JOB_STEP.JOB_STEP_ID%TYPE;                               
BEGIN                                                                           
  ------------------------------------------------------------------------------
-                                                                               
  -- Loads Disease UID Data                                                     
  -- KCR@20090331 - First rev                                                   
  ------------------------------------------------------------------------------
-                                                                               
  --Start ETL Control: Create a Job Run                                         
  jobRunID := control.insert_etl_job_run('DIS:UID', 0, 'KRUSSELL', 'Loads UID da
ta for Concept Disease', 'ADHOC', 'DISEASE');                                   
                                                                                
  BEGIN                                                                         
    --Delete existing data                                                      
		DELETE                                                                        
			FROM BIO_DATA_UID                                                            
			WHERE BIO_DATA_TYPE = 'BIO_DISEASE';                                         
                                                                                
    COMMIT;                                                                     
                                                                                
  END;                                                                          
                                                                                
  BEGIN --LOAD BIO_DATA_ANALYSIS TABLE                                          
    --Insert Job Run Info                                                       
    jobStepID := control.insert_etl_job_step(jobRunID, 'LoadDiseaseUID', 'Loadin
g Disease UID Data', 'BIO_DATA_UID', 'INSERT', 0);                              
                                                                                
                                                                                
    -- Add UIDs for diseases                                                    
    insert into bio_data_uid (                                                  
      bio_data_id,                                                              
      unique_id,                                                                
      bio_data_type                                                             
    )                                                                           
    select                                                                      
      bio_disease_id,                                                           
      bio_disease_uid(MESH_CODE),                                               
      'BIO_DISEASE'                                                             
    from                                                                        
      bio_disease;                                                              
    --END step: Update Step Run with TIME/STATUS                                
    control.UPDATE_ETL_JOB_STEP_PASS(jobStepID, 'BIO_DATA_UID',SQL%ROWCOUNT);   
    COMMIT;                                                                     
  END; --LOAD BIO_DATA_ANALYSIS TABLE                                           
                                                                                
  --END ETL CONTROL: Update Job Run with TIME/STATUS                            
  control.UPDATE_ETL_JOB_RUN_PASS(jobRunID);                                    
EXCEPTION                                                                       
  WHEN OTHERS THEN                                                              
    control.UPDATE_ETL_JOB_STEP_FAIL(jobStepID, SQLCODE, SQLERRM(), DBMS_UTILITY
.FORMAT_ERROR_STACK, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);                      
    control.UPDATE_ETL_JOB_RUN_FAIL(jobRunID);                                  
    --RAISE;                                                                    
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."LOAD_CENTCLIN_CONTENT_DATA"              
as                                                                              
begin                                                                           
                                                                                
begin                                                                           
                                                                                
  delete from biomart_wz.bio_content_reference                                  
    ;                                                                           
                                                                                
  delete from biomart_wz.bio_content                                            
    where repository_id =                                                       
      (select bio_content_repo_id                                               
      from biomart_wz.bio_content_repository                                    
      where location = '\\JJHOST2\share\data\ClinicalTrials');                  
                                                                                
  delete from biomart_wz.bio_content_repository                                 
    where lower(location) = '\\jjhost2\share\data\clinicaltrials';              
                                                                                
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
-- populate bio_content_repository                                              
                                                                                
  insert into biomart_wz.bio_content_repository(                                
    location                                                                    
  , active_y_n                                                                  
  , repository_type                                                             
  , location_type                                                               
  )                                                                             
  values (                                                                      
    '\\JJHOST2\share\data\ClinicalTrials'                                       
  , 'Y'                                                                         
  , 'Clinical Trials'                                                           
  , 'Data'                                                                      
  );                                                                            
                                                                                
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
                                                                                
  insert into biomart_wz.bio_content(                                           
    file_name                                                                   
  , repository_id                                                               
  , location                                                                    
  --, title  , abstract                                                         
  , file_type                                                                   
  --, etl_id                                                                    
  )                                                                             
  select distinct                                                               
    ec.file_name                                                                
  , bcr.bio_content_repo_id                                                     
  , ec.file_path                                                                
  , 'Data'                                                                      
  from                                                                          
    centclinrd.externalcontent ec                                               
  , biomart_wz.bio_content_repository bcr                                       
  where bcr.location='\\JJHOST2\share\data\ClinicalTrials';                     
                                                                                
commit;                                                                         
end;                                                                            
                                                                                
begin                                                                           
                                                                                
  insert into biomart_wz.bio_content_reference(                                 
    bio_content_id                                                              
  , bio_data_id                                                                 
  , content_reference_type                                                      
  )                                                                             
  select distinct                                                               
    bc.bio_file_content_id                                                      
  , baa.bio_assay_analysis_id                                                   
  , bcr.location_type                                                           
  from                                                                          
    biomart_wz.bio_content bc                                                   
  , biomart_wz.bio_assay_analysis baa                                           
  , biomart_wz.bio_content_repository bcr                                       
  , centclinrd.geneexpressionanalysiscontent geac                               
  , centclinrd.externalcontent ec                                               
  where bc.repository_id = bcr.bio_content_repo_id                              
  and baa.etl_id = 'GEAC.'||to_char(geac.id)                                    
  and geac.id = ec.id                                                           
  and ec.file_name = bc.file_name;                                              
                                                                                
  --143 with GEAC in bio_assay_analysis                                         
                                                                                
                                                                                
commit;                                                                         
end;                                                                            
                                                                                
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_UNHIDE_NODE"                        
(                                                                               
  path VARCHAR2                                                                 
)                                                                               
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- hIDES a tree node in I2b2                                                  
  -- KCR@20090519 - First Rev                                                   
  -- JEA@20120404	Only update second character of c_visualattributes            
  -------------------------------------------------------------                 
  if path != ''  or path != '%'                                                 
  then                                                                          
                                                                                
	update i2b2 b                                                                  
	set c_visualattributes=substr(b.c_visualattributes,1,1) || 'A' || substr(b.c_vi
sualattributes,3,1)                                                             
	where c_fullname like path || '%';                                             
	commit;                                                                        
	                                                                               
	i2b2_create_concept_counts(path);                                              
	                                                                               
	                                                                               
/*                                                                              
      --I2B2                                                                    
     UPDATE i2b2                                                                
      SET c_visualattributes = 'FH'                                             
    WHERE c_visualattributes like 'F%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
                                                                                
     UPDATE i2b2                                                                
      SET c_visualattributes = 'LH'                                             
    WHERE c_visualattributes like 'L%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
    COMMIT;                                                                     
*/                                                                              
  END IF;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_TRUNCATE_RELEASE_TABLES"            
                                                                                
AS                                                                              
	--	Procedure to run one test in CZ_TEST                                        
	                                                                               
	--	JEA@20111019	New                                                            
                                                                                
	--	Define the abstract result set record                                       
	                                                                               
	TYPE r_type IS RECORD (                                                        
		rtn_text          VARCHAR2 (2000)                                             
	);                                                                             
	                                                                               
	--	Define the abstract result set table                                        
	TYPE tr_type IS TABLE OF r_type;                                               
                                                                                
	--	Define the result set                                                       
	                                                                               
	rtn_array tr_type;                                                             
                                                                                
	--	Variables                                                                   
                                                                                
	tText 			varchar2(2000);                                                       
	                                                                               
    --Audit variables                                                           
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
	                                                                               
	BEGIN	                                                                         
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := -1;                                                                   
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 0;	                                                                  
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_truncate_release
_tablese',0,stepCt,'Done');                                                     
	stepCt := stepCt + 1;                                                          
	                                                                               
	tText := 'Select table_name from all_tables where owner = ' || '''' || 'TM_CZ' 
|| '''' || 'and table_name like ' || '''' || '%_RELEASE' || '''';               
                                                                                
	execute immediate(tText) BULK COLLECT INTO rtn_array;                          
                                                                                
	for i in rtn_array.first .. rtn_array.last                                     
	loop                                                                           
		dbms_output.put_line(rtn_array(i).rtn_text);                                  
			                                                                             
		if (rtn_array(i).rtn_text is not null) then                                   
			tText := 'truncate table ' || rtn_array(i).rtn_text;                         
			                                                                             
			execute immediate(tText);                                                    
			tText := 'Truncated ' || rtn_array(i).rtn_text;                              
			                                                                             
			cz_write_audit(jobId,databaseName,procedureName,tText,0,stepCt,'Done');      
		                                                                              
		end if;                                                                       
			                                                                             
	end loop;                                                                      
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_truncate_release_tabl
ese',0,stepCt,'Done');                                                          
	stepCt := stepCt + 1;                                                          
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_TABLE_DEFRAG"                       
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- Moves the I2B2 tables to reduce defragmentation                            
  -- KCR@20090527 - First Rev                                                   
  -- JEA@20090923 - Removed I2B2DEMODATA.IDX_OB_FACT_3, Oracle doesn't need to i
ndex every column like SQL Server (per Aaron A.)                                
  -------------------------------------------------------------                 
  EXECUTE IMMEDIATE 'ALTER TABLE I2B2METADATA.I2B2 MOVE';                       
  EXECUTE IMMEDIATE 'ALTER TABLE I2B2DEMODATA.CONCEPT_COUNTS MOVE';             
  EXECUTE IMMEDIATE 'ALTER TABLE I2B2DEMODATA.CONCEPT_DIMENSION MOVE';          
  EXECUTE IMMEDIATE 'ALTER TABLE I2B2DEMODATA.OBSERVATION_FACT MOVE';           
  EXECUTE IMMEDIATE 'ALTER TABLE I2B2DEMODATA.PATIENT_DIMENSION MOVE';          
  --Rebuild Indexes                                                             
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.OB_FACT_PK REBUILD';              
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.IDX_OB_FACT_1 REBUILD';           
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.IDX_OB_FACT_2 REBUILD';           
                                                                                
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.IDX_CONCEPT_DIM_1 REBUILD';       
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.IDX_CONCEPT_DIM_2 REBUILD';       
                                                                                
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2METADATA.IDX_I2B2_A REBUILD';              
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2METADATA.IDX_I2B2_B REBUILD';              
                                                                                
  EXECUTE IMMEDIATE 'ALTER INDEX I2B2DEMODATA.CONCEPT_COUNTS_INDEX1 REBUILD';   
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_TABLE_BKP"                          
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- Backup the I2B2 tables.                                                    
  -- KCR@20090518 - First Rev                                                   
  -------------------------------------------------------------                 
  --Drop existing backups                                                       
                                                                                
  execute immediate('drop table i2b2metadata.i2b2_bkp');                        
  execute immediate('drop table i2b2demodata.concept_counts_bkp');              
  execute immediate('drop table i2b2demodata.concept_dimension_bkp');           
  execute immediate('drop table i2b2demodata.observation_fact_bkp');            
  execute immediate('drop table i2b2demodata.patient_dimension_bkp');           
                                                                                
  --Backup tables                                                               
  EXECUTE IMMEDIATE 'CREATE TABLE I2B2METADATA.I2B2_BKP AS SELECT * FROM I2B2MET
ADATA.I2B2';                                                                    
  EXECUTE IMMEDIATE 'CREATE TABLE I2B2DEMODATA.CONCEPT_COUNTS_BKP AS SELECT * FR
OM I2B2DEMODATA.CONCEPT_COUNTS';                                                
  EXECUTE IMMEDIATE 'CREATE TABLE I2B2DEMODATA.CONCEPT_DIMENSION_BKP AS SELECT *
 FROM I2B2DEMODATA.CONCEPT_DIMENSION';                                          
  EXECUTE IMMEDIATE 'CREATE TABLE I2B2DEMODATA.OBSERVATION_FACT_BKP AS SELECT * 
FROM I2B2DEMODATA.OBSERVATION_FACT';                                            
  EXECUTE IMMEDIATE 'CREATE TABLE I2B2DEMODATA.PATIENT_DIMENSION_BKP AS SELECT *
 FROM I2B2DEMODATA.PATIENT_DIMENSION';                                          
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_SHOW_NODE"                          
(                                                                               
  path VARCHAR2                                                                 
)                                                                               
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- Shows a tree node in I2b2                                                  
  -- KCR@20090519 - First Rev                                                   
  -------------------------------------------------------------                 
  if path != ''  or path != '%'                                                 
  then                                                                          
                                                                                
      --I2B2                                                                    
    UPDATE i2b2                                                                 
      SET c_visualattributes = 'FA'                                             
    WHERE c_visualattributes LIKE 'F%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
                                                                                
     UPDATE i2b2                                                                
      SET c_visualattributes = 'LA'                                             
    WHERE c_visualattributes LIKE 'L%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
    COMMIT;                                                                     
  END IF;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_SECURE_STUDY"                       
(trial_id	varchar                                                               
,currentJobID NUMBER := null                                                    
)                                                                               
AS                                                                              
/*************************************************************************      
* Copyright 2008-2012 Janssen Research and Development, LLC.                    
*                                                                               
* Licensed under the Apache License, Version 2.0 (the "License");               
* you may not use this file except in compliance with the License.              
* You may obtain a copy of the License at                                       
*                                                                               
* http://www.apache.org/licenses/LICENSE-2.0                                    
*                                                                               
* Unless required by applicable law or agreed to in writing, software           
* distributed under the License is distributed on an "AS IS" BASIS,             
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
* See the License for the specific language governing permissions and           
* limitations under the License.                                                
******************************************************************/             
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
	                                                                               
	v_bio_experiment_id	number(18,0);                                              
	pExists				int;                                                                
	TrialId				varchar2(100);                                                      
                                                                                
BEGIN                                                                           
                                                                                
	TrialId := trial_id;                                                           
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start ' || procedureName,0,ste
pCt,'Done');                                                                    
	                                                                               
	--	create security records in observation_fact                                 
	                                                                               
	i2b2_create_security_for_trial(TrialId, 'Y', jobID);                           
	                                                                               
	--	load i2b2_secure                                                            
	                                                                               
	i2b2_load_security_data(jobID);                                                
	                                                                               
	--	check if entry exists for study in bio_experiment                           
	                                                                               
	select count(*) into pExists                                                   
	from biomart.bio_experiment                                                    
	where accession = TrialId;                                                     
	                                                                               
	if pExists = 0 then                                                            
		insert into biomart.bio_experiment                                            
		(title, accession, etl_id)                                                    
		select 'Metadata not available'                                               
			  ,TrialId                                                                   
			  ,'METADATA:' || TrialId                                                    
		from dual;                                                                    
	    stepCt := stepCt + 1;                                                      
		cz_write_audit(jobId,databaseName,procedureName,'Insert trial/study into bioma
rt.bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                                 
		commit;                                                                       
	end if;                                                                        
	                                                                               
	select bio_experiment_id into v_bio_experiment_id                              
	from biomart.bio_experiment                                                    
	where accession = TrialId;                                                     
	                                                                               
	insert into searchapp.search_secure_object                                     
	(bio_data_id                                                                   
	,display_name                                                                  
	,data_type                                                                     
	,bio_data_unique_id                                                            
	)                                                                              
	select v_bio_experiment_id                                                     
	      ,parse_nth_value(md.c_fullname,2,'\') || ' - ' || md.c_name as display_na
me                                                                              
		  ,'BIO_CLINICAL_TRIAL' as data_type                                          
		  ,'EXP:' || TrialId as bio_data_unique_id                                    
	from i2b2metadata.i2b2 md                                                      
	where md.sourcesystem_cd = TrialId                                             
	  and md.c_hlevel =                                                            
		 (select min(x.c_hlevel) from i2b2metadata.i2b2 x                             
		  where x.sourcesystem_cd = TrialId)                                          
	  and not exists                                                               
		 (select 1 from searchapp.search_secure_object so                             
		  where v_bio_experiment_id = so.bio_data_id);                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial/study into SEAR
CHAPP search_secure_object',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;                                                                        
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End ' || procedureName,SQL%ROW
COUNT,stepCt,'Done');                                                           
	commit;                                                                        
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		                                                                              
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_RENAME_NODE"                        
(                                                                               
  trial_id varchar2,                                                            
  old_node VARCHAR2,                                                            
  new_node VARCHAR2,                                                            
  currentJobID number:=null                                                     
)                                                                               
AS                                                                              
                                                                                
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
  -------------------------------------------------------------                 
  -- Add a tree node in I2b2                                                    
  -- KCR@20090519 - First Rev                                                   
  -- JEA@20090910 - Added update of concept_path and parent_concept_path in conc
ept_counts, moved update of i2b2 c_dimcode and c_tooltip to be done             
  --				at the same time as c_fullname                                          
  -- JEA@20091029 - Update i2b2_secure and i2b2_tags                            
  -- JEA@20111223	Revised because trial name not necessarily part of path       
	-- JEA@20120228	Added auditing                                                 
	-- JEA@20120517	Add \ to all replace to make sure only string as node name gets
 updated and not update if string part of node                                  
  -------------------------------------------------------------                 
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
                                                                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_rename_node',0,step
Ct,'Done');                                                                     
	                                                                               
  if old_node != ''  or old_node != '%' or new_node != ''  or new_node != '%'   
  then                                                                          
                                                                                
	--	Update concept_counts paths                                                 
                                                                                
	update concept_counts cc                                                       
      set CONCEPT_PATH = replace(cc.concept_path, '\' || old_node || '\', '\' ||
 new_node || '\'),                                                              
	      parent_concept_path = replace(cc.parent_concept_path, '\' || old_node || 
'\', '\' || new_node || '\')                                                    
      where cc.concept_path in                                                  
		   (select cd.concept_path from concept_dimension cd                          
		    where cd.sourcesystem_cd = trial_id                                       
              and cd.concept_path like '%' || old_node || '%');                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update concept_counts with new
 path',SQL%ROWCOUNT,stepCt,'Done');                                             
                                                                                
    COMMIT;                                                                     
	                                                                               
    --Update path in i2b2_tags                                                  
    update i2b2_tags t                                                          
      set path = replace(t.path, '\' || old_node || '\', '\' || new_node || '\')
                                                                                
      where t.path in                                                           
		   (select cd.concept_path from concept_dimension cd                          
		    where cd.sourcesystem_cd = trial_id                                       
              and cd.concept_path like '%\' || old_node || '\%');               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update i2b2_tags with new path
',SQL%ROWCOUNT,stepCt,'Done');                                                  
                                                                                
    COMMIT;                                                                     
	                                                                               
    --Update specific name                                                      
    --update concept_dimension                                                  
    --  set name_char = new_node                                                
    --  where name_char = old_node                                              
    --    and sourcesystem_cd = trial_id;                                       
                                                                                
    --Update all paths                                                          
    update concept_dimension                                                    
      set CONCEPT_PATH = replace(concept_path, '\' || old_node || '\', '\' || ne
w_node || '\')                                                                  
	     ,name_char=decode(name_char,old_node,new_node,name_char)                  
      where                                                                     
		sourcesystem_cd = trial_id                                                    
        and concept_path like '%\' || old_node || '\%';                         
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update concept_dimension with 
new path',SQL%ROWCOUNT,stepCt,'Done');                                          
                                                                                
    COMMIT;                                                                     
                                                                                
                                                                                
                                                                                
    --I2B2                                                                      
    --Update specific name                                                      
    --update i2b2                                                               
    --  set c_name = new_node                                                   
    --  where c_name = old_node                                                 
    --    and c_fullname like '%' || trial_id || '%';                           
                                                                                
    --Update all paths, added updates to c_dimcode and c_tooltip instead of sepa
rate pass                                                                       
    update i2b2                                                                 
      set c_fullname = replace(c_fullname, '\' || old_node || '\', '\' || new_no
de || '\')                                                                      
	  	 ,c_dimcode = replace(c_dimcode, '\' || old_node || '\', '\' || new_node || 
'\')                                                                            
		 ,c_tooltip = replace(c_tooltip, '\' || old_node || '\', '\' || new_node || '\
')                                                                              
		 ,c_name = decode(c_name,old_node,new_node,c_name)                            
      where sourcesystem_cd = trial_id                                          
        and c_fullname like '%\' || old_node || '\%';                           
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new path',SQL
%ROWCOUNT,stepCt,'Done');                                                       
                                                                                
    COMMIT;                                                                     
                                                                                
	--Update i2b2_secure to match i2b2                                             
    --update i2b2_secure                                                        
    --  set c_fullname = replace(c_fullname, old_node, new_node)                
	--  	 ,c_dimcode = replace(c_dimcode, old_node, new_node)                      
	--	 ,c_tooltip = replace(c_tooltip, old_node, new_node)                        
    --  where                                                                   
    --    c_fullname like '%' || trial_id || '%';                               
    --COMMIT;                                                                   
	                                                                               
	i2b2_load_security_data(jobID);                                                
                                                                                
                                                                                
  END IF;                                                                       
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_REMOVE_ANALYSIS"                    
(                                                                               
    etlID NUMBER,                                                               
    currentJobID NUMBER := null                                                 
)                                                                               
AS                                                                              
 --Audit variables                                                              
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
  analysis_id number(18,0);                                                     
  E_ID number(18,0);                                                            
                                                                                
  BEGIN                                                                         
    E_ID := etlID;                                                              
    --Set Audit Parameters                                                      
    newJobFlag := 0; -- False (Default)                                         
    jobID := currentJobID;                                                      
                                                                                
    SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;
                                                                                
    procedureName := $$PLSQL_UNIT;                                              
                                                                                
    --Audit JOB Initialization                                                  
    --If Job ID does not exist, then this is a single procedure run and we need 
to create it                                                                    
    IF(jobID IS NULL or jobID < 1)                                              
    THEN                                                                        
        newJobFlag := 1; -- True                                                
        cz_start_audit (procedureName, databaseName, jobID);                    
    END IF;                                                                     
                                                                                
    stepCt := 0;                                                                
    --get etl_id                                                                
    BEGIN                                                                       
        SELECT bio_assay_analysis_id into analysis_id from BIOMART.BIO_ASSAY_ANA
LYSIS where ETL_ID_SOURCE = E_ID;                                               
    EXCEPTION                                                                   
      WHEN NO_DATA_FOUND THEN                                                   
        analysis_id := NULL;                                                    
    END;                                                                        
                                                                                
    if(analysis_id IS NOT NULL)                                                 
    THEN                                                                        
        --delete data from bio_assay_analysis_data                              
        DELETE from biomart.bio_assay_analysis_data where bio_assay_analysis_id=
analysis_id;                                                                    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_data',SQL%ROWCOUNT,stepCt,'Done');                          
        commit;                                                                 
        --delete data from bio_assay_analysis_data_tea                          
        DELETE from biomart.bio_assay_analysis_data_tea where bio_assay_analysis
_id=analysis_id;                                                                
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_data_tea',SQL%ROWCOUNT,stepCt,'Done');                      
        commit;                                                                 
        --delete data from bio_asy_analysis_dataset                             
        DELETE from biomart.bio_asy_analysis_dataset where bio_assay_analysis_id
=analysis_id;                                                                   
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_dataset',SQL%ROWCOUNT,stepCt,'Done');                       
        commit;                                                                 
        --delete from bio_assay_analysis_EQTL                                   
        DELETE from biomart.bio_assay_analysis_eqtl where bio_assay_analysis_id=
analysis_id;                                                                    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_eqtl',SQL%ROWCOUNT,stepCt,'Done');                          
        commit;                                                                 
        --delete from bio_assay_analysis_EXT                                    
        DELETE from biomart.bio_assay_analysis_ext where bio_assay_analysis_id=a
nalysis_id;                                                                     
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_ext',SQL%ROWCOUNT,stepCt,'Done');                           
        commit;                                                                 
        --delete from bio_assay_analysis_GWAS                                   
        DELETE from biomart.bio_assay_analysis_gwas where bio_assay_analysis_id=
analysis_id;                                                                    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_assay_analysis_gwas',SQL%ROWCOUNT,stepCt,'Done');                          
        commit;                                                                 
        --delete from bio_asy_analysis_EQTL_TOP50                               
        DELETE from biomart.bio_asy_analysis_eqtl_top50 where bio_assay_analysis
_id=analysis_id;                                                                
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_asy_analysis_eqtl_top50',SQL%ROWCOUNT,stepCt,'Done');                      
        commit;                                                                 
        --delete from bio_asy_analysis_gwas_top50                               
        DELETE from biomart.bio_asy_analysis_gwas_top50 where bio_assay_analysis
_id=analysis_id;                                                                
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing data in
 bio_asy_analysis_gwas_top50',SQL%ROWCOUNT,stepCt,'Done');                      
        commit;                                                                 
        --delete from bio_data_observation                                      
        DELETE from biomart.bio_data_observation where bio_data_id=analysis_id; 
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadat
a in bio_data_observation',SQL%ROWCOUNT,stepCt,'Done');                         
        commit;                                                                 
        --delete from bio_data_platform                                         
        DELETE from biomart.bio_data_platform where bio_data_id=analysis_id;    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadat
a in bio_data_platform',SQL%ROWCOUNT,stepCt,'Done');                            
        commit;                                                                 
        --delete from bio_data_disease                                          
        DELETE from biomart.bio_data_disease where bio_data_id=analysis_id;     
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadat
a in bio_data_disease',SQL%ROWCOUNT,stepCt,'Done');                             
        commit;                                                                 
        --delete from bio_assay_analysis                                        
        DELETE from biomart.bio_assay_analysis where bio_assay_analysis_id=analy
sis_id;                                                                         
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadat
a in bio_assay_analysis',SQL%ROWCOUNT,stepCt,'Done');                           
        commit;                                                                 
    END IF;                                                                     
                                                                                
    --delete from tm_lz.lz_src_analysis_metadata                                
    delete from lz_src_analysis_metadata where ETL_ID=etlID ;                   
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadata in
 lz_src_study_metadata',SQL%ROWCOUNT,stepCt,'Done');                            
    commit;                                                                     
                                                                                
    cz_write_audit(jobId,databaseName,procedureName,'End i2b2_remove_analysis',0
,stepCt,'Done');                                                                
    stepCt := stepCt + 1;                                                       
                                                                                
    cz_end_audit(jobId, 'Success');                                             
    EXCEPTION                                                                   
    WHEN OTHERS THEN                                                            
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_RBM_ZSCORE_CALC"                    
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
--	JEA@20090902	Calculate ZScore for a single trial using deapp_wz.de_subject_rb
m_data, delete the trial if found from deapp.de_subject_rbm_data,               
--					and insert the data from deapp_wz.de_subject_rbm_data to deapp.de_subject
_rbm_data                                                                       
--	JEA@20100111	Added auditing                                                  
--	JEA@20100129	Changed update of deapp_wz.de_subject_rbm_data to delete/insert 
--	JEA@20100304	Added assay_id to join on insert to de_subject_rbm_data         
--	Copyright ? 2009 Recombinant Data Corp.                                      
                                                                                
  TrialID varchar2(100);                                                        
  sql_txt varchar2(2000);                                                       
  tExists number;		--	used to check if tmp_ tables exists.  If yes, then drop ta
ble                                                                             
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
  TrialID := upper(trial_id);                                                   
                                                                                
  stepCt := 0;                                                                  
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_rbm_zsco
re_calc',0,stepCt,'Done');                                                      
                                                                                
--	truncate work tables                                                         
                                                                                
	execute immediate('truncate table deapp_wz.tmp_subject_rbm_logs');             
	execute immediate('truncate table deapp_wz.tmp_subject_rbm_calcs');            
	execute immediate('truncate table deapp_wz.tmp_subject_rbm_med');              
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Truncate DEAPP_WZ tmp_
subject_rbm work tables',0,stepCt,'Done');                                      
	commit;                                                                        
                                                                                
--	insert trial with rbm data and log2 of value                                 
                                                                                
	insert into deapp_wz.tmp_subject_rbm_logs                                      
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,value                                                                         
	,log_intensity                                                                 
	)                                                                              
     select TRIAL_NAME                                                          
            ,ANTIGEN_NAME                                                       
            ,N_VALUE                                                            
            ,PATIENT_ID                                                         
            ,GENE_SYMBOL                                                        
            ,GENE_ID                                                            
            ,ASSAY_ID                                                           
            ,NORMALIZED_VALUE                                                   
            ,CONCEPT_CD                                                         
            ,TIMEPOINT                                                          
            ,VALUE                                                              
            ,log(2,VALUE) as log_intensity                                      
     from deapp_wz.de_subject_rbm_data                                          
     where trial_name =  TrialId                                                
	   and value > 0;                                                              
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data int
o DEAPP_WZ tmp_subject_rbm_logs',SQL%ROWCOUNT,stepCt,'Done');                   
	commit;                                                                        
                                                                                
--	calculate mean_intensity, median_intensity, and stddev_intensity for gene/ant
igen                                                                            
                                                                                
	insert into deapp_wz.tmp_subject_rbm_calcs                                     
	(trial_name                                                                    
	,gene_symbol                                                                   
	,antigen_name                                                                  
	,mean_intensity                                                                
	,median_intensity                                                              
	,stddev_intensity                                                              
	)                                                                              
    select d.trial_name                                                         
            ,NVL(d.gene_symbol,'**NULL**') as gene_symbol                       
            ,d.antigen_name                                                     
            ,avg(d.log_intensity)    as mean_intensity                          
            ,median(d.log_intensity) as median_intensity                        
            ,stddev(d.log_intensity) as stddev_intensity                        
            from deapp_wz.tmp_subject_rbm_logs d                                
            group by d.trial_name, d.antigen_name, NVL(d.gene_symbol,'**NULL**')
;                                                                               
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert intensities in
to DEAPP_WZ tmp_subject_rbm_calcs',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;                                                                        
                                                                                
	-- calculate zscore                                                            
                                                                                
	insert into deapp_wz.tmp_subject_rbm_med                                       
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,log_intensity                                                                 
	,value                                                                         
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	)                                                                              
	select d.trial_name                                                            
          ,d.antigen_name                                                       
	      ,d.n_value                                                               
	      ,d.patient_id                                                            
          ,CASE WHEN d.gene_symbol='**NULL**' THEN NULL ELSE d.gene_symbol END a
s gene_symbol                                                                   
          ,d.gene_id                                                            
	      ,d.assay_id                                                              
	      ,d.normalized_value                                                      
	      ,d.concept_cd                                                            
	      ,d.timepoint                                                             
          ,d.log_intensity                                                      
	      ,d.value                                                                 
          ,c.mean_intensity                                                     
	      ,c.stddev_intensity                                                      
	      ,c.median_intensity                                                      
          ,CASE WHEN c.stddev_intensity=0                                       
          THEN 0                                                                
          ELSE (d.log_intensity - c.median_intensity ) / c.stddev_intensity     
          END as zscore                                                         
          from deapp_wz.tmp_subject_rbm_logs d                                  
          inner join deapp_wz.tmp_subject_rbm_calcs c                           
          on d.trial_name=c.trial_name                                          
          and d.antigen_name=c.antigen_name                                     
          and NVL(d.gene_symbol,'**NULL**')=c.gene_symbol;                      
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert uncapped zscore
 data into DEAPP_WZ tmp_subject_rbm_med',SQL%ROWCOUNT,stepCt,'Done');           
    commit;                                                                     
                                                                                
	--	delete trial from deapp_wz.de_subject_rbm_data                              
	                                                                               
	delete from deapp_wz.de_subject_rbm_data                                       
	where trial_name = TrialId;                                                    
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P_WZ de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                          
    commit;	                                                                    
	                                                                               
	--	insert trial into deapp_wz.de_subject_rbm_data                              
	                                                                               
	insert into deapp_wz.de_subject_rbm_data                                       
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,value                                                                         
	,zscore                                                                        
	)                                                                              
	select trial_name                                                              
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,value                                                                         
	,case when zscore < -2.5 then -2.5                                             
	      when zscore > 2.5 then 2.5                                               
		  else round(zscore,5)                                                        
	 end                                                                           
	from deapp_wz.tmp_subject_rbm_med;                                             
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEAP
P_WZ de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                          
	commit;                                                                        
                                                                                
--	delete any data from deapp.de_subject_rbm_data for trial                     
                                                                                
	delete deapp.de_subject_rbm_data                                               
	where trial_name = TrialID;                                                    
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                             
	commit;                                                                        
	                                                                               
--	insert data for trial into deapp.de_subject_rbm_data, both concept_cd and dat
a_uid will be recast and timepoints will be curated when i2b2_process_rbm_data i
s run                                                                           
                                                                                
	insert into deapp.de_subject_rbm_data                                          
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,data_uid                                                                      
	,value                                                                         
	,log_intensity                                                                 
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	)                                                                              
	select r.trial_name                                                            
      ,r.antigen_name                                                           
	  ,r.n_value                                                                   
	  ,r.patient_id                                                                
	  ,r.gene_symbol                                                               
	  ,r.gene_id                                                                   
	  ,r.assay_id                                                                  
	  ,r.normalized_value                                                          
	  ,r.concept_cd                                                                
	  ,r.timepoint                                                                 
	  ,null                                                                        
	  ,r.value                                                                     
	  ,m.log_intensity                                                             
	  ,m.mean_intensity                                                            
	  ,m.stddev_intensity                                                          
	  ,m.median_intensity                                                          
	  ,r.zscore                                                                    
	from deapp_wz.de_subject_rbm_data r                                            
    ,deapp_wz.tmp_subject_rbm_med m                                             
	where r.trial_name = TrialId                                                   
	  and r.trial_name = m.trial_name                                              
	  and r.antigen_name = m.antigen_name                                          
	  and r.patient_id = m.patient_id                                              
	  and r.assay_id = m.assay_id                                                  
	  and nvl(r.gene_symbol,'**NULL**') = nvl(m.gene_symbol,'**NULL**')            
	;                                                                              
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEA
PP de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                            
	 commit;                                                                       
                                                                                
                                                                                
--	cleanup tmp_ files                                                           
                                                                                
   sql_txt := 'truncate table deapp_wz.tmp_subject_rbm_logs';                   
   execute immediate sql_txt;                                                   
                                                                                
   sql_txt := 'truncate table deapp_wz.tmp_subject_rbm_calcs';                  
   execute immediate sql_txt;                                                   
                                                                                
   sql_txt := 'truncate table deapp_wz.tmp_subject_rbm_med';                    
   execute immediate sql_txt;                                                   
                                                                                
       ---Cleanup OVERALL JOB if this proc is being run standalone              
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
/*	recreate work tables                                                         
                                                                                
create table deapp_wz.tmp_subject_rbm_logs as                                   
				  select trial_name                                                         
                  ,antigen_name                                                 
                  ,n_value                                                      
                  ,patient_id                                                   
                  ,gene_symbol                                                  
                  ,gene_id                                                      
                  ,assay_id                                                     
                  ,normalized_value                                             
                  ,concept_cd                                                   
                  ,timepoint                                                    
                  ,value                                                        
                  ,n_value as log_intensity                                     
                  from deapp_wz.de_subject_rbm_data                             
                  where 1=2;                                                    
                                                                                
create table deapp_wz.tmp_subject_rbm_calcs as                                  
               select trial_name                                                
				,gene_symbol                                                                
				,antigen_name                                                               
				,log_intensity as mean_intensity                                            
				,log_intensity as median_intensity                                          
				,log_intensity as stddev_intensity                                          
				from deapp_wz.tmp_subject_rbm_logs                                          
				where 1=2;                                                                  
                                                                                
                                                                                
create table deapp_wz.tmp_subject_rbm_med as                                    
				select trial_name                                                           
                    ,antigen_name                                               
	                ,n_value                                                       
	                ,patient_id                                                    
                    ,gene_symbol                                                
                    ,gene_id                                                    
	                ,assay_id                                                      
	                ,normalized_value                                              
	                ,concept_cd                                                    
	                ,timepoint                                                     
                    ,log_intensity                                              
	                ,value                                                         
                    ,log_intensity as mean_intensity                            
	                ,log_intensity as stddev_intensity                             
	                ,log_intensity as median_intensity                             
                    ,log_intensity as zscore                                    
                   from deapp_wz.tmp_subject_rbm_logs                           
				   where 1=2;                                                               
				                                                                            
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROTEIN_ZSCORE_CALC"                
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
--	JEA@20100129	Calculate ZScore for a single trial using deapp_wz.de_subject_pr
otein_data, delete the trial if found from deapp.de_subject_protein_data,       
--					and insert the data from deapp_wz.de_subject_protein_data to deapp.de_sub
ject_protein_data                                                               
                                                                                
-- Copyright ? 2010 Recombinant Data Corp.                                      
                                                                                
  TrialID varchar2(100);                                                        
  sql_txt varchar2(2000);                                                       
  tExists number;		--	used to check if tmp_ tables exists.  If yes, then drop ta
ble                                                                             
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
  TrialID := upper(trial_id);                                                   
                                                                                
  stepCt := 0;                                                                  
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_protein_
zscore_calc',0,stepCt,'Done');                                                  
                                                                                
	--	truncate work tables                                                        
	                                                                               
	execute immediate('truncate table deapp_wz.tmp_subject_protein_logs');         
	execute immediate('truncate table deapp_wz.tmp_subject_protein_calcs');        
	execute immediate('truncate table deapp_wz.tmp_subject_protein_med');          
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Truncate DEAPP_WZ tmp_
subject_protein work tables',0,stepCt,'Done');                                  
                                                                                
--	insert trial with protein data and log2 of intensity                         
                                                                                
	insert into deapp_wz.tmp_subject_protein_logs                                  
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
    ,n_value                                                                    
    ,patient_id                                                                 
    ,gene_symbol                                                                
    ,gene_id                                                                    
    ,assay_id                                                                   
    ,timepoint                                                                  
    ,log_intensity                                                              
	)                                                                              
     select trial_name                                                          
            ,component                                                          
			,intensity                                                                   
            ,n_value                                                            
            ,patient_id                                                         
            ,gene_symbol                                                        
            ,gene_id                                                            
            ,assay_id                                                           
            ,timepoint                                                          
            ,log(2,intensity) as log_intensity                                  
     from deapp_wz.de_subject_protein_data                                      
     where trial_name =  TrialId                                                
	   and intensity > 0;                                                          
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data int
o DEAPP_WZ tmp_subject_protein_logs',SQL%ROWCOUNT,stepCt,'Done');               
	commit;                                                                        
                                                                                
--	calculate mean_intensity, median_intensity, and stddev_intensity for gene/ant
igen                                                                            
                                                                                
	insert into deapp_wz.tmp_subject_protein_calcs                                 
	(trial_name                                                                    
	,gene_symbol                                                                   
	,component                                                                     
	,mean_intensity                                                                
	,median_intensity                                                              
	,stddev_intensity                                                              
	)                                                                              
    select d.trial_name                                                         
            ,NVL(d.gene_symbol,'**NULL**') as gene_symbol                       
            ,d.component                                                        
            ,avg(d.log_intensity)    as mean_intensity                          
            ,median(d.log_intensity) as median_intensity                        
            ,stddev(d.log_intensity) as stddev_intensity                        
            from deapp_wz.tmp_subject_protein_logs d                            
            group by d.trial_name, d.component, NVL(d.gene_symbol,'**NULL**');  
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert intensities in
to DEAPP_WZ tmp_subject_protein_calcs',SQL%ROWCOUNT,stepCt,'Done');             
	commit;                                                                        
                                                                                
-- calculate zscore                                                             
                                                                                
	insert into deapp_wz.tmp_subject_protein_med                                   
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,zscore                                                                        
	)                                                                              
	select d.trial_name                                                            
          ,d.component                                                          
		  ,d.intensity                                                                
	      ,d.n_value                                                               
	      ,d.patient_id                                                            
          ,case when d.gene_symbol='**null**' then null else d.gene_symbol end a
s gene_symbol                                                                   
          ,d.gene_id                                                            
	      ,d.assay_id                                                              
	      ,d.timepoint                                                             
          ,case when c.stddev_intensity=0                                       
          then 0                                                                
          else (d.log_intensity - c.median_intensity ) / c.stddev_intensity     
          end as zscore                                                         
    from deapp_wz.tmp_subject_protein_logs d                                    
    inner join deapp_wz.tmp_subject_protein_calcs c                             
          on d.trial_name=c.trial_name                                          
          and nvl(d.component,'**null**') = nvl(c.component,'**null**')         
          and nvl(d.gene_symbol,'**null**') = nvl(c.gene_symbol,'**null**');    
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert uncapped zscore
 data into DEAPP_WZ tmp_subject_protein_med',SQL%ROWCOUNT,stepCt,'Done');       
    commit;                                                                     
                                                                                
	--	delete existing data from deapp_wz.de_subject_protein_data                  
	                                                                               
	delete from deapp_wz.de_subject_protein_data                                   
	where trial_name = Trialid;                                                    
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                      
    commit;                                                                     
	                                                                               
	--	insert data into deapp_wz.de_subject_protein_data                           
	                                                                               
	insert into deapp_wz.de_subject_protein_data                                   
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,zscore                                                                        
	)                                                                              
	select trial_name                                                              
		  ,component                                                                  
		  ,intensity                                                                  
		  ,n_value                                                                    
		  ,patient_id                                                                 
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,assay_id                                                                   
		  ,timepoint                                                                  
		  ,case when zscore < -2.5 then -2.5                                          
		        when zscore > 2.5 then 2.5                                            
			    else round(zscore,5)                                                     
		   end                                                                        
	from deapp_wz.tmp_subject_protein_med;                                         
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEAP
P_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                      
    commit;	                                                                    
	                                                                               
--	delete any data from deapp.de_subject_protein_data for trial                 
                                                                                
	delete deapp.de_subject_protein_data                                           
	where trial_name = TrialID;                                                    
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
                                                                                
--	insert data for trial into deapp.de_subject_protein_data                     
                                                                                
	insert into deapp.de_subject_protein_data                                      
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	)                                                                              
	select r.trial_name                                                            
      ,r.component                                                              
	  ,r.intensity                                                                 
	  ,r.n_value                                                                   
	  ,r.patient_id                                                                
	  ,r.gene_symbol                                                               
	  ,r.gene_id                                                                   
	  ,r.assay_id                                                                  
	  ,r.timepoint                                                                 
	  ,m.mean_intensity                                                            
	  ,m.stddev_intensity                                                          
	  ,m.median_intensity                                                          
	  ,r.zscore                                                                    
	from deapp_wz.de_subject_protein_data r                                        
		,deapp_wz.tmp_subject_protein_calcs m                                         
	where r.trial_name = TrialId                                                   
	  and r.trial_name = m.trial_name                                              
	  and nvl(r.component,'**NULL**') = nvl(m.component,'**NULL**')                
	  and nvl(r.gene_symbol,'**NULL**') = nvl(m.gene_symbol,'**NULL**')            
	;                                                                              
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEA
PP de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                        
	 commit;                                                                       
                                                                                
--	cleanup tmp_ files                                                           
                                                                                
	execute immediate('truncate table deapp_wz.tmp_subject_protein_logs');         
	execute immediate('truncate table deapp_wz.tmp_subject_protein_calcs');        
	execute immediate('truncate table deapp_wz.tmp_subject_protein_med');          
                                                                                
       ---Cleanup OVERALL JOB if this proc is being run standalone              
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
/*	--	recreate work tables                                                      
                                                                                
create table deapp_wz.tmp_subject_protein_logs as                               
select trial_name                                                               
	  ,component                                                                   
	  ,intensity                                                                   
	  ,n_value                                                                     
	  ,patient_id                                                                  
	  ,gene_symbol                                                                 
	  ,gene_id                                                                     
	  ,assay_id                                                                    
	  ,timepoint                                                                   
	  ,intensity as log_intensity                                                  
from deapp_wz.de_subject_protein_data                                           
where 1=2;                                                                      
                                                                                
create table deapp_wz.tmp_subject_protein_calcs as                              
select trial_name                                                               
	  ,gene_symbol                                                                 
	  ,component                                                                   
	  ,log_intensity as mean_intensity                                             
	  ,log_intensity as median_intensity                                           
	  ,log_intensity as stddev_intensity                                           
from deapp_wz.tmp_subject_protein_logs                                          
where 1=2;                                                                      
                                                                                
create table deapp_wz.tmp_subject_protein_med as                                
select trial_name                                                               
	  ,component                                                                   
	  ,intensity                                                                   
	  ,n_value                                                                     
	  ,patient_id                                                                  
	  ,gene_symbol                                                                 
	  ,gene_id                                                                     
	  ,assay_id                                                                    
	  ,timepoint                                                                   
	  ,log_intensity                                                               
	  ,log_intensity as zscore                                                     
from deapp_wz.tmp_subject_protein_logs                                          
where 1=2;                                                                      
                                                                                
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_RBM_DATA"                   
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  --	JEA@20100115	New                                                           
  --	JEA@20100121	Removed IgA/IgE/IgM-specific code, moved entries to stg_rbm_an
tigen_gene table                                                                
  --	JEA@20100129	Removed delete of N/A, Not Requested, QNS value_text, will be 
dropped because not numeric                                                     
  --	JEA@20100201	Renamed to I2B2_PROCESS_RBM_DATA from I2B2_LOAD_RBM_DATA for c
onsistency amoung mRNA, RBM, and protein load procedures                        
                                                                                
  TrialID varchar2(100);                                                        
  RootNode VARCHAR2(100);                                                       
  pExists number;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
                                                                                
BEGIN                                                                           
  TrialID := upper(trial_id);                                                   
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_process_rb
m_data',0,stepCt,'Done');                                                       
	                                                                               
  --Determine root value of I2B2: Could be Clinical or Experimental             
  select parse_nth_value(c_fullname, 2, '\') into RootNode                      
  from i2b2                                                                     
  where c_name = TrialID;                                                       
                                                                                
  --if Root Node is null, then add a root node as a clinical trial as a default.
                                                                                
  if RootNode is null then                                                      
    i2b2_add_node(TrialID, '\Clinical Trials\' || TrialID || '\', TrialID, jobID
);                                                                              
    RootNode := 'Clinical Trials';                                              
  end if;                                                                       
                                                                                
	--Cleanup any existing data from raw table                                     
                                                                                
	delete from deapp_wz.stg_subject_rbm_data_raw                                  
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ stg_subject_rbm_data_raw',SQL%ROWCOUNT,stepCt,'Done');            
	commit;                                                                        
                                                                                
	--	Insert into raw data table from staging                                     
                                                                                
	insert into deapp_wz.stg_subject_rbm_data_raw                                  
	(trial_name                                                                    
	,antigen_name                                                                  
	,value_text                                                                    
	,timepoint                                                                     
	,assay_id                                                                      
	,sample_id                                                                     
	,subject_id                                                                    
	,site_id                                                                       
	)                                                                              
	select trial_name                                                              
		  ,antigen_name                                                               
		  ,value_text                                                                 
		  ,timepoint                                                                  
		  ,assay_id                                                                   
		  ,sample_id                                                                  
		  ,subject_id                                                                 
		  ,site_id                                                                    
	from deapp_wz.stg_subject_rbm_data                                             
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial 
into DEAPP_WZ stg_subject_rbm_data_raw',SQL%ROWCOUNT,stepCt,'Done');            
	commit;                                                                        
	                                                                               
	--Remove any unit values from antigen_name and trim antigen_name               
	                                                                               
	update deapp_wz.stg_subject_rbm_data                                           
	set antigen_name = trim(case when instr(upper(antigen_name),'NMOL/L') > 0      
								 then substr(antigen_name,1,instr(UPPER(antigen_name),'NMOL/L')-1)      
								 when instr(upper(antigen_name),'MIU/ML') > 0                           
								 then substr(antigen_name,1,instr(UPPER(antigen_name),'MIU/ML')-1)      
								 else antigen_name                                                      
							end                                                                      
						   );                                                                     
                                                                                
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Removed units from 
antigen_name and trimmed in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'
Done');                                                                         
	commit;                                                                        
                                                                                
	--	Perform node-curation on timepoint                                          
                                                                                
	update deapp_wz.stg_subject_rbm_data a                                         
    set a.timepoint =                                                           
       (select replace(Upper(a.timepoint), b.node_name, b.display_name)         
        from node_curation b                                                    
        where b.node_type = 'VISIT_NAME'                                        
          and upper(a.timepoint) = b.node_name                                  
          and b.active_flag = 'Y'                                               
          and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                
		  and b.global_flag =                                                         
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
      )                                                                         
    where exists                                                                
    (select 1                                                                   
      from node_curation b                                                      
      where b.node_type = 'VISIT_NAME'                                          
        and upper(a.timepoint) = b.node_name                                    
        and b.active_flag = 'Y'                                                 
        and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                  
		and b.global_flag =                                                           
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
    );                                                                          
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated timepoints in 
DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                     
	commit;	                                                                       
	                                                                               
	--	Perform node-curation on antigen_name                                       
                                                                                
	update deapp_wz.stg_subject_rbm_data a                                         
    set a.antigen_name =                                                        
       (select replace(Upper(a.antigen_name), b.node_name, b.display_name)      
        from node_curation b                                                    
        where b.node_type = 'ANTIGEN'                                           
          and upper(a.antigen_name) = b.node_name                               
          and b.active_flag = 'Y'                                               
          and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                
		  and b.global_flag =                                                         
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
      )                                                                         
    where exists                                                                
    (select 1                                                                   
      from node_curation b                                                      
      where b.node_type = 'ANTIGEN'                                             
        and upper(a.antigen_name) = b.node_name                                 
        and b.active_flag = 'Y'                                                 
        and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                  
		and b.global_flag =                                                           
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
    );                                                                          
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated antigen_name i
n DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                   
	commit;	                                                                       
	                                                                               
	--	Update any values that contain < to value-.01 and that contain > to value+.0
1                                                                               
	                                                                               
	update deapp_wz.stg_subject_rbm_data t                                         
	set value_text=decode(instr(value_text,'<'),0,to_char(to_number(replace(value_t
ext,'>',''))+.01),to_char(to_number(replace(value_text,'<',''))-.01))           
	where (value_text like '%<%' or value_text like '%>%')                         
	  and control.is_number(replace(replace(value_text,'<',''),'>','')) = 0;       
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated values with < 
or > in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');             
	commit;	                                                                       
                                                                                
	--	Delete any data where antigen_name is null and value is null                
	                                                                               
	delete from deapp_wz.stg_subject_rbm_data                                      
	where antigen_name is null                                                     
	  and value_text is null;                                                      
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete records with nu
ll antigen_name and value_text in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,st
epCt,'Done');                                                                   
	commit;	                                                                       
                                                                                
	--	Delete any antigens that have more than 50% of the values as LOW            
	                                                                               
	delete from deapp_wz.stg_subject_rbm_data s                                    
	where s.antigen_name in                                                        
	     (select x.antigen_name                                                    
		 from deapp_wz.stg_subject_rbm_data x                                         
		 group by x.antigen_name                                                      
		 having sum(decode(instr(upper(x.value_text),'LOW'),0,0,1))/count(*) > .50);  
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete antigens with >
 50% LOW values in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');  
	commit;	                                                                       
                                                                                
	--	Update numeric values                                                       
	                                                                               
	update deapp_wz.stg_subject_rbm_data                                           
	set value_number=to_number(value_text)                                         
	where control.is_number(value_text) = 0;                                       
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated numeric values
 in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;		                                                                      
                                                                                
	--	Update any remaining LOW values to 50% of minimum value for antigen         
	                                                                               
	update deapp_wz.stg_subject_rbm_data s                                         
	set value_number=                                                              
	    (select min(x.value_number)*.5                                             
		 from deapp_wz.stg_subject_rbm_data x                                         
		 where s.antigen_name = x.antigen_name                                        
		  and x.value_number is not null)                                             
	where upper(s.value_text) like '%LOW%';                                        
                                                                                
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Updated LOW values 
in DEAPP_WZ stg_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                  
	commit;                                                                        
                                                                                
	--Cleanup any existing data from data file                                     
                                                                                
	delete from deapp_wz.de_subject_rbm_data                                       
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;                                                                        
                                                                                
	--	create temporary indexes                                                    
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'DEAPP_WZ'                                                       
	  and index_name = 'STG_SUBJECT_RBM_DATA_I1';                                  
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index deapp_wz.stg_subject_rbm_data_i1');             
	end if;                                                                        
	execute immediate('create index deapp_wz.stg_subject_rbm_data_i1 on deapp_wz.st
g_subject_rbm_data (antigen_name, subject_id) tablespace deapp');               
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'DEAPP'                                                          
	  and index_name = 'STG_RBM_ANTIGEN_GENE_I1';                                  
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index deapp.stg_rbm_antigen_gene_i1');                
	end if;                                                                        
                                                                                
	execute immediate('create index deapp.stg_rbm_antigen_gene_i1 on deapp.stg_rbm_
antigen_gene (antigen_name) tablespace deapp');                                 
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2_LZ'                                                        
	  and index_name = 'RBM_PATIENT_INFO_I1';                                      
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2_lz.rbm_patient_info_i1');                  
	end if;                                                                        
	                                                                               
	execute immediate('create index i2b2_lz.rbm_patient_info_i1 on i2b2_lz.patient_
info (study_id, subject_id, usubjid) tablespace i2b2_data');                    
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2DEMODATA'                                                   
	  and index_name = 'RBM_PATIENT_DIMENSION_I1';                                 
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2demodata.rbm_patient_dimension_i1');        
	end if;	                                                                       
			                                                                             
	execute immediate('create index i2b2demodata.rbm_patient_dimension_i1 on i2b2de
modata.patient_dimension (sourcesystem_cd) tablespace i2b2_data');              
	                                                                               
    insert into deapp_wz.de_subject_rbm_data                                    
	(trial_name                                                                    
	,antigen_name                                                                  
	,value                                                                         
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,zscore                                                                        
	)                                                                              
	select rbm.trial_name                                                          
		  ,rbm.antigen_name                                                           
		  ,avg(rbm.value_number) as value                                             
		  ,avg(rbm.value_number) as n_value                                           
		  ,pd.patient_num                                                             
		  ,ag.gene_symbol                                                             
		  ,ag.gene_id                                                                 
		  ,to_number(rbm.assay_id)                                                    
		  ,0 as normalized_value                                                      
		  ,rbm.trial_name || ':' || substr(rbm.antigen_name,1,20) as concept_cd       
		  ,rbm.timepoint                                                              
		  ,0 as zscore                                                                
	from deapp_wz.stg_subject_rbm_data rbm                                         
		,i2b2_lz.patient_info pi                                                      
		,i2b2demodata.patient_dimension pd                                            
		,deapp.stg_rbm_antigen_gene ag                                                
	where rbm.subject_id = pi.subject_id                                           
	  and nvl(rbm.site_id,'**NULL**') = nvl(pi.site_id,'**NULL**')                 
	  and pi.study_id = TrialId                                                    
	  and pi.usubjid = pd.sourcesystem_cd                                          
	  and rbm.trial_name = TrialId                                                 
	  and rbm.antigen_name = ag.antigen_name                                       
	  and rbm.value_number is not null                                             
	  and rbm.value_number > 0                                                     
	  group by rbm.trial_name                                                      
		  ,rbm.antigen_name                                                           
		  ,pd.patient_num                                                             
		  ,ag.gene_symbol                                                             
		  ,ag.gene_id                                                                 
		  ,to_number(rbm.assay_id)                                                    
		  ,rbm.trial_name || ':' || substr(rbm.antigen_name,1,20)                     
		  ,rbm.timepoint;                                                             
	                                                                               
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into
 DEAPP_WZ de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                     
	commit;                                                                        
                                                                                
	execute immediate('drop index deapp_wz.stg_subject_rbm_data_i1');              
	execute immediate('drop index deapp.stg_rbm_antigen_gene_i1');                 
	execute immediate('drop index i2b2_lz.rbm_patient_info_i1');                   
	execute immediate('drop index i2b2demodata.rbm_patient_dimension_i1');         
	                                                                               
	/*	the delete/insert will be done as part of i2b2_rbm_zscore_calc procedure'   
	                                                                               
	--	Delete existing data from deapp.de_subject_rbm_data                         
                                                                                
	delete from deapp.de_subject_rbm_data                                          
	where trial_name = TrialId;                                                    
		                                                                              
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from 
DEAPP de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
                                                                                
	--	Insert trial into deapp.de_subject_rbm_data                                 
	                                                                               
	insert into deapp.de_subject_rbm_data                                          
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,value                                                                         
	,zscore                                                                        
	)                                                                              
	select trial_name                                                              
		  ,antigen_name                                                               
		  ,n_value                                                                    
		  ,patient_id                                                                 
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,assay_id                                                                   
		  ,normalized_value                                                           
		  ,concept_cd                                                                 
		  ,timepoint                                                                  
		  ,value                                                                      
		  ,zscore                                                                     
	from deapp_wz.de_subject_rbm_data                                              
	where trial_name = TrialID;                                                    
	                                                                               
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into
 DEAPP de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;                                                                        
*/                                                                              
                                                                                
	--	ZScore calculation                                                          
	                                                                               
	i2b2_rbm_zscore_calc(Trialid, jobid);                                          
	                                                                               
	--	Add observed and zscore to i2b2                                             
	                                                                               
	i2b2_load_rbm_data(TrialID, 'O', jobId); 	-- Observed values                   
	i2b2_load_rbm_data(TrialID, 'Z', jobId);		-- Z-Scores                          
	                                                                               
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'End i2b2_process_rb
m_data',0,stepCt,'Done');                                                       
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_RAW_DATA_EXTRNL"            
(                                                                               
  trialID varchar2                                                              
 ,reloadType IN VARCHAR2 := 'R'                                                 
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
--	JEA@20091117	Added reloadType processing to only delete matching trial/catego
ry data if reloadType = I otherwise delete all existing data for trial          
--	JEA@20091117	Added auditing                                                  
--	JEA@20091208	Remove leading and trailing "'s in time_point_measurement column
s generated by excel                                                            
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
	                                                                               
	stepCt := 0;                                                                   
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
	                                                                               
  --Record counts to counts table                                               
                                                                                
  INSERT                                                                        
  INTO I2B2_LZ.TPM_COUNTS                                                       
  (                                                                             
    STUDY_ID,                                                                   
    CATEGORY_CD,                                                                
    RECORD_COUNT,                                                               
    LOAD_DATE                                                                   
  )                                                                             
  select                                                                        
    study_id,                                                                   
    category_cd,                                                                
    count(*),                                                                   
    sysdate                                                                     
    from i2b2_lz.time_point_measurement_extrnl                                  
    where study_id = trialID                                                    
    group by                                                                    
      study_id,                                                                 
      category_cd;                                                              
  commit;                                                                       
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Record counts for exte
rnal tpm table',SQL%ROWCOUNT,stepCt,'Done');                                    
	                                                                               
--	if reloadType = 'I', the data is an incremental load and only the data where 
trial name and category code match will be deleted                              
--	any other code (or none which defaults to R) is a full refresh and all the da
ta for the trial is deleted                                                     
                                                                                
  if reloadType = 'I' then                                                      
	--Delete data from Time Point Measurement raw table where Trial Number and Cate
gory Code match.                                                                
	delete from i2b2_lz.time_point_measurement_raw                                 
    where study_id = trialID                                                    
      and category_cd IN(select distinct category_cd from i2b2_lz.time_point_mea
surement_extrnl where study_id = trialID);                                      
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete matching trial/
category in LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');         
	                                                                               
	COMMIT;                                                                        
  else                                                                          
     delete from i2b2_lz.time_point_measurement_raw                             
	 where study_id = trialID;                                                     
	                                                                               
	 stepCt := stepCt + 1;                                                         
	 control.cz_write_audit(jobId,databaseName,procedureName,'Delete all trial data
 in LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');                 
	                                                                               
	 commit;                                                                       
  end if;                                                                       
                                                                                
  --Insert new records into Raw tables                                          
  insert into                                                                   
    i2b2_lz.time_point_measurement_raw                                          
   (STUDY_ID                                                                    
   ,USUBJID                                                                     
   ,SITE_ID                                                                     
   ,SUBJECT_ID                                                                  
   ,VISIT_NAME                                                                  
   ,DATASET_NAME                                                                
   ,SAMPLE_TYPE                                                                 
   ,DATA_LABEL                                                                  
   ,DATA_VALUE                                                                  
   ,CATEGORY_CD                                                                 
   ,PERIOD                                                                      
   )                                                                            
  select STUDY_ID                                                               
        ,USUBJID                                                                
        ,SITE_ID                                                                
        ,SUBJECT_ID                                                             
        ,trim('"' from VISIT_NAME)                                              
        ,trim('"' from DATASET_NAME)                                            
        ,trim('"' from SAMPLE_TYPE)                                             
        ,trim('"' from DATA_LABEL)                                              
        ,trim('"' from DATA_VALUE)                                              
        ,trim('"' from CATEGORY_CD)                                             
        ,trim('"' from PERIOD)                                                  
    from i2b2_lz.time_point_measurement_extrnl                                  
    where study_id = trialID;                                                   
		                                                                              
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data into
 LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');                    
	                                                                               
  commit;                                                                       
                                                                                
  --Clear the Working zone table                                                
  execute immediate('truncate table i2b2_wz.time_point_measurement');           
                                                                                
  --Load the new records into wz time_point_measurement                         
  insert into i2b2_wz.time_point_measurement                                    
  (study_id                                                                     
  ,site_id                                                                      
  ,subject_id                                                                   
  ,site_subj                                                                    
  ,visit_date                                                                   
  ,visit_name                                                                   
  ,dataset_name                                                                 
  ,endpoint_flag                                                                
  ,sample_type                                                                  
  ,data_label                                                                   
  ,data_value                                                                   
  ,category_cd                                                                  
  ,updated_value                                                                
  ,suppress_flag                                                                
  ,operator_flag                                                                
  ,valueflag_cd                                                                 
  ,unit_cd                                                                      
  ,etl_id                                                                       
  ,data_type                                                                    
  ,usubjid                                                                      
  ,pd_marker                                                                    
  ,period)                                                                      
  select study_id                                                               
        ,site_id                                                                
        ,subject_id                                                             
        ,null                                                                   
        ,null                                                                   
        ,trim('"' from visit_name)                                              
        ,trim('"' from dataset_name)                                            
        ,null                                                                   
        ,trim('"' from sample_type)                                             
        ,trim('"' from data_label)                                              
        ,trim('"' from data_value)                                              
        ,trim('"' from category_cd)                                             
        ,null                                                                   
        ,null                                                                   
        ,null                                                                   
        ,null                                                                   
        ,null                                                                   
        ,'JNJ@' || to_char(sysdate        ,'YYYYMMDD')                          
        ,null                                                                   
        ,usubjid                                                                
        ,null                                                                   
        ,trim('"' from period)                                                  
  from i2b2_lz.time_point_measurement_extrnl                                    
  where data_value is not null                                                  
    and study_id = trialID;                                                     
	                                                                               
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data in 
WZ time_point_measurement',SQL%ROWCOUNT,stepCt,'Done');                         
                                                                                
  commit;                                                                       
                                                                                
  --CATEGORY DATA                                                               
  --DELETE DATA from category table.                                            
  if reloadType = 'I' then                                                      
      delete from i2b2_lz.category                                              
      where study_id = trialID                                                  
        and category_cd IN (Select category_cd from i2b2_lz.category_extrnl wher
e study_id = trialID);                                                          
			                                                                             
      stepCt := stepCt + 1;                                                     
	  control.cz_write_audit(jobId,databaseName,procedureName,'Delete all matching 
trial/category data in LZ category',SQL%ROWCOUNT,stepCt,'Done');                
	                                                                               
	  COMMIT;                                                                      
  else                                                                          
     delete from i2b2_lz.category                                               
	 where study_id = trialID;                                                     
	 	                                                                             
     stepCt := stepCt + 1;                                                      
	 control.cz_write_audit(jobId,databaseName,procedureName,'Delete all trial data
 in LZ category',SQL%ROWCOUNT,stepCt,'Done');                                   
	                                                                               
	 commit;                                                                       
  end if;                                                                       
                                                                                
  --insert new records into the category table                                  
  INSERT INTO I2B2_LZ.CATEGORY                                                  
    (study_id, category_cd, category_path)                                      
  SELECT trialID, category_cd, category_path                                    
    FROM i2b2_lz.category_extrnl;                                               
		                                                                              
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data int
o LZ category',SQL%ROWCOUNT,stepCt,'Done');                                     
                                                                                
  COMMIT;                                                                       
                                                                                
  --clear the category table in the working zone                                
   execute immediate('truncate table i2b2_wz.category');                        
                                                                                
  --Insert the Category data converting the path to proper case, use the jnj_ini
t_cap function so that "reserved" words are not changed                         
  INSERT INTO I2B2_WZ.CATEGORY                                                  
  select                                                                        
    category_Cd,                                                                
    control.jnj_init_cap(category_path) as category_path,                       
    study_id                                                                    
  FROM                                                                          
    i2b2_lz.category                                                            
    where study_id = trialID;                                                   
		                                                                              
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data int
o WZ category',SQL%ROWCOUNT,stepCt,'Done');                                     
                                                                                
  commit;                                                                       
                                                                                
  --Fix category records                                                        
  UPDATE i2b2_wz.CATEGORY                                                       
  SET CATEGORY_PATH = REPLACE(CATEGORY_PATH, 'Elisa', 'ELISA')                  
  where category_path like '%Elisa%';                                           
  	                                                                             
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Fix ELISA category_pa
th',SQL%ROWCOUNT,stepCt,'Done');                                                
  commit;                                                                       
                                                                                
   --	do alter table move to defrag i2b2_wz.time_point_measurement              
                                                                                
   EXECUTE IMMEDIATE 'ALTER TABLE I2B2_WZ.TIME_POINT_MEASUREMENT MOVE';         
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_USUBJID REBUILD';             
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_CATEGORY_CD REBUILD';         
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_DATA_LABEL REBUILD';          
   EXECUTE IMMEDIATE 'ANALYZE TABLE I2B2_WZ.TIME_POINT_MEASUREMENT COMPUTE STATI
STICS';                                                                         
                                                                                
   stepCt := stepCt + 1;                                                        
   control.cz_write_audit(jobId,databaseName,procedureName,'After defrag/analyze
',0,stepCt,'Done');                                                             
                                                                                
  --Clean up LZ tables                                                          
                                                                                
  delete                                                                        
    from i2b2_lz.time_point_measurement                                         
      where study_id = trialID;                                                 
  commit;                                                                       
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END I2B2_PROCESS_RAW_DATA_EXTRNL;                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_RAW_DATA"                   
(                                                                               
  trialID varchar2                                                              
)                                                                               
AS                                                                              
                                                                                
BEGIN                                                                           
                                                                                
  --Record counts to counts table                                               
  INSERT                                                                        
  INTO I2B2_LZ.TPM_COUNTS                                                       
  (                                                                             
    STUDY_ID,                                                                   
    CATEGORY_CD,                                                                
    RECORD_COUNT,                                                               
    LOAD_DATE                                                                   
  )                                                                             
  select                                                                        
    study_id,                                                                   
    category_cd,                                                                
    count(*),                                                                   
    sysdate                                                                     
    from i2b2_lz.time_point_measurement                                         
    where study_id = trialID                                                    
    group by                                                                    
      study_id,                                                                 
      category_cd;                                                              
  commit;                                                                       
                                                                                
  --Delete data from Time Point Measurement raw table where Trial Number and Cat
egory Code match.                                                               
  delete from i2b2_lz.time_point_measurement_raw                                
    where study_id = trialID                                                    
      and category_cd IN(select distinct category_cd from i2b2_lz.time_point_mea
surement where study_id = trialID);                                             
  COMMIT;                                                                       
                                                                                
  --Insert new records into Raw tables                                          
  insert into                                                                   
    i2b2_lz.time_point_measurement_raw                                          
  select *                                                                      
    from i2b2_lz.time_point_measurement                                         
    where study_id = trialID;                                                   
  commit;                                                                       
                                                                                
  --Clear the Working zone table                                                
  delete from  i2b2_wz.time_point_measurement;                                  
                                                                                
  --Load the new records                                                        
  insert into i2b2_wz.time_point_measurement                                    
  select distinct *                                                             
    from i2b2_lz.time_point_measurement a                                       
      where data_value is not null                                              
        and study_id = trialID;                                                 
  commit;                                                                       
                                                                                
  --CATEGORY DATA                                                               
  --DELETE DATA from category table.                                            
  delete                                                                        
    from i2b2_lz.category                                                       
      where study_id = trialID                                                  
        and category_cd IN (Select category_cd from i2b2_lz.stg_category where s
tudy_id = trialID);                                                             
  COMMIT;                                                                       
                                                                                
  --insert new records into the category table                                  
  INSERT INTO I2B2_LZ.CATEGORY                                                  
    (study_id, category_cd, category_path)                                      
  SELECT trialID, category_cd, category_path                                    
    FROM i2b2_lz.stg_category;                                                  
  COMMIT;                                                                       
                                                                                
  --clear the category table in the working zone                                
  delete                                                                        
    from i2b2_wz.category;                                                      
                                                                                
  --Insert the Category data converting the path to proper case                 
  INSERT INTO I2B2_WZ.CATEGORY                                                  
  select                                                                        
    category_Cd,                                                                
    initcap(category_path) as category_path,                                    
    study_id                                                                    
  FROM                                                                          
    i2b2_lz.category                                                            
    where study_id = trialID;                                                   
  commit;                                                                       
                                                                                
  --Fix category records                                                        
  UPDATE i2b2_wz.CATEGORY                                                       
  SET CATEGORY_PATH = REPLACE(CATEGORY_PATH, 'Elisa', 'ELISA')                  
  where category_path like '%Elisa%';                                           
  commit;                                                                       
                                                                                
  --Clean up LZ tables                                                          
  delete                                                                        
    from i2b2_lz.stg_category;                                                  
                                                                                
  delete                                                                        
    from i2b2_lz.time_point_measurement                                         
      where study_id = trialID;                                                 
  commit;                                                                       
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_PROTEIN_DATA"               
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  --	JEA@20100128	New                                                           
                                                                                
  TrialID varchar2(100);                                                        
  RootNode VARCHAR2(100);                                                       
  pExists number;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
	--	cursor for add_nodes                                                        
	                                                                               
  CURSOR addNodes is                                                            
  select distinct REGEXP_REPLACE('\' || rootnode || '\' || TrialID || '\Biomarke
r Data\Protein\Proteomics\' || timepoint || '\' ,                               
                  '(\\){2,}', '\') as path                                      
         ,timepoint as node_name                                                
  from  deapp.de_subject_protein_data                                           
  where trial_name = TrialId;                                                   
	                                                                               
BEGIN                                                                           
  TrialID := upper(trial_id);                                                   
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_load_pr
otein_data',0,stepCt,'Done');                                                   
	                                                                               
  --Determine root value of I2B2: Could be Clinical or Experimental             
  select parse_nth_value(c_fullname, 2, '\') into RootNode                      
  from i2b2                                                                     
  where c_name = TrialID;                                                       
                                                                                
  --if Root Node is null, then add a root node as a clinical trial as a default.
                                                                                
  if RootNode is null then                                                      
    i2b2_add_node(TrialID, '\Clinical Trials\' || TrialID || '\', TrialID, jobID
);                                                                              
    RootNode := 'Clinical Trials';                                              
  end if;                                                                       
                                                                                
	--Cleanup any existing data from raw table                                     
                                                                                
	delete from deapp_wz.stg_subject_protein_data_raw                              
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ stg_subject_protein_data_raw',SQL%ROWCOUNT,stepCt,'Done');        
	commit;                                                                        
                                                                                
	--	Insert into raw data table from staging                                     
                                                                                
	insert into deapp_wz.stg_subject_protein_data_raw                              
	(trial_name                                                                    
	,component                                                                     
	,intensity_text                                                                
	,timepoint                                                                     
	,assay_id                                                                      
	,gene_symbol                                                                   
	,gene_id                                                                       
	,subject_id                                                                    
	,site_id                                                                       
	)                                                                              
	select trial_name                                                              
		  ,component                                                                  
		  ,intensity_text                                                             
		  ,timepoint                                                                  
		  ,assay_id                                                                   
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,subject_id                                                                 
		  ,site_id                                                                    
	from deapp_wz.stg_subject_protein_data                                         
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial 
into DEAPP_WZ stg_subject_protein_data_raw',SQL%ROWCOUNT,stepCt,'Done');        
	commit;                                                                        
                                                                                
	--	Perform node-curation on timepoint                                          
                                                                                
	update deapp_wz.stg_subject_protein_data a                                     
    set a.timepoint =                                                           
       (select replace(Upper(a.timepoint), b.node_name, b.display_name)         
        from node_curation b                                                    
        where b.node_type = 'VISIT_NAME'                                        
          and upper(a.timepoint) = b.node_name                                  
          and b.active_flag = 'Y'                                               
          and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                
		  and b.global_flag =                                                         
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
      )                                                                         
    where exists                                                                
    (select 1                                                                   
      from node_curation b                                                      
      where b.node_type = 'VISIT_NAME'                                          
        and upper(a.timepoint) = b.node_name                                    
        and b.active_flag = 'Y'                                                 
        and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                  
		and b.global_flag =                                                           
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
    );                                                                          
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated timepoints in 
DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;	                                                                       
                                                                                
	--	Update any values that contain < to value-.01 and that contain > to value+.0
1                                                                               
	                                                                               
	update deapp_wz.stg_subject_protein_data t                                     
	set intensity_text=decode(instr(intensity_text,'<'),0,to_char(to_number(replace
(intensity_text,'>',''))+.01),to_char(to_number(replace(intensity_text,'<',''))-
.01))                                                                           
	where (intensity_text like '%<%' or intensity_text like '%>%')                 
	  and control.is_number(replace(replace(intensity_text,'<',''),'>','')) = 0;   
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated values with < 
or > in DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');         
	commit;	                                                                       
                                                                                
	--	Delete any data where component is null and value is null                   
	                                                                               
	delete from deapp_wz.stg_subject_protein_data                                  
	where component is null                                                        
	  and intensity_text is null;                                                  
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete records with nu
ll antigen_name and intensity_text in DEAPP_WZ stg_subject_protein_data',SQL%ROW
COUNT,stepCt,'Done');                                                           
	commit;	                                                                       
                                                                                
	--	Update numeric values                                                       
	                                                                               
	update deapp_wz.stg_subject_protein_data                                       
	set intensity=to_number(intensity_text)                                        
	where control.is_number(intensity_text) = 0;                                   
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated numeric values
 in DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');             
	commit;		                                                                      
                                                                                
	--Cleanup any existing data from data file                                     
                                                                                
	delete from deapp_wz.de_subject_protein_data                                   
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');             
	commit;                                                                        
                                                                                
	--	create temporary indexes                                                    
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'DEAPP_WZ'                                                       
	  and index_name = 'stg_subject_protein_data_I1';                              
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index deapp_wz.stg_subject_protein_data_i1');         
	end if;                                                                        
	execute immediate('create index deapp_wz.stg_subject_protein_data_i1 on deapp_w
z.stg_subject_protein_data (component, subject_id) tablespace deapp');          
                                                                                
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2_LZ'                                                        
	  and index_name = 'PROTEIN_PATIENT_INFO_I1';                                  
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2_lz.protein_patient_info_i1');              
	end if;                                                                        
	                                                                               
	execute immediate('create index i2b2_lz.protein_patient_info_i1 on i2b2_lz.pati
ent_info (study_id, subject_id, usubjid) tablespace i2b2_data');                
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2DEMODATA'                                                   
	  and index_name = 'PROTEIN_PATIENT_DIMENSION_I1';                             
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2demodata.protein_patient_dimension_i1');    
	end if;	                                                                       
			                                                                             
	execute immediate('create index i2b2demodata.protein_patient_dimension_i1 on i2
b2demodata.patient_dimension (sourcesystem_cd) tablespace i2b2_data');          
	                                                                               
    insert into deapp_wz.de_subject_protein_data                                
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,zscore                                                                        
	)                                                                              
	select p.trial_name                                                            
		  ,p.component                                                                
		  ,avg(p.intensity) as value                                                  
		  ,avg(p.intensity) as n_value                                                
		  ,pd.patient_num                                                             
		  ,p.gene_symbol                                                              
		  ,p.gene_id                                                                  
		  ,p.assay_id                                                                 
		  ,p.timepoint                                                                
		  ,0 as zscore                                                                
	from deapp_wz.stg_subject_protein_data p                                       
		,i2b2_lz.patient_info pi                                                      
		,i2b2demodata.patient_dimension pd                                            
	where p.subject_id = pi.subject_id                                             
	  and nvl(p.site_id,'**NULL**') = nvl(pi.site_id,'**NULL**')                   
	  and pi.study_id = TrialId                                                    
	  and pi.usubjid = pd.sourcesystem_cd                                          
	  and p.trial_name = TrialId                                                   
	  and p.intensity is not null                                                  
	  and p.intensity > 0                                                          
	  and p.gene_symbol is not null                                                
	  group by p.trial_name                                                        
		  ,p.component                                                                
		  ,pd.patient_num                                                             
		  ,p.gene_symbol                                                              
		  ,p.gene_id                                                                  
		  ,p.assay_id                                                                 
		  ,p.timepoint;                                                               
	                                                                               
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into
 DEAPP_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;                                                                        
                                                                                
	execute immediate('drop index deapp_wz.stg_subject_protein_data_i1');          
	execute immediate('drop index i2b2_lz.protein_patient_info_i1');               
	execute immediate('drop index i2b2demodata.protein_patient_dimension_i1');     
	                                                                               
	--	ZScore calculation which will insert data to deapp.de_subject_protein_data  
	                                                                               
	i2b2_protein_zscore_calc(Trialid, jobid);                                      
	                                                                               
--	add the high level \Biomarker Data\ node if it doesn't exist (first time load
ing data)                                                                       
                                                                                
	select count(*)                                                                
	into pExists                                                                   
	from i2b2                                                                      
	where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\';     
                                                                                
	if pExists = 0 then                                                            
		i2b2_add_node(trialID, '\' || RootNode || '\' || trialID || '\Biomarker Data\'
, 'Biomarker Data', jobID);                                                     
        stepCt := stepCt + 1;                                                   
	    control.cz_write_audit(jobId,databaseName,procedureName,'Add Biomarker Data
 node for trial',0,stepCt,'Done');                                              
	end if;                                                                        
                                                                                
    --	check if Proteomics node exists, if yes, then delete existing data       
	                                                                               
	select count(*) into pExists                                                   
	from i2b2                                                                      
	where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\Protein
\Proteomics\';                                                                  
		                                                                              
	if pExists != 0 then                                                           
		--This deletes all i2b2, concept_dimension, and observation_fact records wher 
the path starts with the passed paramenter                                      
		i2b2_delete_all_nodes('\' || RootNode || '\'|| TrialID || '\Biomarker Data\Pro
tein\Proteomics\', jobID);                                                      
		stepCt := stepCt + 1;                                                         
		control.cz_write_audit(jobId,databaseName,procedureName,'Delete existing Prote
omics data for trial in I2B2METADATA i2b2',0,stepCt,'Done');                    
	end if;                                                                        
	                                                                               
	--	Cleanup any existing data in de_subject_sample_mapping.                     
	                                                                               
	delete from deapp.DE_SUBJECT_SAMPLE_MAPPING                                    
	where trial_name = TrialID                                                     
	  and platform = 'Protein'                                                     
	  and platform_cd = trialID || ':Protein'; --Making sure only protein data is d
eleted                                                                          
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                       
	commit;                                                                        
	                                                                               
	--	add \Biomarker\Protein\Proteomics\timepoint nodes                           
	                                                                               
	FOR r_addNodes in addNodes Loop                                                
		                                                                              
		i2b2_add_node(TrialId, r_addNodes.path, r_addNodes.node_name, jobId);         
                                                                                
	End loop;                                                                      
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Added Biomarker\Protei
n\Proteomics\timepoint nodes',0,stepCt,'Done');                                 
	commit;                                                                        
	                                                                               
  --Load the DE_SUBJECT_SAMPLE_MAPPING from deapp_wz.stg_subject_mrna_data      
                                                                                
  --CONCEPT_CODE    = generated JNJ concept code                                
  --PATIENT_ID      = PATIENT_ID (SAME AS ID ON THE PATIENT_DIMENSION)          
  --TRIAL_NAME      = TRIAL_NAME                                                
  --TIMEPOINT       = TIMEPOINT                                                 
  --ASSAY_ID        = ASSAY_ID                                                  
  --PLATFORM        = Protein - this is required by ui code                     
  --PLATFORM_CD     = trial_name || 'Protein'                                   
  --TISSUE_TYPE     = NULL                                                      
  --SITE_ID         = NULL                                                      
  --SUBJECT_ID      = NULL                                                      
  --SUBJECT_TYPE    = NULL                                                      
  --PATIENT_UID     = NULL                                                      
  --SAMPLE_TYPE     = NULL                                                      
  --ASSAY_UID       = NULL                                                      
  --TIMEPOINT_CD    = same as concept_cd                                        
  --SAMPLE_TYPE_CD  = NULL                                                      
  --TISSUE_TYPE_CD  = NULL                                                      
  --GPL_ID			= NULL                                                             
                                                                                
	insert into de_subject_sample_mapping                                          
	(data_uid                                                                      
	,concept_code                                                                  
	,patient_id                                                                    
	,trial_name                                                                    
	,timepoint                                                                     
	,assay_id                                                                      
	,platform                                                                      
	,platform_cd                                                                   
	,timepoint_cd                                                                  
	,sample_type                                                                   
	,sample_type_cd                                                                
	,gpl_id                                                                        
    )                                                                           
	select distinct replace(cd.concept_cd || '-' || a.patient_id,' ','') as data_ui
d                                                                               
	      ,cd.concept_cd                                                           
		  ,a.patient_id                                                               
		  ,a.trial_name                                                               
		  ,a.timepoint                                                                
		  ,a.assay_id                                                                 
		  ,'Protein'                                                                  
		  ,a.trial_name || ':Protein'                                                 
		  ,cd.concept_cd as timepoint_cd                                              
		  ,null                                                                       
		  ,null as sample_type_cd                                                     
		  ,null                                                                       
	from deapp.de_subject_protein_data a		                                         
    --Joining to Pat_dim to ensure the ID's match. If not I2B2 won't work.      
	join i2b2demodata.patient_dimension b                                          
	  on a.patient_id = b.patient_num                                              
	join i2b2demodata.concept_dimension cd                                         
	  on cd.concept_path = '\' || rootNode || '\' || TrialId || '\Biomarker Data\Pr
otein\Proteomics\' || a.timepoint || '\'                                        
    where a.trial_name = TrialID;                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEAP
P de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                       
	commit;                                                                        
                                                                                
--	Insert records for patients and timepoints into observation_fact             
                                                                                
	insert into observation_fact                                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,sourcesystem_cd                                                               
	,import_date                                                                   
	,valueflag_cd                                                                  
	,provider_id                                                                   
	,location_cd                                                                   
	,units_cd                                                                      
    )                                                                           
    select m.patient_id                                                         
		  ,m.concept_code                                                             
		  ,m.trial_name                                                               
		  ,'T' -- Text data type                                                      
		  ,'E'  --Stands for Equals for Text Types                                    
		  ,null	--	not numeric for Proteomics                                         
		  ,m.trial_name                                                               
		  ,sysdate                                                                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'' -- no units available                                                   
    from  deapp.de_subject_sample_mapping m                                     
    where trial_name = TrialID                                                  
      and platform = 'Protein'                                                  
    group by patient_id                                                         
			,concept_code                                                                
			,trial_name;                                                                 
    stepCt := stepCt + 1;                                                       
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into I2B2
DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                         
                                                                                
    commit;                                                                     
                                                                                
--	Update visual attributes for leaf active (default is folder)                 
                                                                                
	update i2b2 a                                                                  
    set c_visualattributes = 'LA'                                               
    where 1 = (select count(*)                                                  
			   from i2b2 b                                                               
			   where b.c_fullname like (a.c_fullname || '%'))                            
      and a.c_fullname like '\' || RootNode || '\' || TrialID || '\Biomarker Dat
a\%';                                                                           
    stepCt := stepCt + 1;                                                       
	control.cz_write_audit(jobId,databaseName,procedureName,'Update leaf active att
ribute for trial in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');             
    commit;                                                                     
	                                                                               
--	fill in tree                                                                 
                                                                                
	i2b2_fill_in_tree(TrialID,'\' || rootNode || '\' || TrialID || '\Biomarker Data
\', jobID);                                                                     
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Fill in tree for Bioma
rker Data for trial',SQL%ROWCOUNT,stepCt,'Done');                               
                                                                                
  --Build concept Counts                                                        
  --Also marks any i2B2 records with no underlying data as Hidden, need to do at
 Biomarker level because there may be multiple platforms and patient count can v
ary                                                                             
                                                                                
    i2b2_create_concept_counts('\' || RootNode || '\' || TrialID || '\Biomarker 
Data\',jobID );                                                                 
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Create concept counts'
,0,stepCt,'Done');                                                              
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
                                                                                
    i2b2_load_security_data(jobId);                                             
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Load security data',0,
stepCt,'Done');                                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'End i2b2_process_prote
in_data',0,stepCt,'Done');                                                      
		                                                                              
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_MRNA_DATA"                  
(                                                                               
  trial_id 		VARCHAR2                                                           
 ,top_node		varchar2                                                            
 ,data_type		varchar2 := 'R'		--	R = raw data, do zscore calc, T = transformed d
ata, load raw values as zscore,                                                 
									--	L = log intensity data, skip log step in zscore calc                
 ,source_cd		varchar2 := 'STD'	--	default source_cd = 'STD'                     
 ,log_base		number := 2			--	log base value for conversion back to raw          
 ,secure_study	varchar2			--	security setting if new patients added to patient_d
imension                                                                        
 ,currentJobID 	NUMBER := null                                                  
 ,rtn_code		OUT	NUMBER                                                          
)                                                                               
AS                                                                              
--	Procedure to load the DE_SUBJECT_MICROARRAY_DATA and DE_SUBJECT_SAMPLE_MAPPIN
G tables, compute the Z-Score, and create the I2B2 data for mRNA (gene expressio
n) data                                                                         
--	wt_subject_mrna_data must be pre-loaded with gene expression data.  Because t
he format/content of gene expression data varies,                               
--	the loading of wt_subject_mrna_data is not done within this procedure        
                                                                                
--	***  NOTE ***                                                                
--	The input file columns are mapped to the following table columns.  This is do
ne so that the javascript for the advanced workflows                            
--	selects the correct data for the dropdowns.                                  
                                                                                
--		tissue_type	=>	sample_type                                                  
--		attribute_1	=>	tissue_type                                                  
--		atrribute_2	=>	timepoint	                                                   
                                                                                
                                                                                
--	JEA@90090904	New, modified version from JnJ                                  
--	JEA@20111017	Remove JnJ-specific ontology, use path derived from category_cd 
--	JEA@20111028	Use lt_ tables instead of extrnl to accomodate clients without e
xternal tables                                                                  
--	JEA@20111116	Insert subject_id to patient_dimension if not exists (no clinica
l data)                                                                         
--	JEA@20111116	Added source_cd handling to account for multiple transformations
 for same study                                                                 
--	JEA@@0111117	Removed code to insert sample into patient_dimension            
--	JEA@20111201	Added i2b2 attribute update code                                
--	JEA@20111207	Added distinct to patient insert                                
--	JEA@21001209	Added platform to lt_src_mrna_data, lz_src_mrna_data, use probes
et_deapp for probe_id                                                           
--	JEA@20112121	Remove platform stuff, add exception if sample_cd has multiple p
latforms                                                                        
--	JEA@20111214	Throw exception if no rows inserted into wt_subject_mrna_probese
t                                                                               
--	JEA@20120113	Added H to c_visualattributes for high-density biomarker        
--	JEA@20120131	Remove check for organism in de_gpl_info.                       
--	JEA@20120301	Custom for Millennium to support multiple gene expression analys
is per study,                                                                   
--	JEA@20120314	Pass sourceCD to i2b2_mrna_zscore_calc so correct trial_source s
et                                                                              
--	JEA@20120416	Add omic_source_study, omic_patient_id to de_subject_sample_mapp
ing and populate                                                                
--	JEA@@0120510	Add root_node using i2b2_add_root_node if missing               
--	JEA@20120526	Set sourcesystem_cd, c_comment to null if any upper-level nodes 
added, set sex_cd to Unknown if adding subjects                                 
                                                                                
                                                                                
  TrialID		varchar2(100);                                                       
  RootNode		VARCHAR2(2000);                                                     
  root_level	integer;                                                           
  topNode		varchar2(2000);                                                      
  topLevel		integer;                                                            
  tPath			varchar2(2000);                                                       
  study_name	varchar2(100);                                                     
  sourceCd		varchar2(50);                                                       
  secureStudy	varchar2(1);                                                      
                                                                                
  dataType		varchar2(10);                                                       
  sqlText		varchar2(1000);                                                      
  tText			varchar2(1000);                                                       
  gplTitle		varchar2(1000);                                                     
  pExists		number;                                                              
  partTbl   	number;                                                            
  partExists 	number;                                                           
  sampleCt		number;                                                             
  idxExists 	number;                                                            
  logBase		number;                                                              
  pCount		integer;                                                              
  sCount		integer;                                                              
  tablespaceName	varchar2(200);                                                 
                                                                                
    --Audit variables                                                           
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
  --unmapped_patients exception;                                                
  missing_platform	exception;                                                   
  missing_tissue	EXCEPTION;                                                     
  unmapped_platform exception;                                                  
  multiple_platform	exception;                                                  
  no_probeset_recs	exception;                                                   
                                                                                
                                                                                
                                                                                
	CURSOR addNodes is                                                             
	select distinct t.leaf_node                                                    
          ,t.node_name                                                          
	from  wt_mrna_nodes t                                                          
	where not exists                                                               
		 (select 1 from i2b2 x                                                        
		  where t.leaf_node = x.c_fullname);                                          
                                                                                
                                                                                
--	cursor to define the path for delete_one_node  this will delete any nodes tha
t are hidden after i2b2_create_concept_counts                                   
                                                                                
  CURSOR delNodes is                                                            
  select distinct c_fullname                                                    
  from  i2b2                                                                    
  where c_fullname like topNode || '%'                                          
    and substr(c_visualattributes,2,1) = 'H';                                   
    --and c_visualattributes like '_H_';                                        
                                                                                
                                                                                
BEGIN                                                                           
	TrialID := upper(trial_id);                                                    
	secureStudy := upper(secure_study);                                            
	                                                                               
	if (secureStudy not in ('Y','N') ) then                                        
		secureStudy := 'Y';                                                           
	end if;                                                                        
	                                                                               
	topNode := REGEXP_REPLACE('\' || top_node || '\','(\\){2,}', '\');	            
	select length(topNode)-length(replace(topNode,'\','')) into topLevel from dual;
                                                                                
	                                                                               
	if data_type is null then                                                      
		dataType := 'R';                                                              
	else                                                                           
		if data_type in ('R','T','L') then                                            
			dataType := data_type;                                                       
		else                                                                          
			dataType := 'R';                                                             
		end if;                                                                       
	end if;                                                                        
	                                                                               
	logBase := log_base;                                                           
	sourceCd := upper(nvl(source_cd,'STD'));                                       
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
	stepCt := 0;                                                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_process_mrna_dat
a',0,stepCt,'Done');                                                            
	                                                                               
	--	Get count of records in lt_src_mrna_subj_samp_map                           
	                                                                               
	select count(*) into sCount                                                    
	from lt_src_mrna_subj_samp_map;                                                
	                                                                               
	--	check if all subject_sample map records have a platform, If not, abort run  
	                                                                               
	select count(*) into pCount                                                    
	from lt_src_mrna_subj_samp_map                                                 
	where platform is null;                                                        
	                                                                               
	if pCount > 0 then                                                             
		raise missing_platform;                                                       
	end if;                                                                        
                                                                                
  	--	check if platform exists in de_mrna_annotation .  If not, abort run.      
	                                                                               
	select count(*) into pCount                                                    
	from DE_MRNA_ANNOTATION                                                        
	where GPL_ID in (select distinct m.platform from lt_src_mrna_subj_samp_map m); 
	                                                                               
	if PCOUNT = 0 then                                                             
		RAISE UNMAPPED_platform;                                                      
	end if;                                                                        
	                                                                               
	select count(*) into pCount                                                    
	from DE_gpl_info                                                               
	where platform in (select distinct m.platform from lt_src_mrna_subj_samp_map m)
;                                                                               
	                                                                               
	if PCOUNT = 0 then                                                             
		RAISE UNMAPPED_platform;                                                      
	end if;                                                                        
		                                                                              
	--	check if all subject_sample map records have a tissue_type, If not, abort ru
n                                                                               
	                                                                               
	select count(*) into pCount                                                    
	from lt_src_mrna_subj_samp_map                                                 
	where tissue_type is null;                                                     
	                                                                               
	if pCount > 0 then                                                             
		raise missing_tissue;                                                         
	end if;                                                                        
	                                                                               
	--	check if there are multiple platforms, if yes, then platform must be supplie
d in lt_src_mrna_data                                                           
	                                                                               
	select count(*) into pCount                                                    
	from (select sample_cd                                                         
		  from lt_src_mrna_subj_samp_map                                              
		  group by sample_cd                                                          
		  having count(distinct platform) > 1);                                       
	                                                                               
	if pCount > 0 then                                                             
		raise multiple_platform;                                                      
	end if;                                                                        
		                                                                              
	-- Get root_node from topNode                                                  
                                                                                
	select parse_nth_value(topNode, 2, '\') into RootNode from dual;               
	                                                                               
	select count(*) into pExists                                                   
	from table_access                                                              
	where c_name = rootNode;                                                       
	                                                                               
	if pExists = 0 then                                                            
		i2b2_add_root_node(rootNode, jobId);                                          
	end if;                                                                        
	                                                                               
	select c_hlevel into root_level                                                
	from i2b2                                                                      
	where c_name = RootNode;                                                       
	                                                                               
	-- Get study name from topNode                                                 
                                                                                
	select parse_nth_value(topNode, topLevel, '\') into study_name from dual;      
	                                                                               
	--	Add any upper level nodes as needed                                         
	                                                                               
	tPath := REGEXP_REPLACE(replace(top_node,study_name,null),'(\\){2,}', '\');    
	select length(tPath) - length(replace(tPath,'\',null)) into pCount from dual;  
                                                                                
	if pCount > 2 then                                                             
		i2b2_fill_in_tree(null, tPath, jobId);                                        
	end if;                                                                        
                                                                                
	--	uppercase study_id in lt_src_mrna_subj_samp_map in case curator forgot      
	                                                                               
	update lt_src_mrna_subj_samp_map                                               
	set trial_name=upper(trial_name);                                              
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Uppercase trial_name in lt_src
_mrna_subj_samp_map',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;	                                                                       
	                                                                               
	--	create records in patient_dimension for subject_ids if they do not exist    
	--	format of sourcesystem_cd:  trial:[site:]subject_cd                         
	                                                                               
	insert into patient_dimension                                                  
    ( patient_num,                                                              
      sex_cd,                                                                   
      age_in_years_num,                                                         
      race_cd,                                                                  
      update_date,                                                              
      download_date,                                                            
      import_date,                                                              
      sourcesystem_cd                                                           
    )                                                                           
    select seq_patient_num.nextval                                              
		  ,x.sex_cd                                                                   
		  ,x.age_in_years_num                                                         
		  ,x.race_cd                                                                  
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,x.sourcesystem_cd                                                          
	from (select distinct 'Unknown' as sex_cd,                                     
				 0 as age_in_years_num,                                                     
				 null as race_cd,                                                           
				 regexp_replace(TrialID || ':' || s.site_id || ':' || s.subject_id,'(::){1,}
', ':') as sourcesystem_cd                                                      
		 from lt_src_mrna_subj_samp_map s                                             
		     ,de_gpl_info g                                                           
		 where s.subject_id is not null                                               
		   and s.trial_name = TrialID                                                 
		   and s.source_cd = sourceCD                                                 
		   and s.platform = g.platform                                                
		   and upper(g.marker_type) = 'GENE EXPRESSION'                               
		   and not exists                                                             
			  (select 1 from patient_dimension x                                         
			   where x.sourcesystem_cd =                                                 
				 regexp_replace(TrialID || ':' || s.site_id || ':' || s.subject_id,'(::){1,}
', ':'))                                                                        
		) x;                                                                          
	                                                                               
	pCount := SQL%ROWCOUNT;                                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert subjects to patient_dim
ension',pCount,stepCt,'Done');                                                  
	commit;                                                                        
	                                                                               
	--	add security for trial if new subjects added to patient_dimension           
                                                                                
	if pCount > 0 then                                                             
		i2b2_create_security_for_trial(TrialId, secureStudy, jobID);	                 
	end if;                                                                        
	                                                                               
	--	Delete existing observation_fact data, will be repopulated                  
	                                                                               
	delete from observation_fact obf                                               
	where obf.concept_cd in                                                        
		 (select distinct x.concept_code                                              
		  from de_subject_sample_mapping x                                            
		  where x.trial_name = TrialId                                                
		    and nvl(x.source_cd,'STD') = sourceCD                                     
		    and x.platform = 'MRNA_AFFYMETRIX');                                      
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data from observation_f
act',SQL%ROWCOUNT,stepCt,'Done');                                               
	commit;                                                                        
                                                                                
	select count(*) into pExists                                                   
	from all_tables                                                                
	where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                                
	  and partitioned = 'YES';                                                     
	                                                                               
	if pExists = 0 then                                                            
		--	dataset is not partitioned so must delete                                  
		                                                                              
		delete from de_subject_microarray_data                                        
		where trial_source = TrialId || ':' || sourceCd;                              
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data from observation_
fact',SQL%ROWCOUNT,stepCt,'Done');                                              
		commit;                                                                       
	else                                                                           
		--	Create partition in de_subject_microarray_data if it doesn't exist else tru
ncate partition                                                                 
			                                                                             
		select count(*)                                                               
			into pExists                                                                 
			from all_tab_partitions                                                      
			where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                              
			  and partition_name = TrialId || ':' || sourceCd;                           
			                                                                             
		if pExists = 0 then                                                           
					                                                                           
			--	needed to add partition to de_subject_microarray_data                     
                                                                                
			sqlText := 'alter table deapp.de_subject_microarray_data add PARTITION "' || 
TrialID || ':' || sourceCd || '"  VALUES (' || '''' || TrialID || ':' || sourceC
d || '''' || ') ' ||                                                            
						   'NOLOGGING COMPRESS TABLESPACE "DEAPP" ';                              
			execute immediate(sqlText);                                                  
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Adding partition to de_subje
ct_microarray_data',0,stepCt,'Done');                                           
				                                                                            
		else                                                                          
			sqlText := 'alter table deapp.de_subject_microarray_data truncate partition "
' || TrialID || ':' || sourceCd || '"';                                         
			execute immediate(sqlText);                                                  
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Truncating partition in de_s
ubject_microarray_data',0,stepCt,'Done');                                       
		end if;                                                                       
		                                                                              
	end if;                                                                        
		                                                                              
	--	Cleanup any existing data in de_subject_sample_mapping.                     
                                                                                
	delete from DE_SUBJECT_SAMPLE_MAPPING                                          
	where trial_name = TrialID                                                     
	  and nvl(source_cd,'STD') = sourceCd                                          
	  and platform = 'MRNA_AFFYMETRIX'; --Making sure only mRNA data is deleted    
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAPP de_sub
ject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                               
                                                                                
	commit;                                                                        
                                                                                
--	truncate tmp node table                                                      
                                                                                
	execute immediate('truncate table tm_wz.wt_mrna_nodes');                       
	                                                                               
--	load temp table with leaf node path, use temp table with distinct sample_type
, ATTR2, platform, and title   this was faster than doing subselect             
--	from wt_subject_mrna_data                                                    
                                                                                
	execute immediate('truncate table tm_wz.wt_mrna_node_values');                 
	                                                                               
	insert into wt_mrna_node_values                                                
	(category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
	,attribute_1                                                                   
	,attribute_2                                                                   
	,title                                                                         
	)                                                                              
	select distinct a.category_cd                                                  
				   ,nvl(a.platform,'GPL570')                                                
				   ,nvl(a.tissue_type,'Unspecified Tissue Type')                            
	               ,a.attribute_1                                                  
				   ,a.attribute_2                                                           
				   ,g.title                                                                 
    from lt_src_mrna_subj_samp_map a                                            
	    ,de_gpl_info g                                                             
	where a.trial_name = TrialID                                                   
	  and nvl(a.platform,'GPL570') = g.platform                                    
	  and a.source_cd = sourceCD                                                   
	  and a.platform = g.platform                                                  
	  and upper(g.marker_type) = 'GENE EXPRESSION'                                 
      -- and upper(g.organism) = 'HOMO SAPIENS'                                 
	  ;                                                                            
	--  and decode(dataType,'R',sign(a.intensity_value),1) = 1;	--	take all values 
when dataType T, only >0 for dataType R                                         
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert node values into DEAPP 
wt_mrna_node_values',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	                                                                               
	insert into wt_mrna_nodes                                                      
	(leaf_node                                                                     
	,category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
	,attribute_1                                                                   
    ,attribute_2                                                                
	,node_type                                                                     
	)                                                                              
	select distinct topNode || regexp_replace(replace(replace(replace(replace(repla
ce(replace(                                                                     
	       category_cd,'PLATFORM',title),'ATTR1',attribute_1),'ATTR2',attribute_2),
'TISSUETYPE',tissue_type),'+','\'),'_',' ') || '\','(\\){2,}', '\')             
		  ,category_cd                                                                
		  ,platform as platform                                                       
		  ,tissue_type                                                                
		  ,attribute_1 as attribute_1                                                 
          ,attribute_2 as attribute_2                                           
		  ,'LEAF'                                                                     
	from  wt_mrna_node_values;                                                     
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Create leaf nodes in DEAPP tmp
_mrna_nodes',SQL%ROWCOUNT,stepCt,'Done');                                       
	commit;                                                                        
	                                                                               
	--	insert for platform node so platform concept can be populated               
	                                                                               
	insert into wt_mrna_nodes                                                      
	(leaf_node                                                                     
	,category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
	,attribute_1                                                                   
    ,attribute_2                                                                
	,node_type                                                                     
	)                                                                              
	select distinct topNode || regexp_replace(replace(replace(replace(replace(repla
ce(replace(                                                                     
	       substr(category_cd,1,instr(category_cd,'PLATFORM')+8),'PLATFORM',title),
'ATTR1',attribute_1),'ATTR2',attribute_2),'TISSUETYPE',tissue_type),'+','\'),'_'
,' ') || '\',                                                                   
		   '(\\){2,}', '\')                                                           
		  ,substr(category_cd,1,instr(category_cd,'PLATFORM')+8)                      
		  ,platform as platform                                                       
		  ,case when instr(substr(category_cd,1,instr(category_cd,'PLATFORM')+8),'TISS
UETYPE') > 1 then tissue_type else null end as tissue_type                      
		  ,case when instr(substr(category_cd,1,instr(category_cd,'PLATFORM')+8),'ATTR
1') > 1 then attribute_1 else null end as attribute_1                           
          ,case when instr(substr(category_cd,1,instr(category_cd,'PLATFORM')+8)
,'ATTR2') > 1 then attribute_2 else null end as attribute_2                     
		  ,'PLATFORM'                                                                 
	from  wt_mrna_node_values;                                                     
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Create platform nodes in wt_mr
na_nodes',SQL%ROWCOUNT,stepCt,'Done');                                          
	commit;                                                                        
	                                                                               
	--	insert for ATTR1 node so ATTR1 concept can be populated in tissue_type_cd   
	                                                                               
	insert into wt_mrna_nodes                                                      
	(leaf_node                                                                     
	,category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
    ,attribute_1                                                                
	,attribute_2                                                                   
	,node_type                                                                     
	)                                                                              
	select distinct topNode || regexp_replace(replace(replace(replace(replace(repla
ce(replace(                                                                     
	       substr(category_cd,1,instr(category_cd,'ATTR1')+5),'PLATFORM',title),'AT
TR1',attribute_1),'ATTR2',attribute_2),'TISSUETYPE',tissue_type),'+','\'),'_',' 
') || '\',                                                                      
		   '(\\){2,}', '\')                                                           
		  ,substr(category_cd,1,instr(category_cd,'ATTR1')+5)                         
		  ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR1')+5),'PLATFOR
M') > 1 then platform else null end as platform                                 
		  ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR1')+5),'TISSUET
YPE') > 1 then tissue_type else null end as tissue_type                         
		  ,attribute_1 as attribute_1                                                 
          ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR1')+5),'A
TTR2') > 1 then attribute_2 else null end as attribute_2                        
		  ,'ATTR1'                                                                    
	from  wt_mrna_node_values                                                      
	where category_cd like '%ATTR1%'                                               
	  and attribute_1 is not null;                                                 
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Create ATTR1 nodes in wt_mrna_
nodes',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
	                                                                               
	--	insert for ATTR2 node so ATTR2 concept can be populated in timepoint_cd     
	                                                                               
	insert into wt_mrna_nodes                                                      
	(leaf_node                                                                     
	,category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
    ,attribute_1                                                                
	,attribute_2                                                                   
	,node_type                                                                     
	)                                                                              
	select distinct topNode || regexp_replace(replace(replace(replace(replace(repla
ce(replace(                                                                     
	       substr(category_cd,1,instr(category_cd,'ATTR2')+5),'PLATFORM',title),'AT
TR1',attribute_1),'ATTR2',attribute_2),'TISSUETYPE',tissue_type),'+','\'),'_',' 
') || '\',                                                                      
		   '(\\){2,}', '\')                                                           
		  ,substr(category_cd,1,instr(category_cd,'ATTR2')+5)                         
		  ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR2')+5),'PLATFOR
M') > 1 then platform else null end as platform                                 
		  ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR1')+5),'TISSUET
YPE') > 1 then tissue_type else null end as tissue_type                         
          ,case when instr(substr(category_cd,1,instr(category_cd,'ATTR2')+5),'A
TTR1') > 1 then attribute_1 else null end as attribute_1                        
		  ,attribute_2 as attribute_2                                                 
		  ,'ATTR2'                                                                    
	from  wt_mrna_node_values                                                      
	where category_cd like '%ATTR2%'                                               
	  and attribute_2 is not null;                                                 
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Create ATTR2 nodes in wt_mrna_
nodes',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
	                                                                               
	--	insert for tissue_type node so sample_type_cd can be populated              
	                                                                               
	insert into wt_mrna_nodes                                                      
	(leaf_node                                                                     
	,category_cd                                                                   
	,platform                                                                      
	,tissue_type                                                                   
	,attribute_1                                                                   
    ,attribute_2                                                                
	,node_type                                                                     
	)                                                                              
	select distinct topNode || regexp_replace(replace(replace(replace(replace(repla
ce(replace(                                                                     
	       substr(category_cd,1,instr(category_cd,'TISSUETYPE')+10),'PLATFORM',titl
e),'ATTR1',attribute_1),'ATTR2',attribute_2),'TISSUETYPE',tissue_type),'+','\'),
'_',' ') || '\',                                                                
		   '(\\){2,}', '\')                                                           
		  ,substr(category_cd,1,instr(category_cd,'TISSUETYPE')+10)                   
		  ,case when instr(substr(category_cd,1,instr(category_cd,'TISSUETYPE')+10),'P
LATFORM') > 1 then platform else null end as platform                           
		  ,tissue_type as tissue_type                                                 
		  ,case when instr(substr(category_cd,1,instr(category_cd,'TISSUETYPE')+10),'A
TTR1') > 1 then attribute_1 else null end as attribute_1                        
          ,case when instr(substr(category_cd,1,instr(category_cd,'TISSUETYPE')+
10),'ATTR2') > 1 then attribute_2 else null end as attribute_2                  
		  ,'TISSUETYPE'                                                               
	from  wt_mrna_node_values                                                      
	where category_cd like '%TISSUETYPE%';                                         
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Create ATTR2 nodes in wt_mrna_
nodes',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
				                                                                            
	update wt_mrna_nodes                                                           
	set node_name=parse_nth_value(leaf_node,length(leaf_node)-length(replace(leaf_n
ode,'\',null)),'\');                                                            
		                                                                              
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Updated node_name in DEAPP tmp
_mrna_nodes',SQL%ROWCOUNT,stepCt,'Done');                                       
	commit;                                                                        
		                                                                              
--	add leaf nodes for mRNA data  The cursor will only add nodes that do not alre
ady exist.                                                                      
                                                                                
	 FOR r_addNodes in addNodes Loop                                               
                                                                                
    --Add nodes for all types (ALSO DELETES EXISTING NODE)                      
                                                                                
		i2b2_add_node(TrialID, r_addNodes.leaf_node, r_addNodes.node_name, jobId);    
		stepCt := stepCt + 1;                                                         
		tText := 'Added Leaf Node: ' || r_addNodes.leaf_node || '  Name: ' || r_addNod
es.node_name;                                                                   
		                                                                              
		cz_write_audit(jobId,databaseName,procedureName,tText,SQL%ROWCOUNT,stepCt,'Don
e');                                                                            
		                                                                              
		i2b2_fill_in_tree(TrialId, r_addNodes.leaf_node, jobID);                      
                                                                                
	END LOOP;                                                                      
	                                                                               
	--	set sourcesystem_cd, c_comment to null if any added upper-level nodes       
	                                                                               
	update i2b2 b                                                                  
	set sourcesystem_cd=null,c_comment=null                                        
	where b.sourcesystem_cd = TrialId                                              
	  and length(b.c_fullname) < length(topNode);                                  
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set sourcesystem_cd to null fo
r added upper level nodes',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
		                                                                              
--	update concept_cd for nodes, this is done to make the next insert easier     
                                                                                
	update wt_mrna_nodes t                                                         
	set concept_cd=(select c.concept_cd from concept_dimension c                   
	                where c.concept_path = t.leaf_node                             
				   )                                                                        
    where exists                                                                
         (select 1 from concept_dimension x                                     
	                where x.concept_path = t.leaf_node                             
				   )                                                                        
	  and t.concept_cd is null;                                                    
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update wt_mrna_nodes with newl
y created concept_cds',SQL%ROWCOUNT,stepCt,'Done');                             
	commit;                                                                        
	                                                                               
	                                                                               
  --Load the DE_SUBJECT_SAMPLE_MAPPING from wt_subject_mrna_data                
                                                                                
  --PATIENT_ID      = PATIENT_ID (SAME AS ID ON THE PATIENT_DIMENSION)          
  --SITE_ID         = site_id                                                   
  --SUBJECT_ID      = subject_id                                                
  --SUBJECT_TYPE    = NULL                                                      
  --CONCEPT_CODE    = from LEAF records in wt_mrna_nodes                        
  --SAMPLE_TYPE    	= TISSUE_TYPE                                               
  --SAMPLE_TYPE_CD  = concept_cd from TISSUETYPE records in wt_mrna_nodes       
  --TRIAL_NAME      = TRIAL_NAME                                                
  --TIMEPOINT		= attribute_2                                                    
  --TIMEPOINT_CD	= concept_cd from ATTR2 records in wt_mrna_nodes               
  --TISSUE_TYPE     = attribute_1                                               
  --TISSUE_TYPE_CD  = concept_cd from ATTR1 records in wt_mrna_nodes            
  --PLATFORM        = MRNA_AFFYMETRIX - this is required by ui code             
  --PLATFORM_CD     = concept_cd from PLATFORM records in wt_mrna_nodes         
  --DATA_UID		= concatenation of concept_cd-patient_num                         
  --GPL_ID			= platform from wt_subject_mrna_data                               
  --CATEGORY_CD		= category_cd that generated ontology                          
  --SAMPLE_ID		= id of sample (trial:S:[site_id]:subject_id:sample_cd) from pati
ent_dimension, may be the same as patient_num                                   
  --SAMPLE_CD		= sample_cd                                                      
  --SOURCE_CD		= sourceCd                                                       
                                                                                
  --ASSAY_ID        = generated by trigger                                      
                                                                                
	insert into de_subject_sample_mapping                                          
	(patient_id                                                                    
	,site_id                                                                       
	,subject_id                                                                    
	,subject_type                                                                  
	,concept_code                                                                  
	,assay_id                                                                      
	,sample_type                                                                   
	,sample_type_cd                                                                
	,trial_name                                                                    
	,timepoint                                                                     
	,timepoint_cd                                                                  
	,tissue_type                                                                   
	,tissue_type_cd                                                                
	,platform                                                                      
	,platform_cd                                                                   
	,data_uid                                                                      
	,gpl_id                                                                        
	,sample_id                                                                     
	,sample_cd                                                                     
	,category_cd                                                                   
	,source_cd                                                                     
	,omic_source_study                                                             
	,omic_patient_id                                                               
    )                                                                           
	select t.patient_id                                                            
		  ,t.site_id                                                                  
		  ,t.subject_id                                                               
		  ,t.subject_type                                                             
		  ,t.concept_code                                                             
		  ,deapp.seq_assay_id.nextval                                                 
		  ,t.sample_type                                                              
		  ,t.sample_type_cd                                                           
		  ,t.trial_name                                                               
		  ,t.timepoint                                                                
		  ,t.timepoint_cd                                                             
		  ,t.tissue_type                                                              
		  ,t.tissue_type_cd                                                           
		  ,t.platform                                                                 
		  ,t.platform_cd                                                              
		  ,t.data_uid                                                                 
		  ,t.gpl_id                                                                   
		  ,t.sample_id                                                                
		  ,t.sample_cd                                                                
		  ,t.category_cd                                                              
		  ,t.source_cd                                                                
		  ,t.omic_source_study                                                        
		  ,t.omic_patient_id                                                          
	from (select distinct b.patient_num as patient_id                              
			  ,a.site_id                                                                 
			  ,a.subject_id                                                              
			  ,null as subject_type                                                      
			  ,ln.concept_cd as concept_code                                             
			  ,a.tissue_type as sample_type                                              
			  ,ttp.concept_cd as sample_type_cd                                          
			  ,a.trial_name                                                              
			  ,a.attribute_2 as timepoint                                                
			  ,a2.concept_cd as timepoint_cd                                             
			  ,a.attribute_1 as tissue_type                                              
			  ,a1.concept_cd as tissue_type_cd                                           
			  ,'MRNA_AFFYMETRIX' as platform                                             
			  ,pn.concept_cd as platform_cd                                              
			  ,ln.concept_cd || '-' || to_char(b.patient_num) as data_uid                
			  ,a.platform as gpl_id                                                      
			  ,coalesce(sid.patient_num,b.patient_num) as sample_id                      
			  ,a.sample_cd                                                               
			  ,nvl(a.category_cd,'Biomarker_Data+Gene_Expression+PLATFORM+TISSUETYPE+ATTR
1+ATTR2') as category_cd                                                        
			  ,a.source_cd                                                               
			  ,TrialId as omic_source_study                                              
			  ,b.patient_num as omic_patient_id                                          
		from lt_src_mrna_subj_samp_map a		                                            
		--Joining to Pat_dim to ensure the ID's match. If not I2B2 won't work.        
		inner join patient_dimension b                                                
		  on regexp_replace(TrialID || ':' || a.site_id || ':' || a.subject_id,'(::){1
,}', ':') = b.sourcesystem_cd                                                   
		inner join wt_mrna_nodes ln                                                   
			on a.platform = ln.platform                                                  
			and a.tissue_type = ln.tissue_type                                           
			and nvl(a.attribute_1,'@') = nvl(ln.attribute_1,'@')                         
			and nvl(a.attribute_2,'@') = nvl(ln.attribute_2,'@')                         
			and ln.node_type = 'LEAF'                                                    
		inner join wt_mrna_nodes pn                                                   
			on a.platform = pn.platform                                                  
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'PLATFORM')+8)
,'TISSUETYPE') > 1 then a.tissue_type else '@' end = nvl(pn.tissue_type,'@')    
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'PLATFORM')+8)
,'ATTR1') > 1 then a.attribute_1 else '@' end = nvl(pn.attribute_1,'@')         
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'PLATFORM')+8)
,'ATTR2') > 1 then a.attribute_2 else '@' end = nvl(pn.attribute_2,'@')         
			and pn.node_type = 'PLATFORM'	                                               
		left outer join wt_mrna_nodes ttp                                             
			on a.tissue_type = ttp.tissue_type                                           
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'TISSUETYPE')+
10),'PLATFORM') > 1 then a.platform else '@' end = nvl(ttp.platform,'@')        
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'TISSUETYPE')+
10),'ATTR1') > 1 then a.attribute_1 else '@' end = nvl(ttp.attribute_1,'@')     
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'TISSUETYPE')+
10),'ATTR2') > 1 then a.attribute_2 else '@' end = nvl(ttp.attribute_2,'@')     
			and ttp.node_type = 'TISSUETYPE'		                                           
		left outer join wt_mrna_nodes a1                                              
			on a.attribute_1 = a1.attribute_1                                            
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR1')+5),'P
LATFORM') > 1 then a.platform else '@' end = nvl(a1.platform,'@')               
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR1')+5),'T
ISSUETYPE') > 1 then a.tissue_type else '@' end = nvl(a1.tissue_type,'@')       
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR1')+5),'A
TTR2') > 1 then a.attribute_2 else '@' end = nvl(a1.attribute_2,'@')            
			and a1.node_type = 'ATTR1'		                                                 
		left outer join wt_mrna_nodes a2                                              
			on a.attribute_2 = a1.attribute_2                                            
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR2')+5),'P
LATFORM') > 1 then a.platform else '@' end = nvl(a2.platform,'@')               
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR2')+5),'T
ISSUETYPE') > 1 then a.tissue_type else '@' end = nvl(a2.tissue_type,'@')       
			and case when instr(substr(a.category_cd,1,instr(a.category_cd,'ATTR2')+5),'A
TTR1') > 1 then a.attribute_1 else '@' end = nvl(a2.attribute_1,'@')            
			and a2.node_type = 'ATTR2'			                                                
		left outer join patient_dimension sid                                         
			on  regexp_replace(TrialId || ':S:' || a.site_id || ':' || a.subject_id || ':
' || a.sample_cd,                                                               
							  '(::){1,}', ':') = sid.sourcesystem_cd                                 
		where a.trial_name = TrialID                                                  
		  and a.source_cd = sourceCD                                                  
		  and  ln.concept_cd is not null) t;                                          
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEAPP de_sub
ject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                               
                                                                                
  commit;                                                                       
                                                                                
--	recreate de_subject_sample_mapping indexes                                   
                                                                                
	--execute immediate('create index de_subject_smpl_mpng_idx1 on de_subject_sampl
e_mapping(timepoint, patient_id, trial_name) parallel nologging');              
	--execute immediate('create index de_subject_smpl_mpng_idx2 on de_subject_sampl
e_mapping(patient_id, timepoint_cd, platform_cd, assay_id, trial_name) parallel 
nologging');                                                                    
	--execute immediate('create bitmap index de_subject_smpl_mpng_idx3 on de_subjec
t_sample_mapping(sample_type_cd) parallel nologging');                          
	--execute immediate('create index de_subject_smpl_mpng_idx4 on de_subject_sampl
e_mapping(gpl_id) parallel nologging');                                         
	--execute immediate('create index de_subject_smpl_mpng_idx4 on de_subject_sampl
e_mapping(platform, gpl_id) parallel nologging');                               
    --stepCt := stepCt + 1;                                                     
	--cz_write_audit(jobId,databaseName,procedureName,'Recreate indexes on DEAPP de
_subject_sample_mapping',0,stepCt,'Done');                                      
                                                                                
--	Insert records for patients and samples into observation_fact                
                                                                                
	insert into observation_fact                                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,sourcesystem_cd                                                               
	,import_date                                                                   
	,valueflag_cd                                                                  
	,provider_id                                                                   
	,location_cd                                                                   
	,units_cd                                                                      
    )                                                                           
    select distinct m.patient_id                                                
		  ,m.concept_code                                                             
		  ,m.trial_name                                                               
		  ,'T' -- Text data type                                                      
		  ,'E'  --Stands for Equals for Text Types                                    
		  ,null	--	not numeric for mRNA                                               
		  ,m.trial_name                                                               
		  ,sysdate                                                                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'' -- no units available                                                   
    from  de_subject_sample_mapping m                                           
    where m.trial_name = TrialID                                                
	  and m.source_cd = sourceCD                                                   
      and m.platform = 'MRNA_AFFYMETRIX';                                       
	                                                                               
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Insert patient facts into I2B2
DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                         
                                                                                
    commit;                                                                     
                                                                                
	--	Insert sample facts                                                         
	                                                                               
	insert into observation_fact                                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,sourcesystem_cd                                                               
	,import_date                                                                   
	,valueflag_cd                                                                  
	,provider_id                                                                   
	,location_cd                                                                   
	,units_cd                                                                      
    )                                                                           
    select distinct m.sample_id                                                 
		  ,m.concept_code                                                             
		  ,m.trial_name                                                               
		  ,'T' -- Text data type                                                      
		  ,'E'  --Stands for Equals for Text Types                                    
		  ,null	--	not numeric for mRNA                                               
		  ,m.trial_name                                                               
		  ,sysdate                                                                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'' -- no units available                                                   
    from  de_subject_sample_mapping m                                           
    where m.trial_name = TrialID                                                
	  and m.source_cd = sourceCd                                                   
      and m.platform = 'MRNA_AFFYMETRIX'                                        
	  and m.patient_id != m.sample_id;                                             
	                                                                               
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Insert sample facts into I2B2D
EMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                          
                                                                                
    commit;                                                                     
                                                                                
	--Update I2b2 for correct data type                                            
	                                                                               
	update i2b2 t                                                                  
	set c_columndatatype = 'T', c_metadataxml = null, c_visualattributes='FA'      
	where t.c_basecode in (select distinct x.concept_cd from wt_mrna_nodes x);     
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Initialize data_type and xml i
n i2b2',SQL%ROWCOUNT,stepCt,'Done');                                            
	commit;                                                                        
	                                                                               
	update i2b2                                                                    
	SET c_columndatatype = 'N',                                                    
      --Static XML String                                                       
		c_metadataxml = '<?xml version="1.0"?><ValueMetadata><Version>3.02</Version><C
reationDateTime>08/14/2008 01:22:59</CreationDateTime><TestID></TestID><TestName
></TestName><DataType>PosFloat</DataType><CodeType></CodeType><Loinc></Loinc><Fl
agstouse></Flagstouse><Oktousevalues>Y</Oktousevalues><MaxStringLength></MaxStri
ngLength><LowofLowValue>0</LowofLowValue><HighofLowValue>0</HighofLowValue><Lowo
fHighValue>100</LowofHighValue>100<HighofHighValue>100</HighofHighValue><LowofTo
xicValue></LowofToxicValue><HighofToxicValue></HighofToxicValue><EnumValues></En
umValues><CommentsDeterminingExclusion><Com></Com></CommentsDeterminingExclusion
><UnitValues><NormalUnits>ratio</NormalUnits><EqualUnits></EqualUnits><Excluding
Units></ExcludingUnits><ConvertingUnits><Units></Units><MultiplyingFactor></Mult
iplyingFactor></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New /
></Analysis></ValueMetadata>'                                                   
	where c_basecode IN (                                                          
		  select xd.concept_cd                                                        
		  from wt_mrna_nodes xd                                                       
			  ,observation_fact xf                                                       
		  where xf.concept_cd = xd.concept_cd                                         
		  group by xd.concept_Cd                                                      
		  having Max(xf.valtype_cd) = 'N');                                           
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update c_columndatatype and c_
metadataxml for numeric data types in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Do
ne');                                                                           
	commit;                                                                        
                                                                                
/*                                                                              
	--UPDATE VISUAL ATTRIBUTES for Leaf Active (Default is folder)                 
	update i2b2 a                                                                  
    set c_visualattributes = 'LA'                                               
    where 1 = (                                                                 
      select count(*)                                                           
      from i2b2 b                                                               
      where b.c_fullname like (a.c_fullname || '%'))                            
      and c_fullname like '%' || topNode || '%';                                
*/                                                                              
                                                                                
	--UPDATE VISUAL ATTRIBUTES for Leaf Active (Default is folder)                 
	update i2b2 a                                                                  
    set c_visualattributes = 'LAH'                                              
	where a.c_basecode in (select distinct x.concept_code from de_subject_sample_ma
pping x                                                                         
						   where x.trial_name = TrialId                                           
						     and x.platform = 'MRNA_AFFYMETRIX'                                   
							 and x.concept_code is not null);                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update visual attributes for l
eaf nodes in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                    
                                                                                
	COMMIT;                                                                        
                                                                                
  --Build concept Counts                                                        
  --Also marks any i2B2 records with no underlying data as Hidden, need to do at
 Trial level because there may be multiple platform and there is no longer      
  -- a unique top-level node for mRNA data                                      
                                                                                
    i2b2_create_concept_counts(topNode ,jobID );                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create concept counts',0,stepC
t,'Done');                                                                      
	                                                                               
	--	delete each node that is hidden                                             
	                                                                               
	 FOR r_delNodes in delNodes Loop                                               
                                                                                
    --	deletes hidden nodes for a trial one at a time                           
                                                                                
		i2b2_delete_1_node(r_delNodes.c_fullname);                                    
		stepCt := stepCt + 1;                                                         
		tText := 'Deleted node: ' || r_delNodes.c_fullname;                           
		                                                                              
		cz_write_audit(jobId,databaseName,procedureName,tText,SQL%ROWCOUNT,stepCt,'Don
e');                                                                            
                                                                                
	END LOOP;  	                                                                   
                                                                                
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
                                                                                
    i2b2_load_security_data(jobId);                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load security data',0,stepCt,'
Done');                                                                         
                                                                                
--	tag data with probeset_id from reference.probeset_deapp                      
                                                                                
	execute immediate ('truncate table tm_wz.wt_subject_mrna_probeset');           
	                                                                               
	--	note: assay_id represents a unique subject/site/sample                      
	                                                                               
	insert into wt_subject_mrna_probeset                                           
	(probeset_id                                                                   
--	,expr_id                                                                     
	,intensity_value                                                               
	,patient_id                                                                    
--	,sample_cd                                                                   
--	,subject_id                                                                  
	,trial_name                                                                    
	,assay_id                                                                      
	)                                                                              
	select gs.probeset_id                                                          
--		  ,sd.sample_cd                                                             
		  ,avg(md.intensity_value)                                                    
		  ,sd.patient_id                                                              
--		  ,sd.sample_cd                                                             
--		  ,sd.subject_id                                                            
		  ,TrialId                                                                    
		  ,sd.assay_id                                                                
	from de_subject_sample_mapping sd                                              
		,lt_src_mrna_data md                                                          
		,probeset_deapp gs                                                            
	where sd.sample_cd = md.expr_id                                                
	  and sd.platform = 'MRNA_AFFYMETRIX'                                          
	  and sd.trial_name = TrialId                                                  
	  and sd.source_cd = sourceCd                                                  
	  and sd.gpl_id = gs.platform                                                  
	  and md.probeset = gs.probeset                                                
	  and decode(dataType,'R',sign(md.intensity_value),1) = 1  --	take only >0 for 
dataType R                                                                      
	group by gs.probeset_id                                                        
		--  ,sd.sample_cd                                                             
		  ,sd.patient_id                                                              
		--  ,sd.sample_cd                                                             
		--  ,sd.subject_id                                                            
		  ,sd.assay_id;                                                               
		                                                                              
	pExists := SQL%ROWCOUNT;                                                       
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert into DEAPP wt_subject_m
rna_probeset',SQL%ROWCOUNT,stepCt,'Done');                                      
	                                                                               
	commit;		                                                                      
	                                                                               
	if pExists = 0 then                                                            
		raise no_probeset_recs;                                                       
	end if;                                                                        
                                                                                
	--	insert into de_subject_microarray_data when dataType is T (transformed)     
                                                                                
	if dataType = 'T' then                                                         
		insert into de_subject_microarray_data                                        
		(trial_source                                                                 
		,probeset_id                                                                  
		,assay_id                                                                     
		,patient_id                                                                   
		--,sample_id                                                                  
		--,subject_id                                                                 
		,trial_name                                                                   
		,zscore                                                                       
		)                                                                             
		select TrialId || ':' || sourceCd                                             
			  ,probeset_id                                                               
			  ,assay_id                                                                  
			  ,patient_id                                                                
			  --,sample_id                                                               
			  --,subject_id                                                              
			  ,trial_name                                                                
			  ,case when intensity_value < -2.5                                          
			        then -2.5                                                            
					when intensity_value > 2.5                                                 
					then 2.5                                                                   
					else intensity_value                                                       
			   end as zscore                                                             
		from wt_subject_mrna_probeset                                                 
		where trial_name = TrialID;                                                   
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Insert transformed into DEAPP
 de_subject_microarray_data',SQL%ROWCOUNT,stepCt,'Done');                       
                                                                                
		commit;	                                                                      
	else                                                                           
		                                                                              
	--	Calculate ZScores and insert data into de_subject_microarray_data.  The 'L' 
parameter indicates that the gene expression data will be selected from         
	--	wt_subject_mrna_probeset as part of a Load.                                 
                                                                                
		if dataType = 'R' or dataType = 'L' then                                      
			i2b2_mrna_zscore_calc(TrialID,'L',jobId,dataType,logBase,sourceCD);          
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Calculate Z-Score',0,stepCt,
'Done');                                                                        
			commit;                                                                      
		end if;                                                                       
	                                                                               
	end if;                                                                        
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_process_mrna_data',0,
stepCt,'Done');                                                                 
                                                                                
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
	                                                                               
	select 0 into rtn_code from dual;                                              
                                                                                
	EXCEPTION                                                                      
	--when unmapped_patients then                                                  
	--	cz_write_audit(jobId,databasename,procedurename,'No site_id/subject_id mappe
d to patient_dimension',1,stepCt,'ERROR');                                      
	--	cz_error_handler(jobid,procedurename);                                      
	--	cz_end_audit (jobId,'FAIL');                                                
	when missing_platform then                                                     
		cz_write_audit(jobId,databasename,procedurename,'Platform data missing from on
e or more subject_sample mapping records',1,stepCt,'ERROR');                    
		cz_error_handler(jobid,procedurename);                                        
		cz_end_audit (jobId,'FAIL');                                                  
		select 16 into rtn_code from dual;                                            
	when missing_tissue then                                                       
		cz_write_audit(jobId,databasename,procedurename,'Tissue Type data missing from
 one or more subject_sample mapping records',1,stepCt,'ERROR');                 
		cz_error_handler(jobid,procedurename);                                        
		CZ_END_AUDIT (JOBID,'FAIL');                                                  
		select 16 into rtn_code from dual;                                            
	when unmapped_platform then                                                    
		cz_write_audit(jobId,databasename,procedurename,'Platform not found in de_mrna
_annotation',1,stepCt,'ERROR');                                                 
		CZ_ERROR_HANDLER(JOBID,PROCEDURENAME);                                        
		cz_end_audit (jobId,'FAIL');                                                  
		select 16 into rtn_code from dual;                                            
	when multiple_platform then                                                    
		cz_write_audit(jobId,databasename,procedurename,'Multiple platforms for sample
_cd in lt_src_mrna_subj_samp_map',1,stepCt,'ERROR');                            
		CZ_ERROR_HANDLER(JOBID,PROCEDURENAME);                                        
		cz_end_audit (jobId,'FAIL');                                                  
		select 16 into rtn_code from dual;                                            
	when no_probeset_recs then                                                     
		cz_write_audit(jobId,databasename,procedurename,'Unable to match probesets to 
platform in probeset_deapp',1,stepCt,'ERROR');                                  
		CZ_ERROR_HANDLER(JOBID,PROCEDURENAME);                                        
		cz_end_audit (jobId,'FAIL');                                                  
		select 16 into rtn_code from dual;                                            
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
		select 16 into rtn_code from dual;                                            
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MRNA_ZSCORE_CALC"                   
(                                                                               
  trial_id VARCHAR2                                                             
 ,run_type varchar2 := 'L'                                                      
 ,currentJobID NUMBER := null                                                   
 ,data_type varchar2 := 'R'                                                     
 ,log_base	number := 2                                                          
 ,source_cd	varchar2                                                            
)                                                                               
AS                                                                              
                                                                                
	--	JEA@20111024	New                                                            
	--	JEA@20111116	Remove run_type R (reload) processing                          
	--	JEA@20111209	Removed index drop/all                                         
	--	JEA@20120214	Round all intensity values on insert to de_subject_microarray_d
ata                                                                             
	--	JEA@20120314	Custom for Millennium, added trial_source for partitioning, add
ed source_cd parameter                                                          
                                                                                
  TrialID varchar2(50);                                                         
  sourceCD	varchar2(50);                                                        
  sqlText varchar2(2000);                                                       
  runType varchar2(10);                                                         
  dataType varchar2(10);                                                        
  stgTrial varchar2(50);                                                        
  idxExists number;                                                             
  pExists	number;                                                               
  nbrRecs number;                                                               
  logBase number;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
  --  exceptions                                                                
  invalid_runType exception;                                                    
  trial_mismatch exception;                                                     
  trial_missing exception;                                                      
                                                                                
BEGIN                                                                           
                                                                                
	TrialId := trial_id;                                                           
	runType := run_type;                                                           
	dataType := data_type;                                                         
	logBase := log_base;                                                           
	sourceCd := source_cd;                                                         
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting zscore calc for ' || 
TrialId || ' RunType: ' || runType || ' dataType: ' || dataType,0,stepCt,'Done')
;                                                                               
                                                                                
	if runType != 'L' then                                                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Invalid runType passed - proc
edure exiting',SQL%ROWCOUNT,stepCt,'Done');                                     
		raise invalid_runType;                                                        
	end if;                                                                        
                                                                                
--	For Load, make sure that the TrialId passed as parameter is the same as the t
rial in stg_subject_mrna_data                                                   
--	If not, raise exception                                                      
                                                                                
	if runType = 'L' then                                                          
		select distinct trial_name into stgTrial                                      
		from wt_subject_mrna_probeset;                                                
		                                                                              
		if stgTrial != TrialId then                                                   
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'TrialId not the same as tria
l in wt_subject_mrna_probeset - procedure exiting',SQL%ROWCOUNT,stepCt,'Done'); 
			raise trial_mismatch;                                                        
		end if;                                                                       
	end if;                                                                        
                                                                                
/*	remove Reload processing                                                     
--	For Reload, make sure that the TrialId passed as parameter has data in de_sub
ject_microarray_data                                                            
--	If not, raise exception                                                      
                                                                                
	if runType = 'R' then                                                          
		select count(*) into idxExists                                                
		from de_subject_microarray_data                                               
		where trial_name = TrialId;                                                   
		                                                                              
		if idxExists = 0 then                                                         
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'No data for TrialId in de_su
bject_microarray_data - procedure exiting',SQL%ROWCOUNT,stepCt,'Done');         
			raise trial_missing;                                                         
		end if;                                                                       
	end if;                                                                        
*/                                                                              
                                                                                
--	truncate tmp tables                                                          
                                                                                
	execute immediate('truncate table tm_wz.wt_subject_microarray_logs');          
	execute immediate('truncate table tm_wz.wt_subject_microarray_calcs');         
	execute immediate('truncate table tm_wz.wt_subject_microarray_med');           
	                                                                               
	select count(*)                                                                
	into idxExists                                                                 
	from all_indexes                                                               
	where table_name = 'WT_SUBJECT_MICROARRAY_LOGS'                                
	  and index_name = 'WT_SUBJECT_MRNA_LOGS_I1'                                   
	  and owner = 'TM_WZ';                                                         
		                                                                              
	if idxExists = 1 then                                                          
		execute immediate('drop index tm_wz.wt_subject_mrna_logs_i1');		              
	end if;                                                                        
	                                                                               
	select count(*)                                                                
	into idxExists                                                                 
	from all_indexes                                                               
	where table_name = 'WT_SUBJECT_MICROARRAY_CALCS'                               
	  and index_name = 'WT_SUBJECT_MRNA_CALCS_I1'                                  
	  and owner = 'TM_WZ';                                                         
		                                                                              
	if idxExists = 1 then                                                          
		execute immediate('drop index tm_wz.wt_subject_mrna_calcs_i1');               
	end if;                                                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncate work tables in TM_WZ'
,0,stepCt,'Done');                                                              
	                                                                               
	--	if dataType = L, use intensity_value as log_intensity                       
	--	if dataType = R, always use intensity_value                                 
                                                                                
                                                                                
	if dataType = 'L' then                                                         
/*	Remove Reload processing                                                     
		if runType = 'R' then                                                         
			insert into wt_subject_microarray_logs                                       
			(probeset_id                                                                 
			,intensity_value                                                             
			,assay_id                                                                    
			,log_intensity                                                               
			,patient_id                                                                  
			,sample_id                                                                   
			,subject_id                                                                  
			)                                                                            
			select probeset_id                                                           
				  ,raw_intensity                                                            
				  ,assay_id                                                                 
				  ,log_intensity                                                            
				  ,patient_id                                                               
				  ,sample_id                                                                
				  ,subject_id                                                               
			from de_subject_microarray_data                                              
			where trial_name =  TrialID;                                                 
		else                                                                          
*/                                                                              
			insert into wt_subject_microarray_logs                                       
			(probeset_id                                                                 
			,intensity_value                                                             
			,assay_id                                                                    
			,log_intensity                                                               
			,patient_id                                                                  
		--	,sample_cd                                                                 
		--	,subject_id                                                                
			)                                                                            
			select probeset_id                                                           
				  ,intensity_value                                                          
				  ,assay_id                                                                 
				  ,intensity_value                                                          
				  ,patient_id                                                               
			--	  ,sample_cd                                                              
			--	  ,subject_id                                                             
			from wt_subject_mrna_probeset                                                
			where trial_name = TrialId;                                                  
		--end if;                                                                     
	else                                                                           
	/*	remove Reload processing                                                    
		if runType = 'R' then                                                         
			insert into wt_subject_microarray_logs                                       
			(probeset_id                                                                 
			,intensity_value                                                             
			,assay_id                                                                    
			,log_intensity                                                               
			,patient_id                                                                  
			,sample_id                                                                   
			,subject_id                                                                  
			)                                                                            
			select probeset_id                                                           
				  ,raw_intensity                                                            
				  ,assay_id                                                                 
				  ,log(2,raw_intensity)                                                     
				  ,patient_id                                                               
				  ,sample_id                                                                
				  ,subject_id                                                               
			from de_subject_microarray_data                                              
			where trial_name =  TrialID;                                                 
		else                                                                          
*/                                                                              
			insert into wt_subject_microarray_logs                                       
			(probeset_id                                                                 
			,intensity_value                                                             
			,assay_id                                                                    
			,log_intensity                                                               
			,patient_id                                                                  
		--	,sample_cd                                                                 
		--	,subject_id                                                                
			)                                                                            
			select probeset_id                                                           
				  ,intensity_value                                                          
				  ,assay_id                                                                 
				  ,log(2,intensity_value)                                                   
				  ,patient_id                                                               
		--		  ,sample_cd                                                              
		--		  ,subject_id                                                             
			from wt_subject_mrna_probeset                                                
			where trial_name = TrialId;                                                  
--		end if;                                                                     
	end if;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Loaded data for trial in TM_WZ
 wt_subject_microarray_logs',SQL%ROWCOUNT,stepCt,'Done');                       
                                                                                
	commit;                                                                        
                                                                                
	execute immediate('create index tm_wz.wt_subject_mrna_logs_i1 on tm_wz.wt_subje
ct_microarray_logs (trial_name, probeset_id) nologging  tablespace "INDX"');    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create index on TM_WZ wt_subje
ct_microarray_logs',0,stepCt,'Done');                                           
		                                                                              
--	calculate mean_intensity, median_intensity, and stddev_intensity per experime
nt, probe                                                                       
                                                                                
	insert into wt_subject_microarray_calcs                                        
	(trial_name                                                                    
	,probeset_id                                                                   
	,mean_intensity                                                                
	,median_intensity                                                              
	,stddev_intensity                                                              
	)                                                                              
	select d.trial_name                                                            
		  ,d.probeset_id                                                              
		  ,avg(log_intensity)                                                         
		  ,median(log_intensity)                                                      
		  ,stddev(log_intensity)                                                      
	from wt_subject_microarray_logs d                                              
	group by d.trial_name                                                          
			,d.probeset_id;                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Calculate intensities for tria
l in TM_WZ wt_subject_microarray_calcs',SQL%ROWCOUNT,stepCt,'Done');            
                                                                                
	commit;                                                                        
                                                                                
	execute immediate('create index tm_wz.wt_subject_mrna_calcs_i1 on tm_wz.wt_subj
ect_microarray_calcs (trial_name, probeset_id) nologging tablespace "INDX"');   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create index on TM_WZ wt_subje
ct_microarray_calcs',0,stepCt,'Done');                                          
		                                                                              
-- calculate zscore                                                             
                                                                                
	insert into wt_subject_microarray_med parallel                                 
	(probeset_id                                                                   
	,intensity_value                                                               
	,log_intensity                                                                 
	,assay_id                                                                      
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	,patient_id                                                                    
--	,sample_cd                                                                   
--	,subject_id                                                                  
	)                                                                              
	select d.probeset_id                                                           
		  ,d.intensity_value                                                          
		  ,d.log_intensity                                                            
		  ,d.assay_id                                                                 
		  ,c.mean_intensity                                                           
		  ,c.stddev_intensity                                                         
		  ,c.median_intensity                                                         
		  ,CASE WHEN stddev_intensity=0 THEN 0 ELSE (log_intensity - median_intensity 
) / stddev_intensity END                                                        
		  ,d.patient_id                                                               
	--	  ,d.sample_cd                                                              
	--	  ,d.subject_id                                                             
    from wt_subject_microarray_logs d                                           
		,wt_subject_microarray_calcs c                                                
    where d.probeset_id = c.probeset_id;                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Calculate Z-Score for trial in
 TM_WZ wt_subject_microarray_med',SQL%ROWCOUNT,stepCt,'Done');                  
                                                                                
    commit;                                                                     
                                                                                
/*                                                                              
	select count(*) into nbrRecs                                                   
	from wt_subject_microarray_med;                                                
	                                                                               
	if nbrRecs > 10000000 then                                                     
		i2b2_mrna_index_maint('DROP',,jobId);                                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Drop indexes on DEAPP de_subj
ect_microarray_data',0,stepCt,'Done');                                          
	else                                                                           
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Less than 10M records, index 
drop bypassed',0,stepCt,'Done');                                                
	end if;                                                                        
*/	                                                                             
                                                                                
                                                                                
	insert into de_subject_microarray_data                                         
	(trial_source                                                                  
	,trial_name                                                                    
	,assay_id                                                                      
	,probeset_id                                                                   
	,raw_intensity                                                                 
	,log_intensity                                                                 
	,zscore                                                                        
	,patient_id                                                                    
	--,sample_id                                                                   
	--,subject_id                                                                  
	)                                                                              
	select TrialId || ':' || sourceCD                                              
		  ,TrialId                                                                    
	      ,m.assay_id                                                              
	      ,m.probeset_id                                                           
		  ,round(case when dataType = 'R' then m.intensity_value                      
				when dataType = 'L'                                                         
				then case when logBase = -1 then null else power(logBase, m.log_intensity) e
nd                                                                              
				else null                                                                   
				end,4) as raw_intensity                                                     
	    --  ,decode(dataType,'R',m.intensity_value,'L',power(logBase, m.log_intensi
ty),null)                                                                       
		  ,round(m.log_intensity,4)                                                   
	      ,round(CASE WHEN m.zscore < -2.5 THEN -2.5 WHEN m.zscore >  2.5 THEN  2.5
 ELSE round(m.zscore,5) END,5)                                                  
		  ,m.patient_id                                                               
	--	  ,m.sample_id                                                              
	--	  ,m.subject_id                                                             
	from wt_subject_microarray_med m;                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial in DEAPP
 de_subject_microarray_data',SQL%ROWCOUNT,stepCt,'Done');                       
                                                                                
  	commit;                                                                      
                                                                                
--	add indexes, if indexes were not dropped, procedure will not try and recreate
                                                                                
/*                                                                              
	i2b2_mrna_index_maint('ADD',,jobId);                                           
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Add indexes on DEAPP de_subjec
t_microarray_data',0,stepCt,'Done');                                            
*/                                                                              
	                                                                               
--	cleanup tmp_ files                                                           
                                                                                
	execute immediate('truncate table tm_wz.wt_subject_microarray_logs');          
	execute immediate('truncate table tm_wz.wt_subject_microarray_calcs');         
	execute immediate('truncate table tm_wz.wt_subject_microarray_med');           
                                                                                
   	stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Truncate work tables in TM_WZ'
,0,stepCt,'Done');                                                              
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
                                                                                
  WHEN invalid_runType or trial_mismatch or trial_missing then                  
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
  when OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	                                                                               
END;                                                                            
                                                                                
                                                                                
/*	--	Recreate tmp tables used for calculation of mRNA Zscore if necessary      
                                                                                
create table wt_subject_microarray_logs parallel nologging compress as          
select probeset_id                                                              
	  ,raw_intensity                                                               
	  ,pvalue                                                                      
	  ,refseq                                                                      
	  ,assay_id                                                                    
	  ,patient_id                                                                  
	  ,subject_id                                                                  
	  ,trial_name                                                                  
	  ,timepoint                                                                   
      ,raw_intensity as log_intensity                                           
       from de_subject_microarray_data                                          
	   where 1=2;                                                                  
	                                                                               
create index tmp_microarray_logs_i1 on wt_subject_microarray_logs (trial_name, p
robeset_id);                                                                    
                                                                                
create table wt_subject_microarray_calcs parallel nologging compress as         
select d.trial_name                                                             
	  ,d.probeset_id                                                               
	  ,log_intensity as mean_intensity                                             
	  ,log_intensity as median_intensity                                           
	  ,log_intensity as stddev_intensity                                           
from wt_subject_microarray_logs d                                               
where 1=2;                                                                      
                                                                                
create index tmp_microarray_calcs_i1 on wt_subject_microarray_calcs (trial_name,
 probeset_id);	                                                                 
                                                                                
create table wt_subject_microarray_med parallel nologging compress as           
select d.probeset_id                                                            
	  ,d.raw_intensity                                                             
	  ,d.log_intensity                                                             
	  ,d.assay_id                                                                  
	  ,d.patient_id                                                                
	  ,d.subject_id                                                                
	  ,d.trial_name                                                                
	  ,d.timepoint                                                                 
	  ,d.pvalue                                                                    
	  ,d.refseq                                                                    
	  ,c.mean_intensity                                                            
	  ,c.stddev_intensity                                                          
	  ,c.median_intensity                                                          
	  ,d.log_intensity as zscore                                                   
from wt_subject_microarray_logs d                                               
	 ,wt_subject_microarray_calcs c                                                
where 1=2;                                                                      
                                                                                
create table wt_subject_microarray_mcapped parallel nologging compress as       
select d.probeset_id                                                            
	  ,d.patient_id                                                                
	  ,d.trial_name                                                                
	  ,d.timepoint                                                                 
	  ,d.pvalue                                                                    
	  ,d.refseq                                                                    
	  ,d.subject_id                                                                
	  ,d.raw_intensity                                                             
	  ,d.log_intensity                                                             
	  ,d.assay_id                                                                  
	  ,d.mean_intensity                                                            
	  ,d.stddev_intensity                                                          
	  ,d.median_intensity                                                          
	  ,d.zscore                                                                    
 from wt_subject_microarray_med d                                               
 where 1=2;                                                                     
		                                                                              
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MRNA_INDEX_MAINT"                   
(                                                                               
  run_type 			VARCHAR2 := 'DROP'                                                
 ,tablespace_name	varchar2	:= 'INDX'                                            
 ,currentJobID 		NUMBER := null                                                 
)                                                                               
AS                                                                              
--	Procedure to either drop or create indexes for deapp.de_subject_microarray_da
ta                                                                              
                                                                                
--	JEA@20111020	New                                                             
--	JEA@20111130	Only do local or bitmap index if de_subject_microarray_data is p
artitioned                                                                      
--	JEA@20120226	Added tablespace to indx10, added bitmapCompress to compress ind
exs if not bitmapped                                                            
--	JEA@20120301	Removed indx10, subject_id no longer in de_subject_microarray_da
ta                                                                              
--	JEA@20120406	Added variable for tablespace name                              
--	JEA@20120423	Removed indx5, app code changed to join on assay_id             
--	JEA@20120530	Added indx5 on trial_source if table not partitioned            
                                                                                
  runType	varchar2(100);                                                        
  idxExists	number;                                                             
  pExists	number;                                                               
  localVar	varchar2(20);                                                        
  bitmapVar	varchar2(20);                                                       
  bitmapCompress	varchar2(20);                                                  
  tableSpace	varchar2(50);                                                      
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
	runType := upper(run_type);                                                    
	tableSpace := upper(tablespace_name);                                          
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
                                                                                
	--	Determine if de_subject_microarray_data is partitioned, if yes, set localVar
 to local                                                                       
  	select count(*)                                                              
	into pExists                                                                   
	from all_tables                                                                
	where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                                
	  and partitioned = 'YES';                                                     
	                                                                               
	if pExists = 0 then                                                            
		localVar := null;                                                             
		bitmapVar := null;                                                            
		bitmapCompress := 'compress';                                                 
	else                                                                           
		localVar := 'local';                                                          
		bitmapVar := 'bitmap';                                                        
		bitmapCompress := null;                                                       
	end if;                                                                        
                                                                                
	if runType = 'DROP' then                                                       
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Start de_subject_microarray_d
ata index drop',0,stepCt,'Done');                                               
		--	drop the indexes                                                           
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX1'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx1');               
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx1
',0,stepCt,'Done');                                                             
		end if;                                                                       
		                                                                              
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX2'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx2');               
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx2
',0,stepCt,'Done');                                                             
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX3'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx3');               
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx3
',0,stepCt,'Done');                                                             
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX4'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx4');               
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx4
',0,stepCt,'Done');                                                             
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX5'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx5');               
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx5
',0,stepCt,'Done');                                                             
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX10'                                 
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 1 then                                                         
			execute immediate('drop index deapp.de_microarray_data_idx10');              
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Drop de_microarray_data_idx1
0',0,stepCt,'Done');                                                            
		end if;                                                                       
						                                                                          
	else                                                                           
		--	add indexes                                                                
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Start de_subject_microarray_d
ata index create',0,stepCt,'Done');                                             
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX1'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 0 then                                                         
			execute immediate('create index deapp.de_microarray_data_idx1 on deapp.de_sub
ject_microarray_data(trial_name, assay_id, probeset_id) ' || localVar || ' nolog
ging compress tablespace "' || tableSpace || '"');                              
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_id
x1',0,stepCt,'Done');                                                           
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX2'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 0 then		                                                       
			execute immediate('create index deapp.de_microarray_data_idx2 on deapp.de_sub
ject_microarray_data(assay_id, probeset_id) ' || localVar || ' nologging compres
s tablespace "' || tableSpace || '"');                                          
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_id
x2',0,stepCt,'Done');                                                           
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX3'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 0 then		                                                       
			execute immediate('create ' || bitmapVar || ' index deapp.de_microarray_data_
idx3 on deapp.de_subject_microarray_data(assay_id) ' || localVar || ' nologging 
' || bitmapCompress || ' tablespace "' || tableSpace || '"');                   
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_id
x3',0,stepCt,'Done');                                                           
		end if;                                                                       
				                                                                            
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX4'                                  
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 0 then                                                         
			execute immediate('create ' || bitmapVar || ' index deapp.de_microarray_data_
idx4 on deapp.de_subject_microarray_data(probeset_id) ' || localVar || ' nologgi
ng ' || bitmapCompress || ' tablespace "' || tableSpace || '"');                
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_id
x4',0,stepCt,'Done');                                                           
		end if;                                                                       
                                                                                
		if pExists = 0 then                                                           
			--	only create this index if the table is not partitioned.  This is the colum
n that the table would be partitioned on                                        
			                                                                             
			select count(*)                                                              
			into idxExists                                                               
			from all_indexes                                                             
			where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                              
			  and index_name = 'DE_MICROARRAY_DATA_IDX5'                                 
			  and owner = 'DEAPP';                                                       
			                                                                             
			if idxExists = 0 then                                                        
				execute immediate('create index deapp.de_microarray_data_idx5 on deapp.de_su
bject_microarray_data(trial_source) ' || localVar || ' nologging ' || bitmapComp
ress || ' tablespace "' || tableSpace || '"');                                  
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_i
dx5',0,stepCt,'Done');                                                          
			end if;                                                                      
		end if;                                                                       
                                                                                
/*		not used                                                                    
	                                                                               
		select count(*)                                                               
		into idxExists                                                                
		from all_indexes                                                              
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and index_name = 'DE_MICROARRAY_DATA_IDX10'                                 
		  and owner = 'DEAPP';                                                        
		                                                                              
		if idxExists = 0 then                                                         
			execute immediate('create index deapp.de_microarray_data_idx10 on deapp.de_su
bject_microarray_data(assay_id, subject_id, probeset_id, zscore) ' || localVar |
| ' nologging compress tablespace "' || tableSpace || '"');                     
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Create de_microarray_data_id
x10',0,stepCt,'Done');                                                          
		end if;                                                                       
*/							                                                                       
	end if;                                                                        
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MRNA_DATA_EXTRNL_LT"                
(                                                                               
  trial_id 		IN	VARCHAR2                                                        
 ,currentJobID	IN	NUMBER := null                                                
)                                                                               
AS                                                                              
                                                                                
	--	JEA@20111028	New, loads MRNA data from external table to landing zone tempor
ary table                                                                       
                                                                                
  topNode		VARCHAR2(2000);                                                      
  topLevel		number(10,0);                                                       
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
  study_name	varchar2(2000);                                                    
  TrialID		varchar2(100);                                                       
  secureStudy	varchar2(200);                                                    
  etlDate		date;                                                                
  tPath			varchar2(2000);                                                       
  pCount		int;                                                                  
  rtnCode		int;                                                                 
                                                                                
    --Audit variables                                                           
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
                                                                                
BEGIN                                                                           
                                                                                
	TrialID := upper(trial_id);                                                    
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
	                                                                               
	select sysdate into etlDate from dual;                                         
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 0;                                                                   
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_clinical_data_extrn
l_lt',0,stepCt,'Done');                                                         
	                                                                               
	--	truncate landing zone work table                                            
	                                                                               
	execute immediate('truncate table tm_lz.lt_src_mrna_data');                    
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table lt_src_mrna_dat
a',0,stepCt,'Done');                                                            
		                                                                              
	--	Insert data to lt_src_mrna_data                                             
	                                                                               
	insert into lt_src_mrna_data                                                   
	(trial_name                                                                    
	,probeset                                                                      
	,expr_id                                                                       
	,intensity_value                                                               
	)                                                                              
	select TrialId                                                                 
		  ,probeset                                                                   
		  ,expr_id                                                                    
		  ,intensity_value                                                            
	from mrna_data_extrnl;                                                         
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data into lt_src_mrna_d
ata',SQL%ROWCOUNT,stepCt,'Done');                                               
	commit;                                                                        
	                                                                               
	--	truncate landing zone work table for subject_sample mapping                 
	                                                                               
	execute immediate('truncate table tm_lz.lt_src_mrna_subj_samp_map');           
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table lt_src_mrna_sub
j_samp_map',0,stepCt,'Done');                                                   
		                                                                              
	--	insert data to lt_src_mrna_subj_samp_map                                    
	                                                                               
	insert into lt_src_mrna_subj_samp_map                                          
	(trial_name                                                                    
	,site_id                                                                       
	,subject_id                                                                    
	,sample_cd                                                                     
	,platform                                                                      
	,tissue_type                                                                   
	,attribute_1                                                                   
	,attribute_2                                                                   
	,category_cd                                                                   
	)                                                                              
	select Trial_id                                                                
		  ,site_id                                                                    
		  ,subject_id                                                                 
		  ,sample_cd                                                                  
		  ,platform                                                                   
		  ,tissue_type                                                                
		  ,attribute_1                                                                
		  ,attribute_2                                                                
		  ,category_cd                                                                
	from mrna_subj_sample_map_extrnl;                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data into lt_src_mrna_s
ubj_samp_map',SQL%ROWCOUNT,stepCt,'Done');                                      
	commit;	                                                                       
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_clinical_data_extrnl_
lt',0,stepCt,'Done');                                                           
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	if newJobFlag = 1                                                              
	then                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	end if;                                                                        
                                                                                
	rtnCode := 0;                                                                  
                                                                                
	exception                                                                      
	when others then                                                               
    --Handle errors.                                                            
		cz_error_handler (jobID, procedureName);                                      
    --End Proc                                                                  
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;                                                                
	                                                                               
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MOVE_STUDY"                         
(                                                                               
  old_path VARCHAR2,                                                            
  new_path VARCHAR2,                                                            
 -- topNode	varchar2,                                                           
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
                                                                                
  -------------------------------------------------------------                 
  --	I2B2_MOVE_STUDY is used to move an entire study to a new location in the on
tology                                                                          
  --	                                                                           
  --	JEA@20120127	New, cloned from i2b2_move_node                               
  --	JEA@20120328	Fixed parent_concept_path of top-node                         
                                                                                
  -------------------------------------------------------------                 
                                                                                
	stepCt := 0;                                                                   
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
	cz_start_audit (procedureName, databaseName, jobID);                           
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_move_node',0,stepCt
,'Done');                                                                       
	                                                                               
	select parse_nth_value(new_path, 2, '\') into root_node from dual;             
	                                                                               
	select c_hlevel into root_level                                                
	from table_access                                                              
	where c_name = root_node;                                                      
	                                                                               
	if old_path != ''  or old_path != '%' or new_path != ''  or new_path != '%'    
	then                                                                           
      --CONCEPT DIMENSION                                                       
		update concept_dimension                                                      
		set CONCEPT_PATH = replace(concept_path, old_path, new_path)                  
		where concept_path like old_path || '%';                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update concept_dimension with
 new path',SQL%ROWCOUNT,stepCt,'Done');                                         
		COMMIT;                                                                       
                                                                                
		--I2B2                                                                        
		update i2b2                                                                   
		set c_fullname = replace(c_fullname, old_path, new_path)                      
			,c_dimcode = replace(c_fullname, old_path, new_path)                         
			,c_tooltip = replace(c_fullname, old_path, new_path)                         
			,c_hlevel =  (length(replace(c_fullname, old_path, new_path)) - nvl(length(re
place(replace(c_fullname, old_path, new_path), '\')),0)) / length('\') - 2 + roo
t_level                                                                         
		where c_fullname like old_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new path',SQ
L%ROWCOUNT,stepCt,'Done');                                                      
		COMMIT;                                                                       
		                                                                              
		--	concept_counts                                                             
		                                                                              
		update concept_counts                                                         
		set concept_path = replace(concept_path, old_path, new_path)                  
		   ,parent_concept_path = replace(parent_concept_path, old_path, new_path)    
		where concept_path like old_path || '%';                                      
		                                                                              
		--	update parent_concept_path for new_path (replace doesn't work)             
		update concept_counts                                                         
		set parent_concept_path=ltrim(SUBSTR(concept_path, 1,instr(concept_path, '\',-
1,2)))                                                                          
		where concept_path = new_path;                                                
		                                                                              
		--	fill in any upper levels                                                   
		                                                                              
		i2b2_fill_in_tree(null, new_path, jobID);                                     
		                                                                              
/*                                                                              
		--update level data                                                           
		UPDATE I2B2                                                                   
		set c_hlevel = (length(c_fullname) - nvl(length(replace(c_fullname, '\')),0)) 
/ length('\') - 2 + root_level                                                  
		where c_fullname like new_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new level',S
QL%ROWCOUNT,stepCt,'Done');                                                     
		COMMIT;                                                                       
		                                                                              
		--Update tooltip and dimcode                                                  
		update i2b2                                                                   
		set c_dimcode = c_fullname,                                                   
		c_tooltip = c_fullname                                                        
		where c_fullname like new_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new dimcode 
and tooltip',SQL%ROWCOUNT,stepCt,'Done');                                       
		COMMIT;                                                                       
                                                                                
		if topNode != '' then                                                         
			i2b2_fill_in_tree                                                            
			i2b2_create_concept_counts(topNode,jobId);                                   
		end if;                                                                       
*/                                                                              
	end if;                                                                        
	                                                                               
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
		                                                                              
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MOVE_NODE"                          
(                                                                               
  old_path VARCHAR2,                                                            
  new_path VARCHAR2,                                                            
  topNode	varchar2,                                                             
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
                                                                                
  -------------------------------------------------------------                 
  -- Add a tree node in I2b2                                                    
  -- KCR@20090519 - First Rev                                                   
  --	JEA@20111212	Added auditing, recreate concept_counts for topNode           
  -------------------------------------------------------------                 
                                                                                
	stepCt := 0;                                                                   
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
	cz_start_audit (procedureName, databaseName, jobID);                           
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_move_node',0,stepCt
,'Done');                                                                       
	                                                                               
	select parse_nth_value(topNode, 2, '\') into root_node from dual;              
	                                                                               
	select c_hlevel into root_level                                                
	from table_access                                                              
	where c_name = root_node;                                                      
	                                                                               
	if old_path != ''  or old_path != '%' or new_path != ''  or new_path != '%'    
	then                                                                           
      --CONCEPT DIMENSION                                                       
		update concept_dimension                                                      
		set CONCEPT_PATH = replace(concept_path, old_path, new_path)                  
		where concept_path like old_path || '%';                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update concept_dimension with
 new path',SQL%ROWCOUNT,stepCt,'Done');                                         
		COMMIT;                                                                       
                                                                                
		--I2B2                                                                        
		update i2b2                                                                   
		set c_fullname = replace(c_fullname, old_path, new_path)                      
		where c_fullname like old_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new path',SQ
L%ROWCOUNT,stepCt,'Done');                                                      
		COMMIT;                                                                       
                                                                                
		--update level data                                                           
		UPDATE I2B2                                                                   
		set c_hlevel = (length(c_fullname) - nvl(length(replace(c_fullname, '\')),0)) 
/ length('\') - 2 + root_level                                                  
		where c_fullname like new_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new level',S
QL%ROWCOUNT,stepCt,'Done');                                                     
		COMMIT;                                                                       
		                                                                              
		--Update tooltip and dimcode                                                  
		update i2b2                                                                   
		set c_dimcode = c_fullname,                                                   
		c_tooltip = c_fullname                                                        
		where c_fullname like new_path || '%';                                        
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Update i2b2 with new dimcode 
and tooltip',SQL%ROWCOUNT,stepCt,'Done');                                       
		COMMIT;                                                                       
                                                                                
		--if topNode != '' then                                                       
		--	i2b2_create_concept_counts(topNode,jobId);                                 
		--end if;                                                                     
	end if;                                                                        
	                                                                               
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
		                                                                              
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MOVE_ANALYSIS_TO_PROD_DC"           
(i_etl_id        number    := -1                                                
,i_job_id        number    := null                                              
)                                                                               
AS                                                                              
                                                                                
    --Audit variables                                                           
    newJobFlag     INTEGER(1);                                                  
    databaseName     VARCHAR(100);                                              
    procedureName VARCHAR(100);                                                 
    jobID         number(18,0);                                                 
    stepCt         number(18,0);                                                
                                                                                
    v_etl_id                    number(18,0);                                   
    v_bio_assay_analysis_id        number(18,0);                                
    v_data_type                    varchar2(50);                                
    v_sqlText                    varchar2(2000);                                
    v_exists                    int;                                            
    v_GWAS_staged                int;                                           
    v_EQTL_staged                int;                                           
                                                                                
    type stage_rec  is record                                                   
    (bio_assay_analysis_id        number(18,0)                                  
    ,etl_id                        number(18,0)                                 
    ,study_id                    varchar2(500)                                  
    ,data_type                    varchar2(50)                                  
    ,orig_data_type                varchar2(50)                                 
    ,analysis_name                varchar2(1000)                                
    );                                                                          
                                                                                
    type stage_table is table of stage_rec;                                     
    stage_array stage_table;                                                    
                                                                                
    type stage_table_names_rec is record                                        
    (table_name                    varchar2(500)                                
    );                                                                          
                                                                                
    type stage_table_names is table of stage_table_names_rec;                   
    stage_table_array stage_table_names;                                        
                                                                                
    no_staged_data    exception;                                                
                                                                                
    BEGIN                                                                       
                                                                                
    --Set Audit Parameters                                                      
    newJobFlag := 0; -- False (Default)                                         
    jobID := -1;                                                                
                                                                                
    SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;
                                                                                
    procedureName := $$PLSQL_UNIT;                                              
                                                                                
    --Audit JOB Initialization                                                  
    --If Job ID does not exist, then this is a single procedure run and we need 
to create it                                                                    
    IF(jobID IS NULL or jobID < 1)                                              
    THEN                                                                        
        newJobFlag := 1; -- True                                                
        cz_start_audit (procedureName, databaseName, jobID);                    
    END IF;                                                                     
                                                                                
    stepCt := 1;                                                                
    cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_move_analysis
_to_prod',0,stepCt,'Done');                                                     
                                                                                
    --    load staged analysis to array                                         
                                                                                
    select baa.bio_assay_analysis_id                                            
          ,lz.etl_id                                                            
          ,lz.study_id                                                          
          ,case when lz.data_type = 'Metabolic GWAS' then 'GWAS' else lz.data_ty
pe end as data_type                                                             
          ,lz.data_type as orig_data_type                                       
          ,lz.analysis_name                                                     
    bulk collect into stage_array                                               
    from tm_lz.lz_src_analysis_metadata lz                                      
        ,biomart.bio_assay_analysis baa                                         
    where lz.status = 'STAGED'                                                  
      and lz.study_id = baa.etl_id                                              
      and lz.etl_id = baa.etl_id_source                                         
      and case when i_etl_id = -1 then 1                                        
               when lz.etl_id = i_etl_id then 1                                 
               else 0 end = 1;                                                  
                                                                                
    v_exists := SQL%ROWCOUNT;                                                   
                                                                                
    if v_exists = 0 then                                                        
        raise no_staged_data;                                                   
    end if;                                                                     
                                                                                
    --    set variables if staged data contains GWAS and/or EQTL data           
                                                                                
    v_GWAS_staged := 0;                                                         
    v_EQTL_staged := 0;                                                         
                                                                                
    for i in stage_array.first .. stage_array.last                              
    loop                                                                        
        if stage_array(i).data_type = 'GWAS' then                               
            v_GWAS_staged := 1;                                                 
        end if;                                                                 
                                                                                
        if stage_array(i).data_type = 'EQTL' then                               
            v_EQTL_staged := 1;                                                 
        end if;                                                                 
                                                                                
    end loop;                                                                   
                                                                                
    --    drop indexes if loading GWAS data                                     
                                                                                
    if v_GWAS_staged = 1 then                                                   
        select count(*) into v_exists                                           
        from all_indexes                                                        
        where owner = 'BIOMART'                                                 
          and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                            
          and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_PK';                        
                                                                                
        if v_exists > 0 then                                                    
            execute immediate('drop index biomart.bio_assay_analysis_gwas_pk'); 
        end if;                                                                 
                                                                                
        select count(*) into v_exists                                           
        from all_indexes                                                        
        where owner = 'BIOMART'                                                 
          and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                            
          and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_IDX2';                      
                                                                                
        if v_exists > 0 then                                                    
            execute immediate('drop index biomart.bio_assay_analysis_gwas_idx2')
;                                                                               
        end if;                                                                 
    end if;                                                                     
                                                                                
    --    delete any existing data in bio_assay_analysis_gwas and bio_assay_anal
ysis_eqtl                                                                       
                                                                                
    if v_GWAS_staged = 1 then                                                   
        delete from biomart.bio_assay_analysis_gwas g                           
        where g.bio_assay_analysis_id in                                        
             (select x.bio_assay_analysis_id                                    
              from tm_lz.lz_src_analysis_metadata t                             
                  ,biomart.bio_assay_analysis x                                 
              where t.status = 'STAGED'                                         
                and t.data_type in ('GWAS','Metabolic GWAS')                    
                and t.study_id = x.etl_id                                       
                and t.etl_id = x.etl_id_source                                  
                and case when i_etl_id = -1 then 1                              
                         when t.etl_id = i_etl_id then 1                        
                         else 0 end = 1);                                       
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete exising data for
 staged analyses from BIOMART.BIO_ASSAY_ANALYSIS_GWAS',SQL%ROWCOUNT,stepCt,'Done
');                                                                             
        commit;                                                                 
    end if;                                                                     
                                                                                
    if v_EQTL_staged = 1 then                                                   
        delete from biomart.bio_assay_analysis_eqtl g                           
        where g.bio_assay_analysis_id in                                        
             (select x.bio_assay_analysis_id                                    
              from tm_lz.lz_src_analysis_metadata t                             
                  ,biomart.bio_assay_analysis x                                 
              where t.status = 'STAGED'                                         
                and t.data_type = 'EQTL'                                        
                and t.study_id = x.etl_id                                       
                and t.etl_id = x.etl_id_source                                  
                and case when i_etl_id = -1 then 1                              
                         when t.etl_id = i_etl_id then 1                        
                         else 0 end = 1);                                       
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Delete exising data for
 staged analyses from BIOMART.BIO_ASSAY_ANALYSIS_EQTL',SQL%ROWCOUNT,stepCt,'Done
');                                                                             
        commit;                                                                 
    end if;                                                                     
                                                                                
    if v_GWAS_staged = 1 then                                                   
        select count(*) into v_exists                                           
        from all_indexes                                                        
        where owner = 'BIOMART'                                                 
          and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                            
          and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_IDX1';                      
                                                                                
        if v_exists > 0 then                                                    
            execute immediate('drop index biomart.BIO_ASSAY_ANALYSIS_GWAS_IDX1')
;                                                                               
        end if;                                                                 
    end if;                                                                     
                                                                                
    for i in stage_array.first .. stage_array.last                              
    loop                                                                        
                                                                                
        cz_write_audit(jobId,databaseName,procedureName,'Loading ' || stage_arra
y(i).study_id || ' ' || stage_array(i).orig_data_type || ' ' ||                 
                       stage_array(i).analysis_name,0,stepCt,'Done');           
                                                                                
        v_etl_id := stage_array(i).etl_id;                                      
        v_bio_assay_analysis_id := stage_array(i).bio_assay_analysis_id;        
        v_data_type := stage_array(i).data_type;                                
                                                                                
        if v_data_type = 'EQTL' then                                            
            insert into biomart.bio_assay_analysis_eqtl                         
            (bio_asy_analysis_eqtl_id                                           
            ,bio_assay_analysis_id                                              
            ,rs_id                                                              
            ,gene                                                               
            ,p_value                                                            
            ,p_value_char                                                       
            ,cis_trans                                                          
            ,distance_from_gene                                                 
            ,etl_id                                                             
            ,ext_data                                                           
            ,log_p_value)                                                       
            select bio_asy_analysis_eqtl_id                                     
                  ,bio_assay_analysis_id                                        
                  ,rs_id                                                        
                  ,gene                                                         
                  ,to_binary_double(p_value_char)                               
                  ,p_value_char                                                 
                  ,cis_trans                                                    
                  ,distance_from_gene                                           
                  ,etl_id                                                       
                  ,ext_data                                                     
                  ,log(10,to_binary_double(p_value_char))*-1                    
            from biomart_stage.bio_assay_analysis_eqtl                          
            where bio_assay_analysis_id = v_bio_assay_analysis_id;              
            stepCt := stepCt + 1;                                               
            cz_write_audit(jobId,databaseName,procedureName,'Insert data for ana
lysis from BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt
,'Done');                                                                       
                                                                                
            commit;                                                             
        else                                                                    
            insert into biomart.bio_assay_analysis_gwas                         
            (bio_asy_analysis_gwas_id                                           
            ,bio_assay_analysis_id                                              
            ,rs_id                                                              
            ,p_value                                                            
            ,p_value_char                                                       
            ,etl_id                                                             
            ,ext_data                                                           
            ,log_p_value)                                                       
            select bio_asy_analysis_gwas_id                                     
                  ,bio_assay_analysis_id                                        
                  ,rs_id                                                        
                  ,to_binary_double(p_value_char)                               
                  ,p_value_char                                                 
                  ,etl_id                                                       
                  ,ext_data                                                     
                  ,log(10,to_binary_double(p_value_char))*-1                    
            from biomart_stage.bio_assay_analysis_gwas                          
            where bio_assay_analysis_id = v_bio_assay_analysis_id;              
            stepCt := stepCt + 1;                                               
            cz_write_audit(jobId,databaseName,procedureName,'Insert data for ana
lysis from BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt
,'Done');                                                                       
            commit;                                                             
        end if;                                                                 
                                                                                
        if i_etl_id > -1 then                                                   
                                                                                
            v_sqlText := 'delete from biomart_stage.bio_assay_analysis_' || v_da
ta_type ||                                                                      
                         ' where bio_assay_analysis_id = ' || to_char(v_bio_assa
y_analysis_id);                                                                 
            --dbms_output.put_line(v_sqlText);                                  
            execute immediate(v_sqlText);                                       
            stepCt := stepCt + 1;                                               
            cz_write_audit(jobId,databaseName,procedureName,'Delete data for ana
lysis from BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt
,'Done');                                                                       
            commit;                                                             
        end if;                                                                 
                                                                                
        update tm_lz.lz_src_analysis_metadata                                   
        set status='PRODUCTION'                                                 
        where etl_id = v_etl_id;                                                
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Set status to PRODUCTIO
N in tm_lz.lz_src_analysis_metadata',SQL%ROWCOUNT,stepCt,'Done');               
        commit;                                                                 
                                                                                
    end loop;                                                                   
                                                                                
    if i_etl_id = -1 then                                                       
                                                                                
        select table_name                                                       
        bulk collect into stage_table_array                                     
        from all_tables                                                         
        where owner = 'BIOMART_STAGE'                                           
          and table_name like 'BIO_ASSAY_ANALYSIS%';                            
                                                                                
        for i in stage_table_array.first .. stage_table_array.last              
        loop                                                                    
            v_sqlText := 'truncate table biomart_stage.' || stage_table_array(i)
.table_name;                                                                    
            --dbms_output.put_line(v_sqlText);                                  
            execute immediate(v_sqlText);                                       
            stepCt := stepCt + 1;                                               
            cz_write_audit(jobId,databaseName,procedureName,'Truncated biomart_s
tage.' || stage_table_array(i).table_name,0,stepCt,'Done');                     
        end loop;                                                               
    end if;                                                                     
                                                                                
    --    recreate GWAS indexes if needed                                       
                                                                                
    if v_GWAS_staged = 1 then                                                   
        execute immediate('create index biomart.bio_assay_analysis_gwas_idx1 on 
biomart.bio_assay_analysis_gwas (bio_assay_analysis_id) tablespace "INDX"');    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay
_analysis_gwas_idx1',0,stepCt,'Done');                                          
        execute immediate('create index biomart.bio_assay_analysis_gwas_idx2 on 
biomart.bio_assay_analysis_gwas (rs_id) tablespace "INDX"');                    
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay
_analysis_gwas_idx2',0,stepCt,'Done');                                          
        execute immediate('create unique index biomart.bio_assay_analysis_gwas_p
k on biomart.bio_assay_analysis_gwas (bio_asy_analysis_gwas_id) tablespace "INDX
"');                                                                            
        stepCt := stepCt + 1;                                                   
        cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay
_analysis_gwas_pk',0,stepCt,'Done');                                            
                                                                                
                                                                                
    I2B2_LOAD_EQTL_TOP50();                                                     
    stepCt := stepCt + 1;                                                       
        cz_write_audit(jobId,databaseName,procedureName,'Created top 50 EQTL',0,
stepCt,'Done');                                                                 
    I2B2_LOAD_GWAS_TOP50();                                                     
    stepCt := stepCt + 1;                                                       
        cz_write_audit(jobId,databaseName,procedureName,'Created top 50 GWAS',0,
stepCt,'Done');                                                                 
                                                                                
    end if;                                                                     
                                                                                
    --Insert data_count to bio_assay_analysis table. added by Haiyan Zhang 01/22
/2013                                                                           
    for i in stage_array.first .. stage_array.last                              
    loop                                                                        
        v_bio_assay_analysis_id := stage_array(i).bio_assay_analysis_id;        
        v_data_type := stage_array(i).data_type;                                
        if v_data_type = 'EQTL' then                                            
                                                                                
            update biomart.bio_assay_analysis set data_count=(select count(*) fr
om biomart.bio_assay_analysis_eqtl                                              
            where bio_assay_analysis_eqtl.bio_assay_analysis_id=v_bio_assay_anal
ysis_id)                                                                        
            where bio_assay_analysis.bio_assay_analysis_id=v_bio_assay_analysis_
id;                                                                             
            stepCt := stepCt +1;                                                
            cz_write_audit(jobId,databaseName,procedureName,'Update data_count f
or analysis ' || v_data_type,SQL%ROWCOUNT,stepCt,'Done');                       
            commit;                                                             
        else                                                                    
                                                                                
            update biomart.bio_assay_analysis set data_count=(select count(*) fr
om biomart.bio_assay_analysis_gwas                                              
            where bio_assay_analysis_gwas.bio_assay_analysis_id=v_bio_assay_anal
ysis_id)                                                                        
            where bio_assay_analysis.bio_assay_analysis_id=v_bio_assay_analysis_
id;                                                                             
            stepCt := stepCt +1;                                                
            cz_write_audit(jobId,databaseName,procedureName,'Update data_count f
or analysis ' || v_data_type,SQL%ROWCOUNT,stepCt,'Done');                       
            commit;                                                             
        end if;                                                                 
    end loop;                                                                   
    ---end added by Haiyan Zhang                                                
                                                                                
    cz_write_audit(jobId,databaseName,procedureName,'End i2b2_move_analysis_to_p
rod',0,stepCt,'Done');                                                          
    stepCt := stepCt + 1;                                                       
                                                                                
    cz_end_audit(jobId, 'Success');                                             
                                                                                
    exception                                                                   
    when no_staged_data then                                                    
        cz_write_audit(jobId, databaseName, procedureName, 'No staged data - run
 terminating normally',0,stepCt,'Done');                                        
        cz_end_audit(jobId, 'Success');                                         
    when others then                                                            
    --Handle errors.                                                            
        cz_error_handler (jobID, procedureName);                                
    --End Proc                                                                  
        cz_end_audit (jobID, 'FAIL');                                           
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_MOVE_ANALYSIS_TO_PROD"              
(i_etl_id		number	:= -1                                                         
,i_job_id		number	:= null                                                       
)                                                                               
AS                                                                              
                                                                                
    --Audit variables                                                           
	newJobFlag 	INTEGER(1);                                                        
	databaseName 	VARCHAR(100);                                                    
	procedureName VARCHAR(100);                                                    
	jobID 		number(18,0);                                                          
	stepCt 		number(18,0);                                                         
	                                                                               
	v_etl_id					number(18,0);                                                     
	v_bio_assay_analysis_id		number(18,0);                                         
	v_data_type					varchar2(50);                                                  
	v_sqlText					varchar2(2000);                                                  
	v_exists					int;                                                              
	v_GWAS_staged				int;                                                          
	v_EQTL_staged				int;                                                          
	                                                                               
	type stage_rec  is record                                                      
	(bio_assay_analysis_id		number(18,0)                                           
	,etl_id						number(18,0)                                                      
	,study_id					varchar2(500)                                                    
	,data_type					varchar2(50)                                                    
	,orig_data_type				varchar2(50)                                                
	,analysis_name				varchar2(1000)                                               
	);                                                                             
                                                                                
	type stage_table is table of stage_rec;                                        
	stage_array stage_table;                                                       
	                                                                               
	type stage_table_names_rec is record                                           
	(table_name					varchar2(500)                                                  
	);                                                                             
	                                                                               
	type stage_table_names is table of stage_table_names_rec;                      
	stage_table_array stage_table_names;                                           
	                                                                               
	no_staged_data	exception;                                                      
	                                                                               
	BEGIN	                                                                         
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := -1;                                                                   
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 1;	                                                                  
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_move_analysis_to
_prod',0,stepCt,'Done');                                                        
	                                                                               
	--	load staged analysis to array                                               
	                                                                               
	select baa.bio_assay_analysis_id                                               
		  ,lz.etl_id                                                                  
		  ,lz.study_id                                                                
		  ,case when lz.data_type = 'Metabolic GWAS' then 'GWAS' else lz.data_type end
 as data_type                                                                   
		  ,lz.data_type as orig_data_type                                             
		  ,lz.analysis_name                                                           
	bulk collect into stage_array                                                  
	from tm_lz.lz_src_analysis_metadata lz                                         
		,biomart.bio_assay_analysis baa                                               
	where lz.status = 'STAGED'                                                     
	  and lz.study_id = baa.etl_id                                                 
	  and lz.etl_id = baa.etl_id_source                                            
	  and case when i_etl_id = -1 then 1                                           
			   when lz.etl_id = i_etl_id then 1                                          
			   else 0 end = 1;                                                           
			                                                                             
	v_exists := SQL%ROWCOUNT;                                                      
	                                                                               
	if v_exists = 0 then                                                           
		raise no_staged_data;                                                         
	end if;                                                                        
                                                                                
	--	set variables if staged data contains GWAS and/or EQTL data                 
	                                                                               
	v_GWAS_staged := 0;                                                            
	v_EQTL_staged := 0;                                                            
	                                                                               
	for i in stage_array.first .. stage_array.last                                 
	loop	                                                                          
		if stage_array(i).data_type = 'GWAS' then                                     
			v_GWAS_staged := 1;                                                          
		end if;                                                                       
		                                                                              
		if stage_array(i).data_type = 'EQTL' then                                     
			v_EQTL_staged := 1;                                                          
		end if;	                                                                      
		                                                                              
	end loop;                                                                      
	                                                                               
	--	drop indexes if loading GWAS data                                           
	                                                                               
	if v_GWAS_staged = 1 then                                                      
		select count(*) into v_exists                                                 
		from all_indexes                                                              
		where owner = 'BIOMART'                                                       
		  and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                                  
		  and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_PK';                              
		                                                                              
		if v_exists > 0 then                                                          
			execute immediate('drop index biomart.bio_assay_analysis_gwas_pk');          
		end if;                                                                       
                                                                                
		select count(*) into v_exists                                                 
		from all_indexes                                                              
		where owner = 'BIOMART'                                                       
		  and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                                  
		  and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_IDX2';                            
		                                                                              
		if v_exists > 0 then                                                          
			execute immediate('drop index biomart.bio_assay_analysis_gwas_idx2');        
		end if;		                                                                     
	end if;                                                                        
                                                                                
	--	delete any existing data in bio_assay_analysis_gwas and bio_assay_analysis_e
qtl                                                                             
			                                                                             
	if v_GWAS_staged = 1 then                                                      
		delete from biomart.bio_assay_analysis_gwas g                                 
		where g.bio_assay_analysis_id in                                              
			 (select x.bio_assay_analysis_id                                             
			  from tm_lz.lz_src_analysis_metadata t                                      
				  ,biomart.bio_assay_analysis x                                             
			  where t.status = 'STAGED'                                                  
				and t.data_type in ('GWAS','Metabolic GWAS')                                
				and t.study_id = x.etl_id                                                   
				and t.etl_id = x.etl_id_source                                              
				and case when i_etl_id = -1 then 1                                          
						 when t.etl_id = i_etl_id then 1                                          
						 else 0 end = 1);                                                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete exising data for stage
d analyses from BIOMART.BIO_ASSAY_ANALYSIS_GWAS',SQL%ROWCOUNT,stepCt,'Done');   
		commit;	                                                                      
	end if;                                                                        
                                                                                
	if v_EQTL_staged = 1 then                                                      
		delete from biomart.bio_assay_analysis_eqtl g                                 
		where g.bio_assay_analysis_id in                                              
			 (select x.bio_assay_analysis_id                                             
			  from tm_lz.lz_src_analysis_metadata t                                      
				  ,biomart.bio_assay_analysis x                                             
			  where t.status = 'STAGED'                                                  
				and t.data_type = 'EQTL'                                                    
				and t.study_id = x.etl_id                                                   
				and t.etl_id = x.etl_id_source                                              
				and case when i_etl_id = -1 then 1                                          
						 when t.etl_id = i_etl_id then 1                                          
						 else 0 end = 1);                                                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete exising data for stage
d analyses from BIOMART.BIO_ASSAY_ANALYSIS_EQTL',SQL%ROWCOUNT,stepCt,'Done');   
		commit;	                                                                      
	end if;                                                                        
	                                                                               
	if v_GWAS_staged = 1 then                                                      
		select count(*) into v_exists                                                 
		from all_indexes                                                              
		where owner = 'BIOMART'                                                       
		  and table_name = 'BIO_ASSAY_ANALYSIS_GWAS'                                  
		  and index_name = 'BIO_ASSAY_ANALYSIS_GWAS_IDX1';                            
		                                                                              
		if v_exists > 0 then                                                          
			execute immediate('drop index biomart.BIO_ASSAY_ANALYSIS_GWAS_IDX1');        
		end if;	                                                                      
	end if;                                                                        
	                                                                               
	for i in stage_array.first .. stage_array.last                                 
	loop                                                                           
		                                                                              
		cz_write_audit(jobId,databaseName,procedureName,'Loading ' || stage_array(i).s
tudy_id || ' ' || stage_array(i).orig_data_type || ' ' ||                       
					   stage_array(i).analysis_name,0,stepCt,'Done');                          
					                                                                           
		v_etl_id := stage_array(i).etl_id;                                            
		v_bio_assay_analysis_id := stage_array(i).bio_assay_analysis_id;              
		v_data_type := stage_array(i).data_type;                                      
		                                                                              
		if v_data_type = 'EQTL' then                                                  
			insert into biomart.bio_assay_analysis_eqtl                                  
			(bio_asy_analysis_eqtl_id                                                    
			,bio_assay_analysis_id                                                       
			,rs_id                                                                       
			,gene                                                                        
			,p_value                                                                     
			,p_value_char                                                                
			,cis_trans                                                                   
			,distance_from_gene                                                          
			,etl_id                                                                      
			,ext_data                                                                    
			,log_p_value)                                                                
			select bio_asy_analysis_eqtl_id                                              
				  ,bio_assay_analysis_id                                                    
				  ,rs_id                                                                    
				  ,gene                                                                     
				  ,to_binary_double(p_value_char)                                           
				  ,p_value_char                                                             
				  ,cis_trans                                                                
				  ,distance_from_gene                                                       
				  ,etl_id                                                                   
				  ,ext_data                                                                 
				  ,log(10,to_binary_double(p_value_char))*-1                                
			from biomart_stage.bio_assay_analysis_eqtl                                   
			where bio_assay_analysis_id = v_bio_assay_analysis_id;                       
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Insert data for analysis fro
m BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt,'Done');
                                                                                
			commit;		                                                                    
		else                                                                          
			insert into biomart.bio_assay_analysis_gwas                                  
			(bio_asy_analysis_gwas_id                                                    
			,bio_assay_analysis_id                                                       
			,rs_id                                                                       
			,p_value                                                                     
			,p_value_char                                                                
			,etl_id                                                                      
			,ext_data                                                                    
			,log_p_value)                                                                
			select bio_asy_analysis_gwas_id                                              
				  ,bio_assay_analysis_id                                                    
				  ,rs_id                                                                    
				  ,to_binary_double(p_value_char)                                           
				  ,p_value_char                                                             
				  ,etl_id                                                                   
				  ,ext_data                                                                 
				  ,log(10,to_binary_double(p_value_char))*-1                                
			from biomart_stage.bio_assay_analysis_gwas                                   
			where bio_assay_analysis_id = v_bio_assay_analysis_id;                       
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Insert data for analysis fro
m BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt,'Done');
                                                                                
			commit;	                                                                     
		end if;                                                                       
                                                                                
		if i_etl_id > -1 then                                                         
                                                                                
			v_sqlText := 'delete from biomart_stage.bio_assay_analysis_' || v_data_type |
|                                                                               
						 ' where bio_assay_analysis_id = ' || to_char(v_bio_assay_analysis_id);   
			--dbms_output.put_line(v_sqlText);                                           
			execute immediate(v_sqlText);                                                
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Delete data for analysis fro
m BIOMART_STAGE.BIO_ASSAY_ANALYSIS_' || v_data_type,SQL%ROWCOUNT,stepCt,'Done');
                                                                                
			commit;	                                                                     
		end if;	                                                                      
		                                                                              
		update tm_lz.lz_src_analysis_metadata                                         
		set status='PRODUCTION'                                                       
		where etl_id = v_etl_id;                                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Set status to PRODUCTION in t
m_lz.lz_src_analysis_metadata',SQL%ROWCOUNT,stepCt,'Done');                     
		commit;				                                                                   
			                                                                             
	end loop;                                                                      
	                                                                               
	if i_etl_id = -1 then                                                          
	                                                                               
		select table_name                                                             
		bulk collect into stage_table_array                                           
		from all_tables                                                               
		where owner = 'BIOMART_STAGE'                                                 
		  and table_name like 'BIO_ASSAY_ANALYSIS%';                                  
		                                                                              
		for i in stage_table_array.first .. stage_table_array.last                    
		loop                                                                          
			v_sqlText := 'truncate table biomart_stage.' || stage_table_array(i).table_na
me;                                                                             
			--dbms_output.put_line(v_sqlText);                                           
			execute immediate(v_sqlText);                                                
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Truncated biomart_stage.' ||
 stage_table_array(i).table_name,0,stepCt,'Done');                              
		end loop;                                                                     
	end if;                                                                        
	                                                                               
	--	recreate GWAS indexes if needed                                             
	                                                                               
	if v_GWAS_staged = 1 then                                                      
		execute immediate('create index biomart.bio_assay_analysis_gwas_idx1 on biomar
t.bio_assay_analysis_gwas (bio_assay_analysis_id) tablespace "INDX"');          
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay_analy
sis_gwas_idx1',0,stepCt,'Done');                                                
		execute immediate('create index biomart.bio_assay_analysis_gwas_idx2 on biomar
t.bio_assay_analysis_gwas (rs_id) tablespace "INDX"');                          
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay_analy
sis_gwas_idx2',0,stepCt,'Done');                                                
		execute immediate('create unique index biomart.bio_assay_analysis_gwas_pk on b
iomart.bio_assay_analysis_gwas (bio_asy_analysis_gwas_id) tablespace "INDX"');  
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Created index bio_assay_analy
sis_gwas_pk',0,stepCt,'Done');                                                  
    I2B2_LOAD_EQTL_TOP50();                                                     
    stepCt := stepCt + 1;                                                       
		cz_write_audit(jobId,databaseName,procedureName,'Created top 50 EQTL',0,stepCt
,'Done');                                                                       
    I2B2_LOAD_GWAS_TOP50();                                                     
    stepCt := stepCt + 1;                                                       
		cz_write_audit(jobId,databaseName,procedureName,'Created top 50 GWAS',0,stepCt
,'Done');                                                                       
	end if;                                                                        
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_move_analysis_to_prod
',0,stepCt,'Done');                                                             
	stepCt := stepCt + 1;                                                          
	                                                                               
	cz_end_audit(jobId, 'Success');                                                
	                                                                               
	exception                                                                      
	when no_staged_data then                                                       
		cz_write_audit(jobId, databaseName, procedureName, 'No staged data - run termi
nating normally',0,stepCt,'Done');                                              
		cz_end_audit(jobId, 'Success');                                               
	when others then                                                               
    --Handle errors.                                                            
		cz_error_handler (jobID, procedureName);                                      
    --End Proc                                                                  
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_STUDY_METADATA"                
(                                                                               
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
/*************************************************************************      
* Copyright 2008-2012 Janssen Research n, LLC.                                  
*                                                                               
* Licensed under the Apache License, Version 2.0 (the "License");               
* you may not use this file except in compliance with the License.              
* You may obtain a copy of the License at                                       
*                                                                               
* http://www.apache.org/licenses/LICENSE-2.0                                    
*                                                                               
* Unless required by applicable law or agreed to in writing, software           
* distributed under the License is distributed on an "AS IS" BASIS,             
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
* See the License for the specific language governing permissions and           
* limitations under the License.                                                
******************************************************************/             
                                                                                
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
	                                                                               
	dcount 				int;                                                                
	lcount 				int;                                                                
	upload_date			timestamp;                                                       
	tmp_compound		varchar2(200);                                                   
	tmp_disease			varchar2(200);                                                   
	tmp_organism		varchar2(200);                                                   
	tmp_pubmed			varchar2(200);                                                    
	pubmed_id			varchar2(200);                                                     
	pubmed_title		varchar2(200);                                                   
	                                                                               
	Type study_compound_rec is record                                              
	(study_id	varchar2(200)                                                        
	,compound	varchar2(500)                                                        
	);                                                                             
                                                                                
	Type study_compound_tab is table of study_compound_rec;                        
                                                                                
	study_compound_array study_compound_tab;                                       
                                                                                
	Type study_disease_rec is record                                               
	(study_id	varchar2(200)                                                        
	,disease	varchar2(500)                                                         
	);                                                                             
                                                                                
	Type study_disease_tab is table of study_disease_rec;                          
                                                                                
	study_disease_array study_disease_tab;                                         
                                                                                
	Type study_taxonomy_rec is record                                              
	(study_id	varchar2(200)                                                        
	,organism	varchar2(500)                                                        
	);                                                                             
                                                                                
	Type study_taxonomy_tab is table of study_taxonomy_rec;                        
                                                                                
	study_taxonomy_array study_taxonomy_tab;                                       
                                                                                
	Type study_pubmed_rec is record                                                
	(study_id	varchar2(200)                                                        
	,pubmed	varchar2(500)                                                          
	);                                                                             
                                                                                
	Type study_pubmed_tab is table of study_pubmed_rec;                            
                                                                                
	study_pubmed_array study_pubmed_tab;                                           
                                                                                
BEGIN                                                                           
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
	select sysdate into upload_date from dual;                                     
	                                                                               
	--	delete existing metadata from lz_src_study_metadata                         
	                                                                               
	delete from lz_src_study_metadata                                              
	where study_id in (select distinct study_id from lt_src_study_metadata);       
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadata in lz
_src_study_metadata',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
                                                                                
	--	insert metadata into lz_src_study_metadata                                  
	                                                                               
	insert into lz_src_study_metadata                                              
	select x.*, upload_date                                                        
	from lt_src_study_metadata x;                                                  
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadata in lz
_src_study_metadata',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	                                                                               
	--	delete existing metadata from lz_src_study_metadata_ad_hoc                  
	                                                                               
	delete from lz_src_study_metadata_ad_hoc                                       
	where study_id in (select distinct study_id from lt_src_study_metadata);       
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadata in lz
_src_study_metadata_ad_hoc',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;                                                                        
                                                                                
	--	insert metadata into lz_src_study_metadata_ad_hoc                           
	                                                                               
	insert into lz_src_study_metadata_ad_hoc                                       
	select x.*, upload_date                                                        
	from lt_src_study_metadata_ad_hoc x;                                           
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing metadata in lz
_src_study_metadata_ad_hoc',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;                                                                        
                                                                                
	--	Update existing bio_experiment data                                         
	                                                                               
	update biomart.bio_experiment b                                                
	set (title                                                                     
	    ,description                                                               
		,design                                                                       
		,start_date                                                                   
		,completion_date                                                              
		,primary_investigator                                                         
		,overall_design                                                               
		,institution                                                                  
		,country) =                                                                   
	    (select m.title                                                            
		       ,m.description                                                         
			   ,m.design                                                                 
			   ,decode(is_date(m.start_date,'YYYYMMDD'),1,null,to_date(m.start_date,'YYYY
MMDD'))                                                                         
			   ,decode(is_date(m.completion_date,'YYYYMMDD'),1,null,to_date(m.completion_
date,'YYYYMMDD'))                                                               
			   ,coalesce(m.primary_investigator,m.study_owner)                           
			   ,coalesce(substr(decode(m.primary_end_points,null,null,'N/A',null,m.primar
y_end_points) ||                                                                
					    decode(m.inclusion_criteria,null,null,'N/A',null,' Inclusion Criteria: 
' || m.inclusion_criteria) ||                                                   
						decode(m.exclusion_criteria,null,null,'N/A',null,' Exclusion Criteria: ' |
| m.exclusion_criteria),1,2000)                                                 
						,m.overall_design)                                                        
			   ,m.institution                                                            
			   ,m.country                                                                
		 from lt_src_study_metadata m                                                 
		 where m.study_id is not null                                                 
		   and b.accession = m.study_id)                                              
	where exists                                                                   
		(select 1 from lt_src_study_metadata x                                        
		 where b.accession = x.study_id                                               
		   and b.etl_id = 'METADATA:' || x.study_id                                   
		   and x.study_id is not null)                                                
	;                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated trial data in BIOMART 
bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
	                                                                               
	--	Update existing bio_clinical_trial data only for true Clinical Trials or JnJ
 Experimental Medicine Studies                                                  
                                                                                
	update biomart.bio_clinical_trial b                                            
	set (study_owner                                                               
	    ,study_phase                                                               
		,blinding_procedure                                                           
		,studytype                                                                    
		,duration_of_study_weeks                                                      
		,number_of_patients                                                           
		,number_of_sites                                                              
		,route_of_administration                                                      
		,dosing_regimen                                                               
		,group_assignment                                                             
		,type_of_control                                                              
		,completion_date                                                              
		,primary_end_points                                                           
		,secondary_end_points                                                         
		,inclusion_criteria                                                           
		,exclusion_criteria                                                           
		,subjects                                                                     
		,gender_restriction_mfb                                                       
		,min_age                                                                      
		,max_age                                                                      
		,secondary_ids                                                                
		,development_partner                                                          
		,main_findings                                                                
		,geo_platform                                                                 
		--,platform_name                                                              
		,search_area                                                                  
        ) =                                                                     
		(select m.study_owner                                                         
			   ,m.study_phase                                                            
			   ,m.blinding_procedure                                                     
			   ,m.studytype                                                              
			   ,decode(is_number(m.duration_of_study_weeks),1,null,to_number(m.duration_o
f_study_weeks))                                                                 
			   ,decode(is_number(m.number_of_patients),1,null,to_number(m.number_of_patie
nts))                                                                           
			   ,decode(is_number(m.number_of_sites),1,null,to_number(m.number_of_sites)) 
			   ,m.route_of_administration                                                
			   ,m.dosing_regimen                                                         
			   ,m.group_assignment                                                       
			   ,m.type_of_control                                                        
			   ,decode(is_date(m.completion_date,'YYYYMMDD'),1,null,to_date(m.completion_
date,'YYYYMMDD'))                                                               
			   ,m.primary_end_points                                                     
			   ,m.secondary_end_points                                                   
			   ,m.inclusion_criteria                                                     
			   ,m.exclusion_criteria                                                     
			   ,m.subjects                                                               
			   ,m.gender_restriction_mfb                                                 
			   ,decode(is_number(m.min_age),1,null,to_number(m.min_age))                 
			   ,decode(is_number(m.max_age),1,null,to_number(m.max_age))                 
			   ,m.secondary_ids                                                          
			   ,m.development_partner                                                    
			   ,m.main_findings                                                          
			   ,m.geo_platform                                                           
			   --,m.platform_name                                                        
			   ,m.search_area                                                            
		 from lt_src_study_metadata m                                                 
		 where m.study_id is not null                                                 
		   and b.trial_number = m.study_id                                            
		)                                                                             
	where exists                                                                   
	     (select 1 from lt_src_study_metadata x                                    
		  where b.trial_number = x.study_id                                           
		    and x.study_id is not null                                                
		 )                                                                            
	;                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated trial data in BIOMART 
bio_clinical_trial',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	                                                                               
	--	Add new trial data to bio_experiment                                        
	                                                                               
	insert into biomart.bio_experiment                                             
	(bio_experiment_type                                                           
	,title                                                                         
	,description                                                                   
	,design                                                                        
	,start_date                                                                    
	,completion_date                                                               
	,primary_investigator                                                          
	,contact_field                                                                 
	,etl_id                                                                        
	,status                                                                        
	,overall_design                                                                
	,accession                                                                     
	,country                                                                       
	,institution)                                                                  
	select 'Experiment'                                                            
	      ,m.title                                                                 
		  ,m.description                                                              
		  ,m.design                                                                   
		  ,decode(is_date(m.start_date,'YYYYMMDD'),1,null,to_date(m.start_date,'YYYYMM
DD'))                                                                           
		  ,decode(is_date(m.completion_date,'YYYYMMDD'),1,null,to_date(m.completion_da
te,'YYYYMMDD'))                                                                 
		  ,coalesce(m.primary_investigator,m.study_owner)                             
		  ,m.contact_field                                                            
		  ,'METADATA:' || m.study_id                                                  
		  ,m.study_id                                                                 
		  ,coalesce(decode(m.primary_end_points,null,null,'N/A',null,replace(m.primary
_end_points,'"',null)) ||                                                       
					    decode(m.inclusion_criteria,null,null,'N/A',null,' Inclusion Criteria: 
' || replace(m.inclusion_criteria,'"',null)) ||                                 
						decode(m.exclusion_criteria,null,null,'N/A',null,' Exclusion Criteria: ' |
| replace(m.exclusion_criteria,'"',null))                                       
						,m.overall_design)                                                        
		  ,m.study_id                                                                 
		  ,m.country                                                                  
		  ,m.institution                                                              
	from lt_src_study_metadata m                                                   
	where m.study_id is not null                                                   
	  and not exists                                                               
	      (select 1 from biomart.bio_experiment x                                  
		   where m.study_id = x.accession                                             
		     and m.study_id is not null);                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOMART
 bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
		                                                                              
	--	Add new trial data to bio_clinical_trial                                    
	                                                                               
	insert into biomart.bio_clinical_trial                                         
	(trial_number                                                                  
	,study_owner                                                                   
	,study_phase                                                                   
	,blinding_procedure                                                            
	,studytype                                                                     
	,duration_of_study_weeks                                                       
	,number_of_patients                                                            
	,number_of_sites                                                               
	,route_of_administration                                                       
	,dosing_regimen                                                                
	,group_assignment                                                              
	,type_of_control                                                               
	,completion_date                                                               
	,primary_end_points                                                            
	,secondary_end_points                                                          
	,inclusion_criteria                                                            
	,exclusion_criteria                                                            
	,subjects                                                                      
	,gender_restriction_mfb                                                        
	,min_age                                                                       
	,max_age                                                                       
	,secondary_ids                                                                 
	,bio_experiment_id                                                             
	,development_partner                                                           
	,main_findings                                                                 
	,geo_platform                                                                  
	--,platform_name                                                               
	,search_area                                                                   
	)                                                                              
	select m.study_id                                                              
          ,m.study_owner                                                        
          ,m.study_phase                                                        
          ,m.blinding_procedure                                                 
          ,m.studytype                                                          
		  ,decode(is_number(m.duration_of_study_weeks),1,null,to_number(m.duration_of_
study_weeks))                                                                   
		  ,decode(is_number(m.number_of_patients),1,null,to_number(m.number_of_patient
s))                                                                             
		  ,decode(is_number(m.number_of_sites),1,null,to_number(m.number_of_sites))   
          ,m.route_of_administration                                            
          ,m.dosing_regimen                                                     
          ,m.group_assignment                                                   
          ,m.type_of_control                                                    
          ,decode(is_date(m.completion_date,'YYYYMMDD'),1,null,to_date(m.complet
ion_date,'YYYYMMDD'))                                                           
          ,m.primary_end_points                                                 
          ,m.secondary_end_points                                               
          ,m.inclusion_criteria                                                 
          ,m.exclusion_criteria                                                 
          ,m.subjects                                                           
          ,m.gender_restriction_mfb                                             
		  ,decode(is_number(m.min_age),1,null,to_number(m.min_age))                   
		  ,decode(is_number(m.max_age),1,null,to_number(m.max_age))                   
          ,m.secondary_ids                                                      
          ,b.bio_experiment_id                                                  
		  ,m.development_partner                                                      
		  ,m.main_findings                                                            
		  ,m.geo_platform                                                             
		  --,m.platform_name                                                          
		  ,m.search_area                                                              
	from lt_src_study_metadata m                                                   
	    ,biomart.bio_experiment b                                                  
	where m.study_id is not null                                                   
	  and m.study_id = b.accession                                                 
	  and not exists                                                               
	      (select 1 from biomart.bio_clinical_trial x                              
		   where m.study_id = x.trial_number);                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOMART
 bio_clinical_trial',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	                                                                               
	--	Insert new trial into bio_data_uid                                          
	                                                                               
	insert into biomart.bio_data_uid                                               
	(bio_data_id                                                                   
	,unique_id                                                                     
	,bio_data_type                                                                 
	)                                                                              
	select distinct b.bio_experiment_id                                            
	      ,'EXP:' || m.study_id                                                    
		  ,'EXP'                                                                      
	from biomart.bio_experiment b                                                  
		,lt_src_study_metadata m                                                      
	where m.study_id is not null                                                   
	  and m.study_id = b.accession                                                 
	  and not exists                                                               
	      (select 1 from biomart.bio_data_uid x                                    
		   where x.unique_id = 'EXP:' || m.study_id)                                  
	;                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data into BIOMA
RT bio_data_uid',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	--	delete existing compound data for study, compound list may change           
	                                                                               
	delete bio_data_compound dc                                                    
	where dc.bio_data_id in                                                        
		 (select x.bio_experiment_id                                                  
		  from bio_experiment x                                                       
			  ,lt_src_study_metadata y                                                   
		  where x.accession = y.study_id                                              
		    and x.etl_id = 'METADATA:' || y.study_id);                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from bio_
data_compound',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;                                                                        
                                                                                
	select distinct study_id, compound                                             
	bulk collect into study_compound_array                                         
	from lt_src_study_metadata                                                     
	where compound is not null;                                                    
	                                                                               
	if SQL%ROWCOUNT > 0 then                                                       
		for i in study_compound_array.first .. study_compound_array.last              
		loop                                                                          
		                                                                              
			select length(study_compound_array(i).compound) -                            
				   length(replace(study_compound_array(i).compound,';',null))+1             
				into dcount                                                                 
			from dual;                                                                   
	                                                                               
			while dcount > 0                                                             
			Loop	                                                                        
		                                                                              
				select parse_nth_value(study_compound_array(i).compound,dcount,';') into tmp
_compound                                                                       
				from dual;                                                                  
				                                                                            
				--	add new compound                                                         
				                                                                            
				insert into bio_compound bc                                                 
				(generic_name)                                                              
				select tmp_compound                                                         
				from dual                                                                   
				where not exists                                                            
					 (select 1 from bio_compound x                                             
					  where upper(x.generic_name) = upper(tmp_compound))                       
				  and tmp_compound is not null;                                             
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Added compound to bio_compo
und',SQL%ROWCOUNT,stepCt,'Done');                                               
				commit;                                                                     
							                                                                         
				--	Insert new trial data into bio_data_compound                             
                                                                                
				insert into bio_data_compound                                               
				(bio_data_id                                                                
				,bio_compound_id                                                            
				,etl_source                                                                 
				)                                                                           
				select b.bio_experiment_id                                                  
					  ,c.bio_compound_id                                                       
					  ,'METADATA:' || study_compound_array(i).study_id                         
				from biomart.bio_experiment b                                               
					,biomart.bio_compound c                                                    
				where upper(tmp_compound) = upper(c.generic_name)                           
				  and tmp_compound is not null                                              
				  and b.accession = study_compound_array(i).study_id                        
				  and not exists                                                            
						 (select 1 from biomart.bio_data_compound x                               
						  where b.bio_experiment_id = x.bio_data_id                               
							and c.bio_compound_id = x.bio_compound_id);                              
                                                                                
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOM
ART bio_data_compound',SQL%ROWCOUNT,stepCt,'Done');                             
				commit;                                                                     
				                                                                            
				dcount := dcount - 1;                                                       
			end loop;                                                                    
		end loop;                                                                     
	end if;                                                                        
                                                                                
	--	delete existing disease data for studies                                    
	                                                                               
	delete bio_data_disease dc                                                     
	where dc.bio_data_id in                                                        
		 (select x.bio_experiment_id                                                  
		  from bio_experiment x                                                       
			  ,lt_src_study_metadata y                                                   
		  where x.accession = y.study_id                                              
		    and x.etl_id = 'METADATA:' || y.study_id);                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from bio_
data_disease',SQL%ROWCOUNT,stepCt,'Done');                                      
	commit;                                                                        
                                                                                
	select distinct study_id, disease                                              
	bulk collect into study_disease_array                                          
	from lt_src_study_metadata                                                     
	where disease is not null;                                                     
	                                                                               
	if SQL%ROWCOUNT > 0 then                                                       
		for i in study_disease_array.first .. study_disease_array.last                
		loop                                                                          
		                                                                              
			select length(study_disease_array(i).disease) -                              
				   length(replace(study_disease_array(i).disease,';',null))+1               
				into dcount                                                                 
			from dual;                                                                   
	                                                                               
			while dcount > 0                                                             
			Loop	                                                                        
		                                                                              
				select parse_nth_value(study_disease_array(i).disease,dcount,';') into tmp_d
isease                                                                          
				from dual;                                                                  
				                                                                            
				--	add new disease                                                          
				                                                                            
				insert into bio_disease bc                                                  
				(disease                                                                    
				,prefered_name)                                                             
				select tmp_disease                                                          
					  ,tmp_disease                                                             
				from dual                                                                   
				where not exists                                                            
					 (select 1 from bio_disease x                                              
					  where upper(x.disease) = upper(tmp_disease))                             
				  and tmp_disease is not null;                                              
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Added disease to bio_diseas
e',SQL%ROWCOUNT,stepCt,'Done');                                                 
				commit;                                                                     
							                                                                         
				--	Insert new trial data into bio_data_disease                              
                                                                                
				insert into bio_data_disease                                                
				(bio_data_id                                                                
				,bio_disease_id                                                             
				,etl_source                                                                 
				)                                                                           
				select b.bio_experiment_id                                                  
					  ,c.bio_disease_id                                                        
					  ,'METADATA:' || study_disease_array(i).study_id                          
				from biomart.bio_experiment b                                               
					,biomart.bio_disease c                                                     
				where upper(tmp_disease) = upper(c.disease)                                 
				  and tmp_disease is not null                                               
				  and b.accession = study_disease_array(i).study_id                         
				  and not exists                                                            
						 (select 1 from biomart.bio_data_disease x                                
						  where b.bio_experiment_id = x.bio_data_id                               
							and c.bio_disease_id = x.bio_disease_id);                                
                                                                                
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOM
ART bio_data_disease',SQL%ROWCOUNT,stepCt,'Done');                              
				commit;                                                                     
				                                                                            
				dcount := dcount - 1;                                                       
			end loop;                                                                    
		end loop;                                                                     
	end if;                                                                        
                                                                                
	--	delete existing taxonomy data for studies                                   
	                                                                               
	delete bio_data_taxonomy dc                                                    
	where dc.bio_data_id in                                                        
		 (select x.bio_experiment_id                                                  
		  from bio_experiment x                                                       
			  ,lt_src_study_metadata y                                                   
		  where x.accession = y.study_id                                              
		    and x.etl_id = 'METADATA:' || y.study_id);                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from bio_
data_taxonomy',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;                                                                        
                                                                                
	select distinct study_id, organism                                             
	bulk collect into study_taxonomy_array                                         
	from lt_src_study_metadata                                                     
	where organism is not null;                                                    
	                                                                               
	if SQL%ROWCOUNT > 0 then                                                       
		for i in study_taxonomy_array.first .. study_taxonomy_array.last              
		loop                                                                          
		                                                                              
			select length(study_taxonomy_array(i).organism) -                            
				   length(replace(study_taxonomy_array(i).organism,';',null))+1             
				into dcount                                                                 
			from dual;                                                                   
	                                                                               
			while dcount > 0                                                             
			Loop	                                                                        
		                                                                              
				select parse_nth_value(study_taxonomy_array(i).organism,dcount,';') into tmp
_organism                                                                       
				from dual;                                                                  
				                                                                            
				--	add new organism                                                         
				                                                                            
				insert into bio_taxonomy bc                                                 
				(taxon_name                                                                 
				,taxon_label)                                                               
				select tmp_organism                                                         
					  ,tmp_organism                                                            
				from dual                                                                   
				where not exists                                                            
					 (select 1 from bio_taxonomy x                                             
					  where upper(x.taxon_name) = upper(tmp_organism))                         
				  and tmp_organism is not null;                                             
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Added organism to bio_taxon
omy',SQL%ROWCOUNT,stepCt,'Done');                                               
				commit;                                                                     
							                                                                         
				--	Insert new trial data into bio_data_taxonomy                             
                                                                                
				insert into bio_data_taxonomy                                               
				(bio_data_id                                                                
				,bio_taxonomy_id                                                            
				,etl_source                                                                 
				)                                                                           
				select b.bio_experiment_id                                                  
					  ,c.bio_taxonomy_id                                                       
					  ,'METADATA:' || study_disease_array(i).study_id                          
				from biomart.bio_experiment b                                               
					,biomart.bio_taxonomy c                                                    
				where upper(tmp_organism) = upper(c.taxon_name)                             
				  and tmp_organism is not null                                              
				  and b.accession = study_disease_array(i).study_id                         
				  and not exists                                                            
						 (select 1 from biomart.bio_data_taxonomy x                               
						  where b.bio_experiment_id = x.bio_data_id                               
							and c.bio_taxonomy_id = x.bio_taxonomy_id);                              
                                                                                
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOM
ART bio_data_taxonomy',SQL%ROWCOUNT,stepCt,'Done');                             
				commit;                                                                     
				                                                                            
				dcount := dcount - 1;                                                       
			end loop;                                                                    
		end loop;                                                                     
	end if;                                                                        
	                                                                               
	--	add ncbi/GEO linking                                                        
	                                                                               
	--	check if ncbi exists in bio_content_repository, if not, add                 
	                                                                               
	select count(*) into dcount                                                    
	from bio_content_repository                                                    
	where repository_type = 'NCBI'                                                 
	  and location_type = 'URL';                                                   
	                                                                               
	if dcount = 0 then                                                             
		insert into bio_content_repository                                            
		(location                                                                     
		,active_y_n                                                                   
		,repository_type                                                              
		,location_type)                                                               
		values ('http://www.ncbi.nlm.nih.gov/','Y','NCBI','URL');                     
		                                                                              
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Inserted NCBI URL in bio_cont
ent_repository',SQL%ROWCOUNT,stepCt,'Done');                                    
		commit;                                                                       
		                                                                              
	end if;                                                                        
                                                                                
	--	insert GSE studies into bio_content                                         
	                                                                               
	insert into bio_content                                                        
	(repository_id                                                                 
	,location                                                                      
	,file_type                                                                     
	,etl_id_c                                                                      
	)                                                                              
	select bcr.bio_content_repo_id                                                 
		  ,'geo/query/acc.cgi?acc=' || m.study_id                                     
		  ,'Experiment Web Link'                                                      
		  ,'METADATA:' || m.study_id                                                  
	from lt_src_study_metadata m                                                   
		,bio_content_repository bcr                                                   
	where m.study_id like 'GSE%'                                                   
	  and bcr.repository_type = 'NCBI'                                             
	  and bcr.location_type = 'URL'                                                
	  and not exists                                                               
		 (select 1 from bio_content x                                                 
		  where x.etl_id_c like '%' || m.study_id || '%'                              
		    and x.file_type = 'Experiment Web Link'                                   
			and x.location = 'geo/query/acc.cgi?acc=' || m.study_id);                    
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted GEO study into bio_co
ntent',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
	                                                                               
	--	insert GSE studies into bio_content_reference                               
	                                                                               
	insert into bio_content_reference                                              
	(bio_content_id                                                                
	,bio_data_id                                                                   
	,content_reference_type                                                        
	,etl_id_c                                                                      
	)                                                                              
	select bc.bio_file_content_id                                                  
		  ,be.bio_experiment_id                                                       
		  ,'Experiment Web Link'                                                      
		  ,'METADATA:' || m.study_id                                                  
	from lt_src_study_metadata m                                                   
		,bio_experiment be                                                            
		,bio_content bc                                                               
	where m.study_id like 'GSE%'                                                   
	  and m.study_id = be.accession                                                
	  and bc.file_type = 'Experiment Web Link'                                     
	  and bc.etl_id_c = 'METADATA:' || m.study_id                                  
	  and bc.location = 'geo/query/acc.cgi?acc=' || m.study_id                     
	  and not exists                                                               
		 (select 1 from bio_content_reference x                                       
		  where bc.bio_file_content_id = x.bio_content_id                             
		    and be.bio_experiment_id = x.bio_data_id);                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted GEO study into bio_co
ntent_reference',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	--	add PUBMED linking                                                          
	                                                                               
	--	delete existing pubmed data for studies                                     
	                                                                               
	delete bio_content_reference dc                                                
	where dc.bio_content_id in                                                     
		 (select x.bio_file_content_id                                                
		  from bio_content x                                                          
			  ,lt_src_study_metadata y                                                   
		  where x.file_type = 'Publication Web Link'                                  
		    and x.etl_id_c = 'METADATA:' || y.study_id);                              
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing Pubmed data fr
om bio_content_reference',SQL%ROWCOUNT,stepCt,'Done');                          
	commit;			                                                                     
			                                                                             
	delete bio_content dc                                                          
	where dc.bio_file_content_id in                                                
		 (select x.bio_file_content_id                                                
		  from bio_content x                                                          
			  ,lt_src_study_metadata y                                                   
		  where x.file_type = 'Publication Web Link'                                  
		    and x.etl_id_c = 'METADATA:' || y.study_id);                              
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing Pubmed data fr
om bio_content',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
	                                                                               
	select distinct study_id, pubmed_ids                                           
	bulk collect into study_pubmed_array                                           
	from lt_src_study_metadata                                                     
	where pubmed_ids is not null;                                                  
	                                                                               
	if SQL%ROWCOUNT > 0 then                                                       
		--	check if PubMed url exists in bio_content_repository, if not, add          
		select count(*) into dcount                                                   
		from bio_content_repository                                                   
		where repository_type = 'PubMed';	                                            
	                                                                               
		if dcount = 0 then                                                            
			insert into bio_content_repository                                           
			(location                                                                    
			,active_y_n                                                                  
			,repository_type                                                             
			,location_type)                                                              
			values ('http://www.ncbi.nlm.nih.gov/pubmed/','Y','PubMed','URL');           
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Inserted GEO study into bio_
content_reference',SQL%ROWCOUNT,stepCt,'Done');                                 
			commit;                                                                      
		end if;                                                                       
                                                                                
		for i in study_pubmed_array.first .. study_pubmed_array.last                  
		loop                                                                          
			select length(study_pubmed_array(i).pubmed)-length(replace(study_pubmed_array
(i).pubmed,';',null))+1                                                         
			into dcount                                                                  
			from dual;                                                                   
                                                                                
			while dcount > 0                                                             
			Loop	                                                                        
				-- multiple pubmed id can be separated by ;, pubmed id and title are separat
ed by :                                                                         
				                                                                            
				select parse_nth_value(study_pubmed_array(i).pubmed,dcount,';') into tmp_pub
med from dual;			                                                               
				select instr(tmp_pubmed,':') into lcount from dual;                         
				                                                                            
				if lcount = 0 then                                                          
					pubmed_id := tmp_pubmed;                                                   
					pubmed_title := null;                                                      
				else                                                                        
					pubmed_id := substr(tmp_pubmed,1,instr(tmp_pubmed,':')-1);                 
					cz_write_audit(jobId,databaseName,procedureName,'pubmed_id: ' || pubmed_id,
1,stepCt,'Done');	                                                              
					pubmed_title := substr(tmp_pubmed,instr(tmp_pubmed,':')+1);                
					cz_write_audit(jobId,databaseName,procedureName,'pubmed_title: ' || pubmed_
title,1,stepCt,'Done');                                                         
				end if;                                                                     
	                                                                               
				insert into bio_content                                                     
				(repository_id                                                              
				,location                                                                   
				,title                                                                      
				,file_type                                                                  
				,etl_id_c                                                                   
				)                                                                           
				select bcr.bio_content_repo_id                                              
					  ,pubmed_id                                                               
					  ,pubmed_title                                                            
					  ,'Publication Web Link'                                                  
					  ,'METADATA:' || study_pubmed_array(i).study_id                           
				from bio_content_repository bcr                                             
				where bcr.repository_type = 'PubMed'                                        
				  and not exists                                                            
					 (select 1 from bio_content x                                              
					  where x.etl_id_c like '%' || study_pubmed_array(i).study_id || '%'       
					    and x.file_type = 'Publication Web Link'                               
						and x.location = pubmed_id);                                              
                                                                                
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Inserted pubmed for study i
nto bio_content',SQL%ROWCOUNT,stepCt,'Done');                                   
				commit;				                                                                 
		                                                                              
				insert into bio_content_reference                                           
				(bio_content_id                                                             
				,bio_data_id                                                                
				,content_reference_type                                                     
				,etl_id_c                                                                   
				)                                                                           
				select bc.bio_file_content_id                                               
					  ,be.bio_experiment_id                                                    
					  ,'Publication Web Link'                                                  
					  ,'METADATA:' || study_pubmed_array(i).study_id                           
				from bio_experiment be                                                      
					,bio_content bc                                                            
				where be.accession = study_pubmed_array(i).study_id                         
				  and bc.file_type = 'Publication Web Link'                                 
				  and bc.etl_id_c = 'METADATA:' || study_pubmed_array(i).study_id           
				  and bc.location = pubmed_id                                               
				  and not exists                                                            
					 (select 1 from bio_content_reference x                                    
					  where bc.bio_file_content_id = x.bio_content_id                          
						and be.bio_experiment_id = x.bio_data_id);	                               
                                                                                
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Inserted pubmed for study i
nto bio_content_reference',SQL%ROWCOUNT,stepCt,'Done');                         
				commit;				                                                                 
	                                                                               
				dcount := dcount - 1;                                                       
			end loop;                                                                    
		end loop;                                                                     
	end if;                                                                        
	                                                                               
		--	Create i2b2_tags                                                           
                                                                                
	delete from i2b2_tags                                                          
	where upper(tag_type) = 'Trial';                                               
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing Trial tags in 
i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                         
	commit;                                                                        
	                                                                               
	insert into i2b2_tags                                                          
	(path, tag, tag_type, tags_idx)                                                
	select min(b.c_fullname) as path                                               
		  ,be.accession as tag                                                        
		  ,'Trial' as tag_type                                                        
		  ,0 as tags_idx                                                              
	from bio_experiment be                                                         
		,i2b2 b                                                                       
	where be.accession = b.sourcesystem_cd                                         
	group by be.accession;                                                         
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Add Trial tags in i2b2_tags',S
QL%ROWCOUNT,stepCt,'Done');                                                     
	commit;                                                                        
					                                                                           
	--	Insert trial data tags - COMPOUND                                           
	                                                                               
	delete from i2b2_tags t                                                        
	where upper(t.tag_type) = 'COMPOUND';                                          
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing Compound tags 
in I2B2METADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;	                                                                       
	                                                                               
	insert into i2b2_tags                                                          
	(path, tag, tag_type, tags_idx)                                                
	select distinct min(o.c_fullname) as path                                      
		  ,decode(x.rec_num,1,c.generic_name,c.brand_name) as tag                     
		  ,'Compound' as tag_type                                                     
		  ,1 as tags_idx                                                              
	from bio_experiment be                                                         
		,bio_data_compound bc                                                         
		,bio_compound c                                                               
		,i2b2 o                                                                       
		,(select rownum as rec_num from table_access where rownum < 3) x              
	where be.bio_experiment_id = bc.bio_data_id                                    
       and bc.bio_compound_id = c.bio_compound_id                               
       and be.accession = o.sourcesystem_cd                                     
       and decode(x.rec_num,1,c.generic_name,c.brand_name) is not null          
	group by decode(x.rec_num,1,c.generic_name,c.brand_name);                      
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert Compound tags in I2B2ME
TADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;	                                                                       
					                                                                           
	--	Insert trial data tags - DISEASE                                            
	                                                                               
	delete from i2b2_tags t                                                        
	where upper(t.tag_type) = 'DISEASE';                                           
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing DISEASE tags i
n I2B2METADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                          
	commit;	                                                                       
		                                                                              
	insert into i2b2_tags                                                          
	(path, tag, tag_type, tags_idx)                                                
	select distinct min(o.c_fullname) as path                                      
		   ,c.prefered_name                                                           
		   ,'Disease' as tag_type                                                     
		   ,1 as tags_idx                                                             
	from bio_experiment be                                                         
		,bio_data_disease bc                                                          
		,bio_disease c                                                                
		,i2b2 o                                                                       
      --,(select rownum as rec_num from table_access where rownum < 3) x        
	where be.bio_experiment_id = bc.bio_data_id                                    
      and bc.bio_disease_id = c.bio_disease_id                                  
      and be.accession = o.sourcesystem_cd                                      
    --and decode(x.rec_num,1,c.generic_name,c.brand_name) is not null           
	group by c.prefered_name;                                                      
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert Disease tags in I2B2MET
ADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;	                                                                       
                                                                                
	--	Load bio_ad_hoc_property                                                    
	                                                                               
	delete from bio_ad_hoc_property                                                
	where bio_data_id in                                                           
		 (select distinct x.bio_experiment_id                                         
		  from lt_src_study_metadata_ad_hoc t                                         
			  ,bio_experiment x                                                          
		  where t.study_id = x.accession);                                            
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing ad_hoc metadat
a from BIOMART BIO_AD_HOC_PROPERTY',SQL%ROWCOUNT,stepCt,'Done');                
	commit;		                                                                      
	                                                                               
	insert into bio_ad_hoc_property                                                
	(bio_data_id                                                                   
	,property_key                                                                  
	,property_value)                                                               
	select b.bio_experiment_id                                                     
		  ,t.ad_hoc_property_key                                                      
		  ,t.ad_hoc_property_value                                                    
	from lt_src_study_metadata_ad_hoc t                                            
		,bio_experiment b                                                             
	where t.study_id = b.accession;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert ad_hoc metadata into BI
OMART BIO_AD_HOC_PROPERTY',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_load_study_metadata',
SQL%ROWCOUNT,stepCt,'Done');                                                    
	commit;                                                                        
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		                                                                              
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
/*	ignore for now                                                               
	--	Add trial/study to search_secure_object                                     
	                                                                               
	insert into searchapp.search_secure_object                                     
	(bio_data_id                                                                   
	,display_name                                                                  
	,data_type                                                                     
	,bio_data_unique_id                                                            
	)                                                                              
	select b.bio_experiment_id                                                     
	      ,parse_nth_value(md.c_fullname,2,'\') || ' - ' || b.accession as display_
name                                                                            
		  ,'BIO_CLINICAL_TRIAL' as data_type                                          
		  ,'EXP:' || b.accession as bio_data_unique_id                                
	from i2b2metadata.i2b2 md                                                      
		,biomart.bio_experiment b                                                     
	where b.accession = md.sourcesystem_cd                                         
	  and md.c_hlevel = 0                                                          
	  and md.c_fullname not like '\Public Studies\%'                               
	  and md.c_fullname not like '\Internal Studies\%'                             
	  and md.c_fullname not like '\Experimental Medicine Study\NORMALS\%'          
	  and not exists                                                               
		 (select 1 from searchapp.search_secure_object so                             
		  where b.bio_experiment_id = so.bio_data_id)                                 
	;                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted new trial/study into 
SEARCHAPP search_secure_object',SQL%ROWCOUNT,stepCt,'Done');                    
	commit;                                                                        
*/                                                                              
                                                                                
                                                                                
/*	not used	                                                                    
	--	Insert WORKFLOW tags                                                        
	                                                                               
	delete from i2b2_tags                                                          
	where tag_type = 'WORKFLOW';                                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing trial WORKFLOW
 in I2B2METADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;	                                                                       
	                                                                               
	insert into i2b2_tags                                                          
	(path                                                                          
	,tag_type                                                                      
	,tag                                                                           
	)                                                                              
	select distinct b.c_fullname                                                   
		  ,'WORKFLOW'                                                                 
		  ,decode(d.platform,'MRNA_AFFYMETRIX','Gene Expression','RBM','RBM','Protein'
,'Protein',null) as tag                                                         
	from deapp.de_subject_sample_mapping d                                         
		,i2b2 b                                                                       
	where d.platform is not null                                                   
	  and d.trial_name = b.sourcesystem_cd                                         
	  and b.c_hlevel = 0                                                           
	  and b.c_fullname not like '%Across Trials%';                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted heatmap WORKFLOW in I
2B2METADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                             
	commit;	                                                                       
                                                                                
	insert into i2b2_tags                                                          
	(path                                                                          
	,tag_type                                                                      
	,tag                                                                           
	)                                                                              
	select distinct c.c_fullname                                                   
		  ,'WORKFLOW'                                                                 
		  ,'SNP'                                                                      
	from deapp.de_snp_data_by_patient snp                                          
	,i2b2 c                                                                        
	where snp.trial_name = c.sourcesystem_cd                                       
	  and c.c_hlevel = 0;                                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted SNP WORKFLOW in I2B2M
ETADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;		                                                                      
*/	                                                                             
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_SECURITY_DATA"                 
(                                                                               
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
/*************************************************************************      
* Copyright 2008-2012 Janssen Research and Development, LLC.                    
*                                                                               
* Licensed under the Apache License, Version 2.0 (the "License");               
* you may not use this file except in compliance with the License.              
* You may obtain a copy of the License at                                       
*                                                                               
* http://www.apache.org/licenses/LICENSE-2.0                                    
*                                                                               
* Unless required by applicable law or agreed to in writing, software           
* distributed under the License is distributed on an "AS IS" BASIS,             
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
* See the License for the specific language governing permissions and           
* limitations under the License.                                                
******************************************************************/             
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
  stepCt := 0;                                                                  
                                                                                
  Execute immediate ('truncate table I2B2METADATA.i2b2_secure');                
                                                                                
  stepCt := stepCt + 1;                                                         
  cz_write_audit(jobId,databaseName,procedureName,'Truncate I2B2METADATA i2b2_se
cure',0,stepCt,'Done');                                                         
                                                                                
  insert into I2B2METADATA.i2b2_secure(                                         
    C_HLEVEL,                                                                   
    C_FULLNAME,                                                                 
    C_NAME,                                                                     
    C_SYNONYM_CD,                                                               
    C_VISUALATTRIBUTES,                                                         
    C_TOTALNUM,                                                                 
    C_BASECODE,                                                                 
    C_METADATAXML,                                                              
    C_FACTTABLECOLUMN,                                                          
    C_TABLENAME,                                                                
    C_COLUMNNAME,                                                               
    C_COLUMNDATATYPE,                                                           
    C_OPERATOR,                                                                 
    C_DIMCODE,                                                                  
    C_COMMENT,                                                                  
    C_TOOLTIP,                                                                  
    UPDATE_DATE,                                                                
    DOWNLOAD_DATE,                                                              
    IMPORT_DATE,                                                                
    SOURCESYSTEM_CD,                                                            
    VALUETYPE_CD,                                                               
	secure_obj_token)                                                              
  select                                                                        
    b.C_HLEVEL,                                                                 
    b.C_FULLNAME,                                                               
    b.C_NAME,                                                                   
    b.C_SYNONYM_CD,                                                             
    b.C_VISUALATTRIBUTES,                                                       
    b.C_TOTALNUM,                                                               
    b.C_BASECODE,                                                               
    b.C_METADATAXML,                                                            
    b.C_FACTTABLECOLUMN,                                                        
    b.C_TABLENAME,                                                              
    b.C_COLUMNNAME,                                                             
    b.C_COLUMNDATATYPE,                                                         
    b.C_OPERATOR,                                                               
    b.C_DIMCODE,                                                                
    b.C_COMMENT,                                                                
    b.C_TOOLTIP,                                                                
    b.UPDATE_DATE,                                                              
    b.DOWNLOAD_DATE,                                                            
    b.IMPORT_DATE,                                                              
    b.SOURCESYSTEM_CD,                                                          
    b.VALUETYPE_CD,                                                             
	coalesce(f.tval_char,'EXP:PUBLIC')                                             
    from I2B2METADATA.I2B2 b                                                    
		,(select distinct case when sourcesystem_cd like '%:%' then substr(sourcesyste
m_cd,1,instr(sourcesystem_cd,':')-1)                                            
							   else sourcesystem_cd end as sourcesystem_cd                           
				,tval_char from observation_fact where concept_cd = 'SECURITY') f           
	where b.sourcesystem_cd = f.sourcesystem_cd(+);                                
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Insert security data into I
2B2METADATA i2b2_secure',SQL%ROWCOUNT,stepCt,'Done');                           
                                                                                
    commit;                                                                     
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_SAMPLE_DATA"                   
                                                                                
(                                                                               
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
	--	JEA@20110916	New                                                            
                                                                                
	--                                                                             
	-- Copyright ? 2011 Recombinant Data Corp.                                     
	--                                                                             
                                                                                
BEGIN                                                                           
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
                                                                                
	--	delete any data for study in sample_categories_extrnl from lz_src_sample_cat
egories                                                                         
	                                                                               
	delete from lz_src_sample_categories                                           
	where trial_cd in (select distinct trial_cd from sample_categories_extrnl);    
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted existing study data in
 tm_lz lz_src_sample_categories',SQL%ROWCOUNT,stepCt,'Done');                   
	commit;	                                                                       
	                                                                               
	--	create records in patient_dimension for samples if they do not exist        
	--	format of sourcesystem_cd:  trial:S:[site:]subject_cd:sample_cd             
	--	if no sample_cd specified, then the patient_num of the trial:[site]:subject_
cd should have already been created                                             
	                                                                               
	insert into patient_dimension                                                  
    ( patient_num,                                                              
      sex_cd,                                                                   
      age_in_years_num,                                                         
      race_cd,                                                                  
      update_date,                                                              
      download_date,                                                            
      import_date,                                                              
      sourcesystem_cd                                                           
    )                                                                           
    select seq_patient_num.nextval,                                             
		   null as sex_cd,                                                            
		   0 as age_in_years_num,                                                     
		   null as race_cd,                                                           
		   sysdate,                                                                   
		   sysdate,                                                                   
		   sysdate,                                                                   
		   regexp_replace(s.trial_cd || ':S:' || s.site_cd || ':' || s.subject_cd || '
:' || s.sample_cd,                                                              
						  '(::){2,}', ':')                                                        
	from (select distinct trial_cd                                                 
	             ,site_cd                                                          
				 ,subject_cd                                                                
				 ,sample_cd                                                                 
		  from sample_categories_extrnl s                                             
		  where s.sample_cd is not null                                               
			and not exists                                                               
				(select 1 from patient_dimension x                                          
				 where x.sourcesystem_cd =                                                  
					   regexp_replace(s.trial_cd || ':S:' || s.site_cd || ':' || s.subject_cd |
| ':' || s.sample_cd,                                                           
					 '(::){2,}', ':'))                                                         
		  ) s;                                                                        
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Added new sample_cds for study
 in I2B2DEMODATA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                
	commit;                                                                        
                                                                                
	--	Load data into lz_src_sample_categories table, joins to make sure study/tria
l exists and there's an entry in the patient_dimension                          
	                                                                               
	insert into lz_src_sample_categories                                           
	(trial_cd                                                                      
	,site_cd                                                                       
	,subject_cd                                                                    
	,sample_cd                                                                     
	,category_cd                                                                   
	,category_value                                                                
	)                                                                              
	select distinct s.trial_cd                                                     
		  ,s.site_cd                                                                  
		  ,s.subject_cd                                                               
		  ,s.sample_cd                                                                
		  ,replace(s.category_cd,'"',null)                                            
		  ,replace(s.category_value,'"',null)                                         
	from sample_categories_extrnl s                                                
		,patient_dimension p                                                          
		,i2b2 f                                                                       
	where s.category_cd is not null                                                
	  and s.category_value is not null                                             
	  and p.sourcesystem_cd =                                                      
		  case when s.sample_cd is null                                               
			   then regexp_replace(s.trial_cd || ':' || s.site_cd || ':' || s.subject_cd,
'(::){2,}', ':')                                                                
			   else regexp_replace(s.trial_cd || ':S:' || s.site_cd || ':' || s.subject_c
d || ':' || s.sample_cd,'(::){2,}', ':')                                        
		  end                                                                         
	  and s.trial_cd = f.sourcesystem_cd                                           
	  and f.c_hlevel = 0                                                           
	;                                                                              
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted sample data in i2b2de
modata sample_categories',SQL%ROWCOUNT,stepCt,'Done');                          
	commit;                                                                        
                                                                                
	if newjobflag = 1                                                              
	then                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	end if;                                                                        
                                                                                
	exception                                                                      
	when others then                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		                                                                              
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_SAMPLE_CATEGORIES"             
                                                                                
(                                                                               
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
	--	JEA@20110916	New                                                            
	--	JEA@20120209	Remove insert of sample to patient_dimension                   
                                                                                
	--                                                                             
	-- Copyright ? 2011 Recombinant Data Corp.                                     
	--                                                                             
                                                                                
BEGIN                                                                           
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
                                                                                
	--	delete any data for study in sample_categories_extrnl from lz_src_sample_cat
egories                                                                         
	                                                                               
	delete from lz_src_sample_categories                                           
	where trial_cd in (select distinct trial_cd from lt_src_sample_categories);    
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted existing study data in
 lz_src_sample_categories',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;	                                                                       
                                                                                
/*	                                                                             
	--	create records in patient_dimension for samples if they do not exist        
	--	format of sourcesystem_cd:  trial:S:[site:]subject_cd:sample_cd             
	--	if no sample_cd specified, then the patient_num of the trial:[site]:subject_
cd should have already been created                                             
	                                                                               
	insert into patient_dimension                                                  
    ( patient_num,                                                              
      sex_cd,                                                                   
      age_in_years_num,                                                         
      race_cd,                                                                  
      update_date,                                                              
      download_date,                                                            
      import_date,                                                              
      sourcesystem_cd                                                           
    )                                                                           
    select seq_patient_num.nextval,                                             
		   null as sex_cd,                                                            
		   0 as age_in_years_num,                                                     
		   null as race_cd,                                                           
		   sysdate,                                                                   
		   sysdate,                                                                   
		   sysdate,                                                                   
		   regexp_replace(s.trial_cd || ':S:' || s.site_cd || ':' || s.subject_cd || '
:' || s.sample_cd,                                                              
						  '(::){1,}', ':')                                                        
	from (select distinct trial_cd                                                 
	             ,site_cd                                                          
				 ,subject_cd                                                                
				 ,sample_cd                                                                 
		  from sample_categories_extrnl s                                             
		  where s.sample_cd is not null                                               
			and not exists                                                               
				(select 1 from patient_dimension x                                          
				 where x.sourcesystem_cd =                                                  
					   regexp_replace(s.trial_cd || ':S:' || s.site_cd || ':' || s.subject_cd |
| ':' || s.sample_cd,                                                           
					 '(::){1,}', ':'))                                                         
		  ) s;                                                                        
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Added new sample_cds for study
 in I2B2DEMODATA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                
	commit;                                                                        
*/                                                                              
                                                                                
	--	Load data into lz_src_sample_categories table, joins to make sure study/tria
l exists and there's an entry in the patient_dimension                          
	                                                                               
	insert into lz_src_sample_categories                                           
	(trial_cd                                                                      
	,site_cd                                                                       
	,subject_cd                                                                    
	,sample_cd                                                                     
	,category_cd                                                                   
	,category_value                                                                
	)                                                                              
	select distinct s.trial_cd                                                     
		  ,s.site_cd                                                                  
		  ,s.subject_cd                                                               
		  ,s.sample_cd                                                                
		  ,replace(s.category_cd,'"',null)                                            
		  ,replace(s.category_value,'"',null)                                         
	from lt_src_sample_categories s                                                
	where replace(s.category_cd,'"',null) is not null                              
	  and replace(s.category_value,'"',null) is not null                           
	  and s.trial_cd in (select distinct x.sourcesystem_cd from i2b2 x)            
	;                                                                              
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted sample data in lz_src
_sample_categories',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
                                                                                
	if newjobflag = 1                                                              
	then                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	end if;                                                                        
                                                                                
	exception                                                                      
	when others then                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		                                                                              
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_RBM_DATA"                      
(                                                                               
  trial_id VARCHAR2                                                             
 ,rbm_type CHAR --Z or O (Z for Zscore, O for Observed value)                   
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
--PROCEDURE TO LOAD THE DEAPP SAMPLE MAPPING TABLE AND I2B2 TREE WITH RBM DATA  
--KCR: 06-25-2009                                                               
--RBM DATA SHOULD HAVE A ZSCORE AND OBSERVER VALUE. THESE SHOULD BOTH APPEAR.   
--IN GENERAL THE SAMPLE MAPPING TABLE WILL HAVE 2 RECORDS FOR EACH RECORD ON THE
 RBM TABLE.                                                                     
--1 FOR ZSCORE, 1 FOR OBSERVED.                                                 
--JOIN IS ON THE DATA_UID (UNIQUE ON RBM DATA, BUT NOT ON THE SAMPLE MAPPING)   
--THE FOLLOWING FIELDS SHOULD MAKE THE RBM RECORDS UNIQUE:                      
  --TRIAL NAME, TIMEPOINT, ANTIGEN NAME, PATIENT ID                             
--FOR I2B2, DATA IS GROUPED BY CATEOGRY, SO PATIENT ID IS NOT USED WHEN GENERATI
NG THE CONCEPT CODE.                                                            
  --Key: TRIAL NAME, TIMEPOINT, ANTIGEN NAME                                    
  --The concept codes will also be differentiated by Zscore or Observed Value   
                                                                                
  --	JEA@20090908	Changed data_uid to trial_name || '-RBM-' || timepoint || '-' 
|| substr(antigen_name,1, 20) || '-' || patient_id so that it remains the same  
  --					regardless of Observed/Z Score, concept_cd still has RBMType as part of
 string                                                                         
  --	JEA@20091118	Added auditing                                                
  --	JEA@20100201	Renamed to I2B2_LOAD_RBM_DATA from I2B2_PROCESS_RBM_DATA for c
onsistency amoung mRNA, RBM, and protein load procedures                        
                                                                                
  TrialID varchar2(100);                                                        
  RBMType char(1);                                                              
  RootNode VARCHAR2(100);                                                       
  pExists number;                                                               
  rbmName varchar2(20);                                                         
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
                                                                                
BEGIN                                                                           
  TrialID := upper(trial_id);                                                   
  RBMType := upper(rbm_type);                                                   
                                                                                
                                                                                
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_load_rbm_d
ata',0,stepCt,'Done');                                                          
                                                                                
    --Quit if no valid type                                                     
  if RBMType NOT IN ('Z', 'O') then                                             
    stepCt := stepCt + 1;                                                       
	control.cz_write_audit(jobId,databaseName,procedureName,'Invalid rbmType, must 
be O or Z',0,stepCt,'Done');                                                    
    RETURN;                                                                     
  end if;                                                                       
                                                                                
  if RBMType = 'O' then                                                         
     rbmName := 'Observed';                                                     
  else                                                                          
	  rbmName := 'Z Score';                                                        
  end if;                                                                       
                                                                                
  --Determine root value of I2B2: Could be Clinical or Experimental             
  select parse_nth_value(c_fullname, 2, '\') into RootNode                      
  from i2b2                                                                     
  where c_name = TrialID;                                                       
                                                                                
  --if Root Node is null, then add a root node as a clinical trial as a default.
                                                                                
  if RootNode is null then                                                      
    i2b2_add_node(TrialID, '\Clinical Trials\' || TrialID || '\', TrialID, jobID
);                                                                              
    RootNode := 'Clinical Trials';                                              
  end if;                                                                       
                                                                                
  --Cleanup any existing data                                                   
  delete                                                                        
    from DE_SUBJECT_SAMPLE_MAPPING                                              
    where trial_name = TrialID                                                  
      and concept_code like '%' || TrialID || '%-' || RBMType  || '-%'; --Making
 sure only The ZScore or Observed gets deleted for RBM Data                     
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial
 from DEAPP de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');             
	                                                                               
  commit;                                                                       
                                                                                
  --	check if RBM node exists, if not add (first time adding RBM data)          
                                                                                
  select count(*) into pExists                                                  
  from i2b2                                                                     
  where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\Protei
n\RBM\';                                                                        
                                                                                
  if pexists = 0 then                                                           
	 i2b2_add_node(trialID, '\' || RootNode || '\' || trialID || '\Biomarker Data\P
rotein\RBM\', 'RBM', jobID);                                                    
     stepCt := stepCt + 1;                                                      
     control.cz_write_audit(jobId,databaseName,procedureName,'Added RBM node for
 trial in I2B2METADATA i2b2',0,stepCt,'Done');                                  
	 i2b2_fill_in_tree(TrialId, trialID, '\' || RootNode || '\' || trialID || '\Bio
marker Data\');                                                                 
  end if;                                                                       
                                                                                
    --	check if RBMType node exists, if yes, then delete existing data          
	                                                                               
  select count(*) into pExists                                                  
  from i2b2                                                                     
  where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\Protei
n\RBM\' || rbmName || '\';                                                      
                                                                                
  if pExists != 0 then                                                          
  --This deletes all i2b2, concept_dimension, and observation_fact records wher 
the path starts with the passed paramenter                                      
	i2b2_delete_all_nodes('\' || RootNode || '\'|| TrialID || '\Biomarker Data\Prot
ein\RBM\' || rbmName || '\', jobID);                                            
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Delete existing RBM
Type data for trial in I2B2METADATA i2b2',0,stepCt,'Done');                     
  end if;                                                                       
                                                                                
  --Create value for DATA_UID and concept_cd                                    
  --Only taking first 20 Characters for ANTIGEN NAME because I2B2 has a 50 char 
limit on concept_cd                                                             
  --MUST BE Distinct on this table.                                             
                                                                                
  update de_subject_rbm_data                                                    
    set data_uid = replace(trial_name || '-RBM-' || timepoint || '-' || substr(a
ntigen_name,1, 20) || '-' || patient_id,' ','')                                 
	   ,concept_cd = replace(trial_name || '-' || RBMType || '-' || timepoint || '-
' || substr(antigen_name,1, 20),' ','')                                         
    where trial_name = TrialID;                                                 
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Update data_uid and c
oncept_cd in de_subject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                  
                                                                                
  commit;                                                                       
                                                                                
/*  combined into single update pass                                            
--Update concept Code with the correct value of data_uid minus the patient info 
  update de_subject_rbm_data                                                    
    set concept_cd = trial_name || '-' || RBMType || '-' || timepoint || '-' || 
substr(antigen_name,1, 20)                                                      
    where trial_name = TrialID;                                                 
  commit;                                                                       
                                                                                
  --Trim out any spaces                                                         
  update de_subject_rbm_data                                                    
    set data_uid = replace(data_uid, ' ', ''),                                  
    concept_cd = replace(concept_cd, ' ', '')                                   
    where trial_name = TrialID;                                                 
  commit;                                                                       
*/                                                                              
                                                                                
                                                                                
  --update RBM SAMPLE MAPPING TABLE FOR TREE NODE ROLLUP                        
  --NEED TO MAP ALL OF THE CONCEPT CODES INTO THE TABLE                         
  --HIERARCHY IS:                                                               
  --1: --TRIAL\BIOMARKER DATA\PROTEIN\RBM\ = platform_cd                        
  --3: --TRIAL\BIOMARKER DATA\PROTEIN\RBM\Observered or ZScore\Specific Week\ = 
timepoint_cd                                                                    
  --4: --TRIAL\BIOMARKER DATA\PROTEIN\RBM\Observered or ZScore\Specific Week\Ant
igene\ = concept_code                                                           
                                                                                
  --Load the DE_SUBJECT_SAMPLE_MAPPING                                          
  --MAPPING: (1 to 1 relationship for RBM)                                      
  --CONCEPT_CODE    = trial_name || 'ZSc-' || timepoint || '-' || antigen_name  
(Group patient for I2B2)                                                        
                      --NOTE: ZSc = Z-score. Would be Obs for Observered        
  --PATIENT_ID      = RBM.PATIENT_ID (SAME AS ID ON THE PATIENT_DIMENSION)      
  --TRIAL_NAME      = RBM.TRIAL_NAME                                            
  --TIMEPOINT       = RBM.TIMEPOINT                                             
  --ASSAY_ID        = RBM.ASSAY_ID                                              
  --PLATFORM        = "RBM"                                                     
  --PLATFORM_CD     = trial_name || 'RBM'                                       
  --TISSUE_TYPE     = "Serum"                                                   
  --SITE_ID         = NULL                                                      
  --SUBJECT_ID      = NULL                                                      
  --SUBJECT_TYPE    = NULL                                                      
  --PATIENT_UID     = NULL                                                      
  --SAMPLE_TYPE     = NULL                                                      
  --ASSAY_UID       = NULL                                                      
  --TIMEPOINT_CD    = trial_name || 'RBM' || '-' || RBMType || '-' || timepoint 
  --SAMPLE_TYPE_CD  = trial_name || 'RBM' || '-' || RBMType                     
  --TISSUE_TYPE_CD  = NULL                                                      
                                                                                
  INSERT                                                                        
  INTO DE_SUBJECT_SAMPLE_MAPPING                                                
    (                                                                           
      DATA_UID,                                                                 
      CONCEPT_CODE,                                                             
      PATIENT_ID,                                                               
      TRIAL_NAME,                                                               
      TIMEPOINT,                                                                
      ASSAY_ID,                                                                 
      PLATFORM,                                                                 
      PLATFORM_CD,                                                              
      timepoint_cd,                                                             
      TISSUE_TYPE                                                               
    )                                                                           
  select distinct                                                               
    a.data_uid,                                                                 
    a.concept_cd,                                                               
    a.patient_id,                                                               
    a.trial_name,                                                               
    a.timepoint,                                                                
    a.assay_id,                                                                 
    'RBM',                                                                      
    a.trial_name || ':RBM',                                                     
    a.trial_name || ':RBM:' || RBMType || ':' || a.timepoint,                   
    'Serum'                                                                     
  from                                                                          
    de_subject_rbm_data a                                                       
    --Joining to Pat_dim to ensure the ID's match. If not I2B2 won't work.      
  join                                                                          
    patient_dimension b                                                         
  on                                                                            
    a.patient_id = b.patient_num                                                
    where a.trial_name = TrialID;                                               
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial
 into DEAPP de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');             
                                                                                
  commit;                                                                       
                                                                                
  --Build Dataset Explorer Records:                                             
    --need to build out specific levels of the tree individually                
    --because the concept_cd must be specifically assigned at each level        
                                                                                
/*	RBM node done at start of procedure                                          
                                                                                
    --RBM NODE                                                                  
    --CONCEPT_DIMENSION                                                         
    INSERT INTO CONCEPT_DIMENSION                                               
      (CONCEPT_CD, CONCEPT_PATH, NAME_CHAR,  UPDATE_DATE,  DOWNLOAD_DATE, IMPORT
_DATE, SOURCESYSTEM_CD, TABLE_NAME)                                             
    select distinct                                                             
      a.platform_cd,                                                            
      '\' || RootNode || '\' || a.trial_name || '\Biomarker Data\Protein\RBM\', 
      'RBM',                                                                    
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      a.Trial_name,                                                             
      'CONCEPT_DIMENSION'                                                       
    from                                                                        
      de_subject_sample_mapping a                                               
    where a.trial_name = TrialID                                                
      and a.platform = 'RBM';                                                   
    Commit;                                                                     
*/                                                                              
                                                                                
    --TIME POINTS                                                               
    --CONCEPT_DIMENSION                                                         
    INSERT INTO CONCEPT_DIMENSION                                               
      (CONCEPT_CD, CONCEPT_PATH, NAME_CHAR,  UPDATE_DATE,  DOWNLOAD_DATE, IMPORT
_DATE, SOURCESYSTEM_CD, TABLE_NAME)                                             
    select distinct                                                             
      a.timepoint_cd,                                                           
      case                                                                      
        when RBMType = 'Z' then                                                 
          '\' || RootNode || '\' || a.trial_name || '\Biomarker Data\Protein\RBM
\Z Score\' || timepoint || '\'                                                  
        when RBMType = 'O' then                                                 
          '\' || RootNode || '\' || a.trial_name || '\Biomarker Data\Protein\RBM
\Observed\' || timepoint || '\'                                                 
      end,                                                                      
      timepoint,                                                                
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      a.Trial_name,                                                             
      'CONCEPT_DIMENSION'                                                       
    from                                                                        
      de_subject_sample_mapping a                                               
    where a.trial_name = TrialID                                                
      and a.platform = 'RBM'                                                    
      and a.concept_code like '%-' || RBMType || '-%';                          
    stepCt := stepCt + 1;                                                       
    control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for RBM
Type and timepoint into I2B2DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Don
e');                                                                            
                                                                                
    Commit;                                                                     
                                                                                
  --Node Path will be:                                                          
  --Clinical Trial + Trial_name + Biomarker Data + Protein-RBM + timepoint + ant
igen_name                                                                       
    INSERT INTO CONCEPT_DIMENSION                                               
      (CONCEPT_CD, CONCEPT_PATH, NAME_CHAR,  UPDATE_DATE,  DOWNLOAD_DATE, IMPORT
_DATE, SOURCESYSTEM_CD, TABLE_NAME)                                             
    select distinct                                                             
      a.concept_cd,                                                             
      case                                                                      
        when RBMType = 'Z' then                                                 
          '\' || RootNode || '\' || a.trial_name || '\Biomarker Data\Protein\RBM
\Z Score\' || a.timepoint || '\' || a.antigen_name || '\'                       
        when RBMType = 'O' then                                                 
          '\' || RootNode || '\' || a.trial_name || '\Biomarker Data\Protein\RBM
\Observed\' || a.timepoint || '\' || a.antigen_name || '\'                      
      end,                                                                      
      a.antigen_name,                                                           
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      a.Trial_name,                                                             
      'CONCEPT_DIMENSION'                                                       
    from                                                                        
      de_subject_rbm_data a                                                     
    where a.trial_name = TrialID                                                
      and a.concept_cd like '%' || a.trial_name || '%-' || RBMType  || '-%'; --M
aking sure only The ZScore or Observed gets added for RBM Data                  
    stepCt := stepCt + 1;                                                       
    control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for RBM
Type, timepoint and antigen into I2B2DEMODATA concept_dimension',SQL%ROWCOUNT,st
epCt,'Done');                                                                   
                                                                                
    Commit;                                                                     
                                                                                
  --OBSERVATION_FACT                                                            
  INSERT                                                                        
  INTO OBSERVATION_FACT                                                         
    (                                                                           
      PATIENT_NUM,                                                              
      CONCEPT_CD,                                                               
      MODIFIER_CD,                                                              
      VALTYPE_CD,                                                               
      TVAL_CHAR,                                                                
      NVAL_NUM,                                                                 
      SOURCESYSTEM_CD,                                                          
      IMPORT_DATE,                                                              
      VALUEFLAG_CD,                                                             
      PROVIDER_ID,                                                              
      LOCATION_CD,                                                              
      UNITS_CD                                                                  
    )                                                                           
/*                                                                              
    select distinct                                                             
      a.patient_id,                                                             
      a.concept_cd,                                                             
      a.trial_name,                                                             
      'N', -- Numeric data type                                                 
      'E',  --Stands for Equals for numeric types                               
      case                                                                      
        when RBMType = 'Z' then                                                 
          a.zscore                                                              
        when RBMType = 'O' then                                                 
          a.value                                                               
      end,                                                                      
      a.trial_name,                                                             
      sysdate,                                                                  
      '@',                                                                      
      '@',                                                                      
      '@',                                                                      
      '' -- no units available                                                  
    from de_subject_rbm_data a                                                  
    where a.trial_name = TrialID                                                
      and a.concept_cd like '%' || TrialID || '%-' || RBMType  || '-%' --Making 
sure only The ZScore or Observed gets deleted for RBM Data                      
      and a.value is not null                                                   
      and a.zscore is not null;                                                 
  */                                                                            
    --WORKAROUND TO TAKE AVERAGE SCORE                                          
    select                                                                      
      a.patient_id,                                                             
      a.concept_cd,                                                             
      a.trial_name,                                                             
      'N', -- Numeric data type                                                 
      'E',  --Stands for Equals for numeric types                               
      case                                                                      
        when RBMType = 'Z' then                                                 
          AVG(a.zscore)                                                         
        when RBMType = 'O' then                                                 
          AVG(a.value)                                                          
      end,                                                                      
      a.trial_name,                                                             
      sysdate,                                                                  
      '@',                                                                      
      '@',                                                                      
      '@',                                                                      
      '' -- no units available                                                  
    from deapp.de_subject_rbm_data a                                            
    where a.trial_name = TrialID                                                
      and a.concept_cd like '%' || TrialID || '%-' || RBMType  || '-%' --Making 
sure only The ZScore or Observed gets deleted for RBM Data                      
      and a.value is not null                                                   
      and a.zscore is not null                                                  
    group by                                                                    
      a.patient_id,                                                             
      a.concept_cd,                                                             
      a.trial_name;                                                             
    stepCt := stepCt + 1;                                                       
    control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for tri
al into I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');             
                                                                                
    commit;                                                                     
                                                                                
    --I2B2: Build all paths at once                                             
   INSERT                                                                       
     INTO I2B2                                                                  
      (c_hlevel, C_FULLNAME, C_NAME, C_VISUALATTRIBUTES, c_synonym_cd, C_FACTTAB
LECOLUMN, C_TABLENAME, C_COLUMNNAME,                                            
      C_DIMCODE, C_TOOLTIP, UPDATE_DATE, DOWNLOAD_DATE, IMPORT_DATE, SOURCESYSTE
M_CD, c_basecode, C_OPERATOR, c_columndatatype, c_metadataxml, c_comment)       
    SELECT                                                                      
      (length(concept_path) - nvl(length(replace(concept_path, '\')),0)) / lengt
h('\') - 3,                                                                     
      CONCEPT_PATH,                                                             
      NAME_CHAR,                                                                
      'LA',                                                                     
      'N',                                                                      
      'concept_cd',                                                             
      'concept_dimension',                                                      
      'concept_path',                                                           
      CONCEPT_PATH,                                                             
      CONCEPT_PATH,                                                             
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      SOURCESYSTEM_CD,                                                          
      CONCEPT_CD,                                                               
      'LIKE',                                                                   
      'N',                                                                      
      '<?xml version="1.0"?><ValueMetadata><Version>3.02</Version><CreationDateT
ime>08/14/2008 01:22:59</CreationDateTime><TestID></TestID><TestName></TestName>
<DataType>PosFloat</DataType><CodeType></CodeType><Loinc></Loinc><Flagstouse></F
lagstouse><Oktousevalues>Y</Oktousevalues><MaxStringLength></MaxStringLength><Lo
wofLowValue>0</LowofLowValue><HighofLowValue>0</HighofLowValue><LowofHighValue>1
00</LowofHighValue>100<HighofHighValue>100</HighofHighValue><LowofToxicValue></L
owofToxicValue><HighofToxicValue></HighofToxicValue><EnumValues></EnumValues><Co
mmentsDeterminingExclusion><Com></Com></CommentsDeterminingExclusion><UnitValues
><NormalUnits>ratio</NormalUnits><EqualUnits></EqualUnits><ExcludingUnits></Excl
udingUnits><ConvertingUnits><Units></Units><MultiplyingFactor></MultiplyingFacto
r></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New /></Analysis>
</ValueMetadata>' ,                                                             
      'trial:' ||  TrialID                                                      
    FROM                                                                        
      CONCEPT_DIMENSION                                                         
    WHERE                                                                       
      CONCEPT_PATH LIKE '\' || RootNode || '\' || TrialID || '\Biomarker Data\Pr
otein\RBM\' || rbmName || '%';                                                  
    stepCt := stepCt + 1;                                                       
    control.cz_write_audit(jobId,databaseName,procedureName,'Insert nodes for tr
ial into I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                        
                                                                                
    COMMIT;                                                                     
	                                                                               
    --Adding rbm type node. dont care about Concept_cd. User cannot drag it.    
	                                                                               
    if RBMType = 'Z' then                                                       
      i2b2_add_node(trialID, '\' || RootNode || '\' || trialID || '\Biomarker Da
ta\Protein\RBM\Z Score\', 'Z Score',jobID);                                     
    else                                                                        
      i2b2_add_node(trialID, '\' || RootNode || '\' || trialID || '\Biomarker Da
ta\Protein\RBM\Observed\', 'Observed',jobID);                                   
    end if;                                                                     
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Add RBMType node in
 I2B2METADATA i2b2',0,stepCt,'Done');                                           
                                                                                
    --need to set folders correctly.                                            
    update i2b2                                                                 
      set c_visualattributes = 'FA',                                            
      c_columndatatype = 'T',                                                   
      c_metadataxml = ''                                                        
        where c_fullname like '\' || RootNode || '\' || TrialID || '\Biomarker D
ata\Protein\RBM\' || rbmName || '\%'                                            
          and c_hlevel < 6;                                                     
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Update visual attri
butes for folders nodes in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');      
                                                                                
    commit;                                                                     
	                                                                               
  --Build concept Counts                                                        
  --Also marks any i2B2 records with no underlying data as Hidden, need to do th
is at the RBM level because patient counts may have changed                     
	i2b2_create_concept_counts('\' || RootNode || '\' || TrialID || '\Biomarker Dat
a\Protein\RBM\',jobID);                                                         
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Update patient coun
ts for trial in I2B2DEMODATA concept_counts',0,stepCt,'Done');                  
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
	i2b2_load_security_data(jobID);                                                
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Reload security for
 trial in I2B2METADATA i2b2_secure',0,stepCt,'Done');                           
                                                                                
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'End i2b2_load_rbm_dat
a',0,stepCt,'Done');                                                            
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_PROTEIN_DATA"                  
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  --	JEA@20100128	New                                                           
                                                                                
  TrialID varchar2(100);                                                        
  RootNode VARCHAR2(100);                                                       
  pExists number;                                                               
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
	--	cursor for add_nodes                                                        
	                                                                               
  CURSOR addNodes is                                                            
  select distinct REGEXP_REPLACE('\' || rootnode || '\' || TrialID || '\Biomarke
r Data\Protein\Proteomics\' || timepoint || '\' ,                               
                  '(\\){2,}', '\') as path                                      
         ,timepoint as node_name                                                
  from  deapp.de_subject_protein_data                                           
  where trial_name = TrialId;                                                   
	                                                                               
BEGIN                                                                           
  TrialID := upper(trial_id);                                                   
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  stepCt := stepCt + 1;                                                         
  control.cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_load_pr
otein_data',0,stepCt,'Done');                                                   
	                                                                               
  --Determine if trial exists in i2b2, if not add                               
                                                                                
  select count(*)                                                               
  into pExists                                                                  
  from i2b2metadata.i2b2                                                        
  where c_name = TrialID                                                        
    and c_hlevel = 0;                                                           
                                                                                
  --if trial does not exist in i2b2, then add a root node as a clinical trial   
  if pExists = 0 then                                                           
    i2b2_add_node(TrialID, '\Clinical Trials\' || TrialID || '\', TrialID, jobID
);                                                                              
    RootNode := 'Clinical Trials';                                              
  end if;                                                                       
                                                                                
	--Cleanup any existing data from raw table                                     
                                                                                
	delete from deapp_wz.stg_subject_protein_data_raw                              
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ stg_subject_protein_data_raw',SQL%ROWCOUNT,stepCt,'Done');        
	commit;                                                                        
                                                                                
	--	Insert into raw data table from staging                                     
                                                                                
	insert into deapp_wz.stg_subject_protein_data_raw                              
	(trial_name                                                                    
	,component                                                                     
	,intensity_text                                                                
	,timepoint                                                                     
	,assay_id                                                                      
	,gene_symbol                                                                   
	,gene_id                                                                       
	,subject_id                                                                    
	,site_id                                                                       
	)                                                                              
	select trial_name                                                              
		  ,component                                                                  
		  ,intensity_text                                                             
		  ,timepoint                                                                  
		  ,assay_id                                                                   
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,subject_id                                                                 
		  ,site_id                                                                    
	from deapp_wz.stg_subject_protein_data                                         
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial 
into DEAPP_WZ stg_subject_protein_data_raw',SQL%ROWCOUNT,stepCt,'Done');        
	commit;                                                                        
                                                                                
	--	Perform node-curation on timepoint                                          
                                                                                
	update deapp_wz.stg_subject_protein_data a                                     
    set a.timepoint =                                                           
       (select replace(Upper(a.timepoint), b.node_name, b.display_name)         
        from node_curation b                                                    
        where b.node_type = 'VISIT_NAME'                                        
          and upper(a.timepoint) = b.node_name                                  
          and b.active_flag = 'Y'                                               
          and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                
		  and b.global_flag =                                                         
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
      )                                                                         
    where exists                                                                
    (select 1                                                                   
      from node_curation b                                                      
      where b.node_type = 'VISIT_NAME'                                          
        and upper(a.timepoint) = b.node_name                                    
        and b.active_flag = 'Y'                                                 
        and (b.global_flag = 'Y' OR b.study_id = a.trial_name)                  
		and b.global_flag =                                                           
			 (select min(x.global_flag) from node_curation x                             
			  where b.node_type = x.node_type                                            
                and b.node_name = x.node_name                                   
                and (x.global_flag = 'Y' or a.trial_name = x.study_id)          
             )                                                                  
    );                                                                          
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated timepoints in 
DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;	                                                                       
                                                                                
	--	Update any values that contain < to value-.01 and that contain > to value+.0
1                                                                               
	                                                                               
	update deapp_wz.stg_subject_protein_data t                                     
	set intensity_text=decode(instr(intensity_text,'<'),0,to_char(to_number(replace
(intensity_text,'>',''))+.01),to_char(to_number(replace(intensity_text,'<',''))-
.01))                                                                           
	where (intensity_text like '%<%' or intensity_text like '%>%')                 
	  and control.is_number(replace(replace(intensity_text,'<',''),'>','')) = 0;   
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated values with < 
or > in DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');         
	commit;	                                                                       
                                                                                
	--	Delete any data where component is null and value is null                   
	                                                                               
	delete from deapp_wz.stg_subject_protein_data                                  
	where component is null                                                        
	  and intensity_text is null;                                                  
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete records with nu
ll component and intensity_text in DEAPP_WZ stg_subject_protein_data',SQL%ROWCOU
NT,stepCt,'Done');                                                              
	commit;	                                                                       
                                                                                
	--	Update numeric values                                                       
	                                                                               
	update deapp_wz.stg_subject_protein_data                                       
	set intensity=to_number(intensity_text)                                        
	where control.is_number(intensity_text) = 0;                                   
	                                                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated numeric values
 in DEAPP_WZ stg_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');             
	commit;		                                                                      
                                                                                
	--Cleanup any existing data from data file                                     
                                                                                
	delete from deapp_wz.de_subject_protein_data                                   
    where trial_name = TrialID;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial 
from DEAPP_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');             
	commit;                                                                        
                                                                                
	--	create temporary indexes                                                    
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'DEAPP_WZ'                                                       
	  and index_name = 'stg_subject_protein_data_I1';                              
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index deapp_wz.stg_subject_protein_data_i1');         
	end if;                                                                        
	execute immediate('create index deapp_wz.stg_subject_protein_data_i1 on deapp_w
z.stg_subject_protein_data (component, subject_id) tablespace deapp');          
                                                                                
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2_LZ'                                                        
	  and index_name = 'PROTEIN_PATIENT_INFO_I1';                                  
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2_lz.protein_patient_info_i1');              
	end if;                                                                        
	                                                                               
	execute immediate('create index i2b2_lz.protein_patient_info_i1 on i2b2_lz.pati
ent_info (study_id, subject_id, usubjid) tablespace i2b2_data');                
	                                                                               
	select count(*)                                                                
	into pExists                                                                   
	from all_indexes                                                               
	where owner = 'I2B2DEMODATA'                                                   
	  and index_name = 'PROTEIN_PATIENT_DIMENSION_I1';                             
	                                                                               
	if pExists > 0 then                                                            
		execute immediate('drop index i2b2demodata.protein_patient_dimension_i1');    
	end if;	                                                                       
			                                                                             
	execute immediate('create index i2b2demodata.protein_patient_dimension_i1 on i2
b2demodata.patient_dimension (sourcesystem_cd) tablespace i2b2_data');          
	                                                                               
    insert into deapp_wz.de_subject_protein_data                                
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,zscore                                                                        
	)                                                                              
	select p.trial_name                                                            
		  ,p.component                                                                
		  ,avg(p.intensity) as value                                                  
		  ,avg(p.intensity) as n_value                                                
		  ,pd.patient_num                                                             
		  ,p.gene_symbol                                                              
		  ,p.gene_id                                                                  
		  ,p.assay_id                                                                 
		  ,p.timepoint                                                                
		  ,0 as zscore                                                                
	from deapp_wz.stg_subject_protein_data p                                       
		,i2b2_lz.patient_info pi                                                      
		,i2b2demodata.patient_dimension pd                                            
	where p.subject_id = pi.subject_id                                             
	  and nvl(p.site_id,'**NULL**') = nvl(pi.site_id,'**NULL**')                   
	  and pi.study_id = TrialId                                                    
	  and pi.usubjid = pd.sourcesystem_cd                                          
	  and p.trial_name = TrialId                                                   
	  and p.intensity is not null                                                  
	  and p.intensity > 0                                                          
	  and p.gene_symbol is not null                                                
	  group by p.trial_name                                                        
		  ,p.component                                                                
		  ,pd.patient_num                                                             
		  ,p.gene_symbol                                                              
		  ,p.gene_id                                                                  
		  ,p.assay_id                                                                 
		  ,p.timepoint;                                                               
	                                                                               
	stepCt := stepCt + 1;                                                          
    control.cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into
 DEAPP_WZ de_subject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                 
	commit;                                                                        
                                                                                
	execute immediate('drop index deapp_wz.stg_subject_protein_data_i1');          
	execute immediate('drop index i2b2_lz.protein_patient_info_i1');               
	execute immediate('drop index i2b2demodata.protein_patient_dimension_i1');     
	                                                                               
	--	ZScore calculation which will insert data to deapp.de_subject_protein_data  
	                                                                               
	i2b2_protein_zscore_calc(Trialid, jobid);                                      
	                                                                               
--	add the high level \Biomarker Data\ node if it doesn't exist (first time load
ing data)                                                                       
                                                                                
	select count(*)                                                                
	into pExists                                                                   
	from i2b2                                                                      
	where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\';     
                                                                                
	if pExists = 0 then                                                            
		i2b2_add_node(trialID, '\' || RootNode || '\' || trialID || '\Biomarker Data\'
, 'Biomarker Data', jobID);                                                     
        stepCt := stepCt + 1;                                                   
	    control.cz_write_audit(jobId,databaseName,procedureName,'Add Biomarker Data
 node for trial',0,stepCt,'Done');                                              
	end if;                                                                        
                                                                                
    --	check if Proteomics node exists, if yes, then delete existing data       
	                                                                               
	select count(*) into pExists                                                   
	from i2b2                                                                      
	where c_fullname = '\' || RootNode || '\'|| TrialID || '\Biomarker Data\Protein
\Proteomics\';                                                                  
		                                                                              
	if pExists != 0 then                                                           
		--This deletes all i2b2, concept_dimension, and observation_fact records wher 
the path starts with the passed paramenter                                      
		i2b2_delete_all_nodes('\' || RootNode || '\'|| TrialID || '\Biomarker Data\Pro
tein\Proteomics\', jobID);                                                      
		stepCt := stepCt + 1;                                                         
		control.cz_write_audit(jobId,databaseName,procedureName,'Delete existing Prote
omics data for trial in I2B2METADATA i2b2',0,stepCt,'Done');                    
	end if;                                                                        
	                                                                               
	--	Cleanup any existing data in de_subject_sample_mapping.                     
	                                                                               
	delete from deapp.DE_SUBJECT_SAMPLE_MAPPING                                    
	where trial_name = TrialID                                                     
	  and platform = 'Protein'                                                     
	  and platform_cd = trialID || ':Protein'; --Making sure only protein data is d
eleted                                                                          
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete trial from DEAP
P de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                       
	commit;                                                                        
	                                                                               
	--	add \Biomarker\Protein\Proteomics\timepoint nodes                           
	                                                                               
	FOR r_addNodes in addNodes Loop                                                
		                                                                              
		i2b2_add_node(TrialId, r_addNodes.path, r_addNodes.node_name, jobId);         
                                                                                
	End loop;                                                                      
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Added Biomarker\Protei
n\Proteomics\timepoint nodes',0,stepCt,'Done');                                 
	commit;                                                                        
	                                                                               
  --Load the DE_SUBJECT_SAMPLE_MAPPING from deapp_wz.stg_subject_mrna_data      
                                                                                
  --CONCEPT_CODE    = generated JNJ concept code                                
  --PATIENT_ID      = PATIENT_ID (SAME AS ID ON THE PATIENT_DIMENSION)          
  --TRIAL_NAME      = TRIAL_NAME                                                
  --TIMEPOINT       = TIMEPOINT                                                 
  --ASSAY_ID        = ASSAY_ID                                                  
  --PLATFORM        = Protein - this is required by ui code                     
  --PLATFORM_CD     = trial_name || 'Protein'                                   
  --TISSUE_TYPE     = NULL                                                      
  --SITE_ID         = NULL                                                      
  --SUBJECT_ID      = NULL                                                      
  --SUBJECT_TYPE    = NULL                                                      
  --PATIENT_UID     = NULL                                                      
  --SAMPLE_TYPE     = NULL                                                      
  --ASSAY_UID       = NULL                                                      
  --TIMEPOINT_CD    = same as concept_cd                                        
  --SAMPLE_TYPE_CD  = NULL                                                      
  --TISSUE_TYPE_CD  = NULL                                                      
  --GPL_ID			= NULL                                                             
                                                                                
	insert into de_subject_sample_mapping                                          
	(data_uid                                                                      
	,concept_code                                                                  
	,patient_id                                                                    
	,trial_name                                                                    
	,timepoint                                                                     
	,assay_id                                                                      
	,platform                                                                      
	,platform_cd                                                                   
	,timepoint_cd                                                                  
	,sample_type                                                                   
	,sample_type_cd                                                                
	,gpl_id                                                                        
    )                                                                           
	select distinct replace(cd.concept_cd || '-' || a.patient_id,' ','') as data_ui
d                                                                               
	      ,cd.concept_cd                                                           
		  ,a.patient_id                                                               
		  ,a.trial_name                                                               
		  ,a.timepoint                                                                
		  ,a.assay_id                                                                 
		  ,'Protein'                                                                  
		  ,a.trial_name || ':Protein'                                                 
		  ,cd.concept_cd as timepoint_cd                                              
		  ,null                                                                       
		  ,null as sample_type_cd                                                     
		  ,null                                                                       
	from deapp.de_subject_protein_data a		                                         
    --Joining to Pat_dim to ensure the ID's match. If not I2B2 won't work.      
	join i2b2demodata.patient_dimension b                                          
	  on a.patient_id = b.patient_num                                              
	join i2b2demodata.concept_dimension cd                                         
	  on cd.concept_path = '\' || rootNode || '\' || TrialId || '\Biomarker Data\Pr
otein\Proteomics\' || a.timepoint || '\'                                        
    where a.trial_name = TrialID;                                               
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into DEAP
P de_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                       
	commit;                                                                        
                                                                                
--	Insert records for patients and timepoints into observation_fact             
                                                                                
	insert into observation_fact                                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,sourcesystem_cd                                                               
	,import_date                                                                   
	,valueflag_cd                                                                  
	,provider_id                                                                   
	,location_cd                                                                   
	,units_cd                                                                      
    )                                                                           
    select m.patient_id                                                         
		  ,m.concept_code                                                             
		  ,m.trial_name                                                               
		  ,'T' -- Text data type                                                      
		  ,'E'  --Stands for Equals for Text Types                                    
		  ,null	--	not numeric for Proteomics                                         
		  ,m.trial_name                                                               
		  ,sysdate                                                                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'' -- no units available                                                   
    from  deapp.de_subject_sample_mapping m                                     
    where trial_name = TrialID                                                  
      and platform = 'Protein'                                                  
    group by patient_id                                                         
			,concept_code                                                                
			,trial_name;                                                                 
    stepCt := stepCt + 1;                                                       
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial into I2B2
DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                         
                                                                                
    commit;                                                                     
                                                                                
--	Update visual attributes for leaf active (default is folder)                 
                                                                                
	update i2b2 a                                                                  
    set c_visualattributes = 'LA'                                               
    where 1 = (select count(*)                                                  
			   from i2b2 b                                                               
			   where b.c_fullname like (a.c_fullname || '%'))                            
      and a.c_fullname like '\' || RootNode || '\' || TrialID || '\Biomarker Dat
a\%';                                                                           
    stepCt := stepCt + 1;                                                       
	control.cz_write_audit(jobId,databaseName,procedureName,'Update leaf active att
ribute for trial in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');             
    commit;                                                                     
	                                                                               
--	fill in tree                                                                 
                                                                                
	i2b2_fill_in_tree(TrialID,'\' || rootNode || '\' || TrialID || '\Biomarker Data
\', jobID);                                                                     
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Fill in tree for Bioma
rker Data for trial',SQL%ROWCOUNT,stepCt,'Done');                               
                                                                                
  --Build concept Counts                                                        
  --Also marks any i2B2 records with no underlying data as Hidden, need to do at
 Biomarker level because there may be multiple platforms and patient count can v
ary                                                                             
                                                                                
    i2b2_create_concept_counts('\' || RootNode || '\' || TrialID || '\Biomarker 
Data\',jobID );                                                                 
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Create concept counts'
,0,stepCt,'Done');                                                              
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
                                                                                
    i2b2_load_security_data(jobId);                                             
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Load security data',0,
stepCt,'Done');                                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'End i2b2_process_prote
in_data',0,stepCt,'Done');                                                      
		                                                                              
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_GWAS_TOP50" AS                 
BEGIN                                                                           
                                                                                
--select * from bio_assay_analysis_gwas                                         
--where bio_assay_analysis_id = 419842521                                       
--order by p_value asc, rs_id asc;                                              
                                                                                
--select * from tmp_analysis_gwas_top500                                        
--where bio_assay_analysis_id = 419842521                                       
-- order by p_value asc;                                                        
                                                                                
                                                                                
execute immediate('drop table BIOMART.tmp_analysis_gwas_top500');               
                                                                                
execute immediate('create table BIOMART.tmp_analysis_gwas_top500                
as                                                                              
select a.*                                                                      
from (                                                                          
select                                                                          
bio_asy_analysis_gwas_id,                                                       
bio_assay_analysis_id,                                                          
rs_id,                                                                          
p_value,                                                                        
log_p_value,                                                                    
etl_id,                                                                         
ext_data,                                                                       
p_value_char,                                                                   
row_number () over (partition by bio_assay_analysis_id order by p_value asc, rs_
id asc) as rnum                                                                 
from BIOMART.bio_assay_analysis_gwas                                            
--where bio_assay_analysis_id = 419842521                                       
) a                                                                             
where                                                                           
a.rnum <=500');                                                                 
                                                                                
execute immediate('create index t_a_g_t500_idx on BIOMART.TMP_ANALYSIS_GWAS_TOP5
00(RS_ID) tablespace "INDX"');                                                  
execute immediate('create index t_a_ga_t500_idx on BIOMART.TMP_ANALYSIS_GWAS_TOP
500(bio_assay_analysis_id) tablespace "INDX"');                                 
                                                                                
execute immediate('drop table BIOMART.bio_asy_analysis_gwas_top50');            
                                                                                
execute immediate('create table BIOMART.BIO_ASY_ANALYSIS_GWAS_TOP50             
as                                                                              
SELECT baa.bio_assay_analysis_id,                                               
baa.analysis_name AS analysis, info.chrom AS chrom, info.pos AS pos,            
gmap.gene_name AS rsgene, DATA.rs_id AS rsid,                                   
DATA.p_value AS pvalue, DATA.log_p_value AS logpvalue,                          
DATA.ext_data AS extdata , DATA.rnum                                            
FROM biomart.tmp_analysis_gwas_top500 DATA                                      
JOIN biomart.bio_assay_analysis baa                                             
ON baa.bio_assay_analysis_id = DATA.bio_assay_analysis_id                       
JOIN deapp.de_rc_snp_info info ON DATA.rs_id = info.rs_id and (hg_version='''||1
9||''')                                                                         
LEFT JOIN deapp.de_snp_gene_map gmap ON  gmap.snp_name =info.rs_id') ;          
                                                                                
--select count(*) from BIO_ASY_ANALYSIS_GWAS_TOP50;                             
                                                                                
execute immediate('create index BIOMART.B_ASY_GWAS_T50_IDX1 on BIOMART.BIO_ASY_A
NALYSIS_GWAS_TOP50(bio_assay_analysis_id) parallel tablespace "INDX"');         
                                                                                
execute immediate('create index BIOMART.B_ASY_GWAS_T50_IDX2 on BIOMART.BIO_ASY_A
NALYSIS_GWAS_TOP50(ANALYSIS) parallel tablespace "INDX"');                      
                                                                                
END I2B2_LOAD_GWAS_TOP50;                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_FROM_RELEASE"                  
(                                                                               
  trial_id IN VARCHAR2                                                          
 ,ont_Path IN VARCHAR2                                                          
 ,currentJobID NUMBER := null                                                   
 )                                                                              
AS                                                                              
                                                                                
	TrialId 	varchar2(200);                                                        
	ontPath 	varchar2(200);                                                        
	msgText 	varchar2(1000);                                                       
	                                                                               
	sqlText 	varchar2(2000);                                                       
	tExists 	number;                                                               
	returnCode 	number;                                                            
	gotSNP		integer;                                                               
	StudyType	varchar2(100);                                                       
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
	--	JEA@20100624	Removed gene_symbol, changed probeset to probeset_id in de_subj
ect_microarray_data,                                                            
	--					added de_mrna_annotation load (complete reload, not tied to study)      
	--	JEA@20100625	Changed check if partition exists from count of records to entr
y in all_tab_partitions table                                                   
	--	JEA@20100901	Added insert into i2b2_tags                                    
	--	JEA@20100903	Added haploview_data insert                                    
	--	JEA@20100908	Added i2b2_id to i2b2                                          
	--	JEA@20101013	Added de_gpl_info insert                                       
	--	JEA@20101202	Added rbm_panel to de_subj_sample_map_release and de_subject_rb
m_data_release                                                                  
	--	JEA@20110125	Added deapp SNP tables                                         
	                                                                               
BEGIN                                                                           
                                                                                
	TrialID := upper(trial_id);                                                    
	ontPath := ont_path;                                                           
	                                                                               
	select parse_nth_value(ontPath,2,'\') into StudyType                           
	from dual;                                                                     
                                                                                
	stepCt := 0;                                                                   
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_load_from_releas
e',0,stepCt,'Done');                                                            
	stepCt := stepCt + 1;                                                          
	msgText := 'Loading trial: ' || TrialId || ' path: ' || ontPath;               
	cz_write_audit(jobId,databaseName,procedureName, msgText,0,stepCt,'Done');     
	stepCt := stepCt + 1;                                                          
                                                                                
	--	Delete trial from target tables                                             
                                                                                
	i2b2_delete_all_nodes(ontPath, jobId);                                         
/*                                                                              
	delete from i2b2metadata.i2b2                                                  
	where c_fullname like ontPath || '%';                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from I2B2METADAT
A i2b2',SQL%ROWCOUNT,stepCt,'Done');                                            
	commit;                                                                        
                                                                                
	delete from i2b2demodata.concept_dimension                                     
	where concept_path like ontPath || '%';                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from I2B2DEMODAT
A concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
                                                                                
	delete from i2b2demodata.observation_fact                                      
	where modifier_cd = TrialId;                                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from I2B2DEMODAT
A observation_fact',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
*/                                                                              
                                                                                
	delete from i2b2demodata.observation_fact                                      
	where modifier_cd = TrialId                                                    
	  and concept_cd = 'SECURITY';                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted SECURITY for trial fro
m I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                   
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
	                                                                               
	delete from i2b2demodata.patient_dimension                                     
	where sourcesystem_cd like TrialId || '%';                                     
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from I2B2DEMODAT
A patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_subject_sample_mapping                                    
	where trial_name = TrialId;                                                    
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_su
bject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	--	create or truncate partition in de_subject_microarray_data                  
                                                                                
	tExists := 0;                                                                  
	                                                                               
	select count(*)                                                                
	into tExists                                                                   
	from all_tab_partitions                                                        
	where table_owner = 'DEAPP'                                                    
	  and table_name = 'DE_SUBJECT_MICROARRAY_DATA'                                
	  and partition_name = TrialId;                                                
                                                                                
	if tExists = 0 then                                                            
                                                                                
--	needed to add partition to deapp.de_subject_microarray_data                  
                                                                                
		sqlText := 'alter table deapp.de_subject_microarray_data add PARTITION "' || T
rialID || '"  VALUES (' || '''' || TrialID || '''' || ') ' ||                   
                   'PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255  NOLOGGING ' ||
                                                                                
				   'STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 ' 
||                                                                              
				   'PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT) ' ||   
				   'TABLESPACE "DEAPP" COMPRESS ';                                          
		execute immediate(sqlText);                                                   
                                                                                
	    cz_write_audit(jobId,databaseName,procedureName,'Adding partition to DEAPP 
de_subject_microarray_data',0,stepCt,'Done');                                   
		stepCt := stepCt + 1;                                                         
                                                                                
	else                                                                           
		sqlText := 'alter table deapp.de_subject_microarray_data truncate partition ' 
|| TrialID;                                                                     
		execute immediate(sqlText);                                                   
		                                                                              
	    cz_write_audit(jobId,databaseName,procedureName,'Truncate partition in DEAP
P de_subject_microarray_data',0,stepCt,'Done');                                 
		stepCt := stepCt + 1;                                                         
                                                                                
	end if;                                                                        
                                                                                
	delete from deapp.de_subject_rbm_data                                          
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_su
bject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_subject_protein_data                                      
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_su
bject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.haploview_data                                               
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP haplo
view',SQL%ROWCOUNT,stepCt,'Done');                                              
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from i2b2_tags                                                          
	where path like ontPath || '%';                                                
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from I2B2METADAT
A i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                       
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from biomart.bio_data_compound t                                        
	where t.bio_data_id =                                                          
	     (select distinct x.bio_experiment_id from bio_experiment_release x        
		  where x.accession = Trialid);                                               
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from BIOMART bio
_data_compound',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_subject_snp_dataset                                       
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_su
bject_snp_dataset',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_snp_data_by_patient                                       
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_sn
p_data_by_patient',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_snp_data_dataset_loc                                      
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_sn
p_data_dataset_loc',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	delete from deapp.de_snp_data_by_probe                                         
	where trial_name = TrialId;                                                    
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from DEAPP de_sn
p_data_by_probe',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	select count(*) into gotSNP                                                    
	from deapp.de_snp_data_by_patient;                                             
	                                                                               
	if gotSNP > 0 then                                                             
		-- Remove constraints before truncating data                                  
		execute immediate('alter table DE_SNP_INFO DISABLE constraint U_SNP_INFO_NAME;
');                                                                             
		execute immediate('alter table DE_SNP_PROBE DISABLE constraint U_SNP_PROBE_NAM
E;');                                                                           
		execute immediate('alter table DE_SNP_GENE_MAP DISABLE constraint FK_SNP_GENE_
MAP_SNP_ID;');                                                                  
		execute immediate('alter table DE_SNP_DATA_BY_PROBE DISABLE constraint FK_SNP_
BY_PROBE_SNP_ID;');                                                             
		execute immediate('alter table DE_SNP_PROBE DISABLE constraint FK_SNP_PROBE_SN
P_ID;');                                                                        
		execute immediate('alter table DE_SNP_INFO DISABLE constraint SYS_C0045667;');
                                                                                
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Disabled constraints from SNP
 tables',SQL%ROWCOUNT,stepCt,'Done');                                           
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
		                                                                              
		execute immediate('truncate table deapp.de_snp_info');                        
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_snp_i
nfo',SQL%ROWCOUNT,stepCt,'Done');                                               
		stepCt := stepCt + 1;                                                         
	                                                                               
		execute immediate('truncate table deapp.de_snp_probe');                       
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_snp_p
robe',SQL%ROWCOUNT,stepCt,'Done');                                              
		stepCt := stepCt + 1;                                                         
	                                                                               
		execute immediate('truncate table deapp.de_snp_gene_map');                    
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_snp_g
ene_map',SQL%ROWCOUNT,stepCt,'Done');                                           
		stepCt := stepCt + 1;                                                         
	                                                                               
		execute immediate('truncate table deapp.de_snp_probe_sorted_def');            
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_snp_p
robe_sorted_def',SQL%ROWCOUNT,stepCt,'Done');                                   
		end if;                                                                       
                                                                                
	execute immediate('truncate table deapp.de_mrna_annotation');                  
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_mrna_a
nnotation',SQL%ROWCOUNT,stepCt,'Done');                                         
	stepCt := stepCt + 1;                                                          
	                                                                               
	execute immediate('truncate table deapp.de_gpl_info');                         
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table DEAPP de_gpl_in
fo',SQL%ROWCOUNT,stepCt,'Done');                                                
	stepCt := stepCt + 1;                                                          
	                                                                               
	execute immediate('truncate table i2b2demodata.sample_categories');            
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table I2B2DEMODATA sa
mple_categories',SQL%ROWCOUNT,stepCt,'Done');                                   
	stepCt := stepCt + 1;                                                          
		                                                                              
	--	bio_experiment, bio_clinical_trial: only insert or update columns           
	--	bio_data_uid: only insert new                                               
	--	search_secure_object: insert new                                            
                                                                                
	--	Insert release trial into target tables                                     
                                                                                
	insert into i2b2metadata.i2b2                                                  
	(c_hlevel                                                                      
	,c_fullname                                                                    
	,c_name                                                                        
	,c_synonym_cd                                                                  
	,c_visualattributes                                                            
	,c_totalnum                                                                    
	,c_basecode                                                                    
	,c_metadataxml                                                                 
	,c_facttablecolumn                                                             
	,c_tablename                                                                   
	,c_columnname                                                                  
	,c_columndatatype                                                              
	,c_operator                                                                    
	,c_dimcode                                                                     
	,c_comment                                                                     
	,c_tooltip                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,valuetype_cd                                                                  
	,i2b2_id                                                                       
	)                                                                              
	select c_hlevel                                                                
		  ,c_fullname                                                                 
		  ,c_name                                                                     
		  ,c_synonym_cd                                                               
		  ,c_visualattributes                                                         
		  ,c_totalnum                                                                 
		  ,c_basecode                                                                 
		  ,c_metadataxml                                                              
		  ,c_facttablecolumn                                                          
		  ,c_tablename                                                                
		  ,c_columnname                                                               
		  ,c_columndatatype                                                           
		  ,c_operator                                                                 
		  ,c_dimcode                                                                  
		  ,c_comment                                                                  
		  ,c_tooltip                                                                  
		  ,update_date                                                                
		  ,download_date                                                              
		  ,import_date                                                                
		  ,sourcesystem_cd                                                            
		  ,valuetype_cd                                                               
		  ,i2b2_id                                                                    
	from i2b2_release                                                              
	where release_study = TrialId;                                                 
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2METADA
TA i2b2',SQL%ROWCOUNT,stepCt,'Done');                                           
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into i2b2demodata.concept_dimension                                     
	(concept_cd                                                                    
	,concept_path                                                                  
	,name_char                                                                     
	,concept_blob                                                                  
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,upload_id                                                                     
	,table_name                                                                    
	)                                                                              
	select concept_cd                                                              
		  ,concept_path                                                               
		  ,name_char                                                                  
		  ,concept_blob                                                               
		 ,update_date                                                                 
		  ,download_date                                                              
		  ,import_date                                                                
		  ,sourcesystem_cd                                                            
		  ,upload_id                                                                  
		  ,table_name                                                                 
	from concept_dimension_release                                                 
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2DEMODA
TA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into i2b2demodata.patient_dimension                                     
	(patient_num                                                                   
	,vital_status_cd                                                               
	,birth_date                                                                    
	,death_date                                                                    
	,sex_cd                                                                        
	,age_in_years_num                                                              
	,language_cd                                                                   
	,race_cd                                                                       
	,marital_status_cd                                                             
	,religion_cd                                                                   
	,zip_cd                                                                        
	,statecityzip_path                                                             
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,upload_id                                                                     
	,patient_blob                                                                  
	)                                                                              
	select patient_num                                                             
		  ,vital_status_cd                                                            
		  ,birth_date                                                                 
		  ,death_date                                                                 
		  ,sex_cd                                                                     
		  ,age_in_years_num                                                           
		  ,language_cd                                                                
		  ,race_cd                                                                    
		  ,marital_status_cd                                                          
		  ,religion_cd                                                                
		  ,zip_cd                                                                     
		  ,statecityzip_path                                                          
		  ,update_date                                                                
		  ,download_date                                                              
		  ,import_date                                                                
		  ,sourcesystem_cd                                                            
		  ,upload_id                                                                  
		  ,patient_blob                                                               
	from patient_dimension_release                                                 
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2DEMODA
TA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into i2b2demodata.observation_fact                                      
	(encounter_num                                                                 
	,patient_num                                                                   
	,concept_cd                                                                    
	,provider_id                                                                   
	,start_date                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,valueflag_cd                                                                  
	,quantity_num                                                                  
	,units_cd                                                                      
	,end_date                                                                      
	,location_cd                                                                   
	,confidence_num                                                                
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,upload_id                                                                     
	,observation_blob                                                              
	)                                                                              
	select encounter_num                                                           
		  ,patient_num                                                                
		  ,concept_cd                                                                 
		  ,provider_id                                                                
		  ,start_date                                                                 
		  ,modifier_cd                                                                
		  ,valtype_cd                                                                 
		  ,tval_char                                                                  
		  ,nval_num                                                                   
		  ,valueflag_cd                                                               
		  ,quantity_num                                                               
		  ,units_cd                                                                   
		  ,end_date                                                                   
		  ,location_cd                                                                
		  ,confidence_num                                                             
		  ,update_date                                                                
		  ,download_date                                                              
		  ,import_date                                                                
		  ,sourcesystem_cd                                                            
		  ,upload_id                                                                  
		  ,observation_blob                                                           
	from observation_fact_release                                                  
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2DEMODA
TA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into i2b2metadata.i2b2_tags                                             
	(path                                                                          
	,tag                                                                           
	,tag_type                                                                      
	)                                                                              
	select path                                                                    
		  ,tag                                                                        
		  ,tag_type                                                                   
	from i2b2_tags_release                                                         
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2METADA
TA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                                      
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
	                                                                               
	insert into tm_lz.lz_src_sample_categories                                     
	(trial_cd                                                                      
	,site_cd                                                                       
	,subject_cd                                                                    
	,sample_cd                                                                     
	,category_cd                                                                   
	,category_value)                                                               
	select trial_cd                                                                
		  ,site_cd                                                                    
		  ,subject_cd                                                                 
		  ,sample_cd                                                                  
		  ,category_cd                                                                
		  ,category_value                                                             
	from sample_categories_release                                                 
	where release_study = Trialid;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into I2B2DEMODA
TA sample_categories',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
		                                                                              
	insert into deapp.de_subject_sample_mapping                                    
	(patient_id                                                                    
	,site_id                                                                       
	,subject_id                                                                    
	,subject_type                                                                  
	,concept_code                                                                  
	,assay_id                                                                      
	,patient_uid                                                                   
	,sample_type                                                                   
	,assay_uid                                                                     
	,trial_name                                                                    
	,timepoint                                                                     
	,timepoint_cd                                                                  
	,sample_type_cd                                                                
	,tissue_type_cd                                                                
	,platform                                                                      
	,platform_cd                                                                   
	,tissue_type                                                                   
	,data_uid                                                                      
	,gpl_id                                                                        
	,rbm_panel                                                                     
	)                                                                              
	select patient_id                                                              
		  ,site_id                                                                    
		  ,subject_id                                                                 
		  ,subject_type                                                               
		  ,concept_code                                                               
		  ,assay_id                                                                   
		  ,patient_uid                                                                
		  ,sample_type                                                                
		  ,assay_uid                                                                  
		  ,trial_name                                                                 
		  ,timepoint                                                                  
		  ,timepoint_cd                                                               
		  ,sample_type_cd                                                             
		  ,tissue_type_cd                                                             
		  ,platform                                                                   
		  ,platform_cd                                                                
		  ,tissue_type                                                                
		  ,data_uid                                                                   
		  ,gpl_id                                                                     
		  ,rbm_panel                                                                  
	from de_subj_sample_map_release                                                
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into DEAPP de_s
ubject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                             
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	select count(*) into tExists                                                   
	from de_subject_mrna_data_release                                              
	where release_study = TrialId;                                                 
                                                                                
	if tExists > 20000000 then                                                     
		i2b2_mrna_index_maint('DROP',jobId);                                          
                                                                                
		cz_write_audit(jobId,databaseName,procedureName,'Drop indexes on DEAPP de_subj
ect_microarray_data',0,stepCt,'Done');                                          
		stepCt := stepCt + 1;                                                         
	else                                                                           
		                                                                              
		cz_write_audit(jobId,databaseName,procedureName,'Less than 20M records, index 
drop bypassed',0,stepCt,'Done');                                                
		stepCt := stepCt + 1;                                                         
	end if;                                                                        
                                                                                
	insert into deapp.de_subject_microarray_data                                   
	(trial_name                                                                    
	,assay_id                                                                      
	,patient_id                                                                    
	,probeset_id                                                                   
	,timepoint                                                                     
	,pvalue                                                                        
	,refseq                                                                        
	,subject_id                                                                    
	,raw_intensity                                                                 
	,log_intensity                                                                 
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	)                                                                              
	select trial_name                                                              
	      ,assay_id                                                                
	      ,patient_id                                                              
	      ,probeset_id                                                             
	      ,timepoint                                                               
	      ,pvalue                                                                  
	      ,refseq                                                                  
	      ,subject_id                                                              
	      ,raw_intensity                                                           
	      ,log_intensity                                                           
	      ,mean_intensity                                                          
	      ,stddev_intensity                                                        
	      ,median_intensity                                                        
	      ,zscore                                                                  
	from de_subject_mrna_data_release                                              
	where release_study = TrialID                                                  
	order by trial_name                                                            
            ,assay_id                                                           
            ,probeset_id;                                                       
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into DEAPP de_s
ubject_microarray_data',SQL%ROWCOUNT,stepCt,'Done');                            
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	if tExists > 20000000 then                                                     
		i2b2_mrna_index_maint('Add',jobId);                                           
	                                                                               
		cz_write_audit(jobId,databaseName,procedureName,'Add indexes on DEAPP de_subje
ct_microarray_data',0,stepCt,'Done');                                           
		stepCt := stepCt + 1;                                                         
	end if;                                                                        
                                                                                
	insert into deapp.de_subject_rbm_data                                          
	(trial_name                                                                    
	,antigen_name                                                                  
	,n_value                                                                       
	,patient_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,normalized_value                                                              
	,concept_cd                                                                    
	,timepoint                                                                     
	,data_uid                                                                      
	,value                                                                         
	,log_intensity                                                                 
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	,rbm_panel                                                                     
	)                                                                              
	select trial_name                                                              
		  ,antigen_name                                                               
		  ,n_value                                                                    
		  ,patient_id                                                                 
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,assay_id                                                                   
		  ,normalized_value                                                           
		  ,concept_cd                                                                 
		  ,timepoint                                                                  
		  ,data_uid                                                                   
		  ,value                                                                      
		  ,log_intensity                                                              
		  ,mean_intensity                                                             
		  ,stddev_intensity                                                           
		  ,median_intensity                                                           
		  ,zscore                                                                     
		  ,rbm_panel                                                                  
	from de_subject_rbm_data_release                                               
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into DEAPP de_s
ubject_rbm_data',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into deapp.de_subject_protein_data                                      
	(trial_name                                                                    
	,component                                                                     
	,intensity                                                                     
	,patient_id                                                                    
	,subject_id                                                                    
	,gene_symbol                                                                   
	,gene_id                                                                       
	,assay_id                                                                      
	,timepoint                                                                     
	,n_value                                                                       
	,mean_intensity                                                                
	,stddev_intensity                                                              
	,median_intensity                                                              
	,zscore                                                                        
	)                                                                              
	select trial_name                                                              
		  ,component                                                                  
		  ,intensity                                                                  
		  ,patient_id                                                                 
		  ,subject_id                                                                 
		  ,gene_symbol                                                                
		  ,gene_id                                                                    
		  ,assay_id                                                                   
		  ,timepoint                                                                  
		  ,n_value                                                                    
		  ,mean_intensity                                                             
		  ,stddev_intensity                                                           
		  ,median_intensity                                                           
		  ,zscore                                                                     
	from de_subj_protein_data_release                                              
	where release_study = TrialId;                                                 
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into DEAPP de_s
ubject_protein_data',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into deapp.haploview_data                                               
	(i2b2_id                                                                       
	,jnj_id                                                                        
	,father_id                                                                     
	,mother_id                                                                     
	,sex                                                                           
	,affection_status                                                              
	,chromosome                                                                    
	,gene                                                                          
	,release                                                                       
	,release_date                                                                  
	,trial_name                                                                    
	,snp_data                                                                      
	)                                                                              
	select i2b2_id                                                                 
	,jnj_id                                                                        
	,father_id                                                                     
	,mother_id                                                                     
	,sex                                                                           
	,affection_status                                                              
	,chromosome                                                                    
	,gene                                                                          
	,release                                                                       
	,release_date                                                                  
	,trial_name                                                                    
	,snp_data                                                                      
	from haploview_data_release                                                    
	where release_study = TrialId;                                                 
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into DEAPP hapl
oview_data',SQL%ROWCOUNT,stepCt,'Done');                                        
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into biomart.bio_experiment                                             
	(bio_experiment_id                                                             
	,bio_experiment_type                                                           
	,title                                                                         
	,description                                                                   
	,design                                                                        
	,start_date                                                                    
	,completion_date                                                               
	,primary_investigator                                                          
	,contact_field                                                                 
	,etl_id                                                                        
	,status                                                                        
	,overall_design                                                                
	,accession)                                                                    
	select m.bio_experiment_id                                                     
		  ,m.bio_experiment_type                                                      
	      ,m.title                                                                 
		  ,m.description                                                              
		  ,m.design                                                                   
		  ,m.start_date                                                               
		  ,m.completion_date                                                          
		  ,m.primary_investigator                                                     
		  ,m.contact_field                                                            
		  ,m.etl_id                                                                   
		  ,m.status                                                                   
		  ,m.overall_design                                                           
		  ,m.accession                                                                
	from bio_experiment_release m                                                  
	    ,i2b2metadata.i2b2 md                                                      
	where m.release_study = TrialId                                                
	  and not exists                                                               
	      (select 1 from biomart.bio_experiment x                                  
		   where x.accession = TrialId)                                               
	  and not exists                                                               
	      (select 1 from biomart.bio_experiment x                                  
		   where x.bio_experiment_id = m.bio_experiment_id)                           
	  and m.accession = md.sourcesystem_cd                                         
	  and md.c_hlevel = 0;                                                         
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOMART
 bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	update biomart.bio_experiment b                                                
	set (bio_experiment_type                                                       
	    ,title                                                                     
	    ,description                                                               
		,design                                                                       
		,start_date                                                                   
		,completion_date                                                              
		,primary_investigator                                                         
		,contact_field                                                                
		,etl_id                                                                       
		,status                                                                       
		,overall_design) =                                                            
	    (select distinct m.bio_experiment_type                                     
		       ,m.title                                                               
		       ,m.description                                                         
			   ,m.design                                                                 
			   ,m.start_date                                                             
			   ,m.completion_date                                                        
			   ,m.primary_investigator                                                   
			   ,m.contact_field                                                          
			   ,m.etl_id                                                                 
			   ,m.status                                                                 
			   ,m.overall_design                                                         
		 from bio_experiment_release m                                                
			 ,i2b2metadata.i2b2 md                                                       
		 where m.release_study = TrialId                                              
		   and b.accession = m.accession                                              
		   and md.sourcesystem_cd = TrialId                                           
		   and md.c_hlevel = 0)                                                       
	where b.accession = TrialId                                                    
	  and exists                                                                   
	      (select 1 from bio_experiment_release x                                  
		   where x.release_study = TrialId);                                          
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Updated trial data in BIOMART 
bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into biomart.bio_clinical_trial                                         
	(trial_number                                                                  
	,study_owner                                                                   
	,study_phase                                                                   
	,blinding_procedure                                                            
	,studytype                                                                     
	,duration_of_study_weeks                                                       
	,number_of_patients                                                            
	,number_of_sites                                                               
	,route_of_administration                                                       
	,dosing_regimen                                                                
	,group_assignment                                                              
	,type_of_control                                                               
	,completion_date                                                               
	,primary_end_points                                                            
	,secondary_end_points                                                          
	,inclusion_criteria                                                            
	,exclusion_criteria                                                            
	,subjects                                                                      
	,gender_restriction_mfb                                                        
	,min_age                                                                       
	,max_age                                                                       
	,secondary_ids                                                                 
	,bio_experiment_id                                                             
	,development_partner                                                           
	,main_findings                                                                 
	,geo_platform                                                                  
	,platform_name                                                                 
	,search_area                                                                   
	)                                                                              
	select m.trial_number                                                          
          ,m.study_owner                                                        
          ,m.study_phase                                                        
          ,m.blinding_procedure                                                 
          ,m.studytype                                                          
		  ,m.duration_of_study_weeks                                                  
		  ,m.number_of_patients                                                       
		  ,m.number_of_sites                                                          
          ,m.route_of_administration                                            
          ,m.dosing_regimen                                                     
          ,m.group_assignment                                                   
          ,m.type_of_control                                                    
          ,m.completion_date                                                    
          ,m.primary_end_points                                                 
          ,m.secondary_end_points                                               
          ,m.inclusion_criteria                                                 
          ,m.exclusion_criteria                                                 
          ,m.subjects                                                           
          ,m.gender_restriction_mfb                                             
		  ,m.min_age                                                                  
		  ,m.max_age                                                                  
          ,m.secondary_ids                                                      
          ,m.bio_experiment_id                                                  
		  ,m.development_partner                                                      
		  ,m.main_findings                                                            
		  ,m.geo_platform                                                             
		  ,m.platform_name                                                            
		  ,m.search_area                                                              
	from bio_clinical_trial_release m                                              
		,i2b2metadata.i2b2 md                                                         
	where m.release_study = TrialId                                                
	  and not exists                                                               
	      (select 1 from biomart.bio_clinical_trial x                              
		   where x.trial_number = TrialId)                                            
	  and md.sourcesystem_cd = TrialId                                             
	  and md.c_hlevel = 0                                                          
	  and (parse_nth_value(md.c_fullname,2,'\') = 'Clinical Trials' or             
		   (parse_nth_value(md.c_fullname,2,'\') = 'Experimental Medicine Study' and s
ubstr(m.release_study,1,1) = 'C')                                               
          );                                                                    
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data in BIOMART
 bio_clinical_trial',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	update biomart.bio_clinical_trial b                                            
	set (study_owner                                                               
	    ,study_phase                                                               
		,blinding_procedure                                                           
		,studytype                                                                    
		,duration_of_study_weeks                                                      
		,number_of_patients                                                           
		,number_of_sites                                                              
		,route_of_administration                                                      
		,dosing_regimen                                                               
		,group_assignment                                                             
		,type_of_control                                                              
		,completion_date                                                              
		,primary_end_points                                                           
		,secondary_end_points                                                         
		,inclusion_criteria                                                           
		,exclusion_criteria                                                           
		,subjects                                                                     
		,gender_restriction_mfb                                                       
		,min_age                                                                      
		,max_age                                                                      
		,secondary_ids                                                                
		,development_partner                                                          
		,main_findings                                                                
		,geo_platform                                                                 
		,platform_name                                                                
		,search_area                                                                  
        ) =                                                                     
		(select m.study_owner                                                         
			   ,m.study_phase                                                            
			   ,m.blinding_procedure                                                     
			   ,m.studytype                                                              
			   ,m.duration_of_study_weeks                                                
			   ,m.number_of_patients                                                     
			   ,m.number_of_sites                                                        
			   ,m.route_of_administration                                                
			   ,m.dosing_regimen                                                         
			   ,m.group_assignment                                                       
			   ,m.type_of_control                                                        
			   ,m.completion_date                                                        
			   ,m.primary_end_points                                                     
			   ,m.secondary_end_points                                                   
			   ,m.inclusion_criteria                                                     
			   ,m.exclusion_criteria                                                     
			   ,m.subjects                                                               
			   ,m.gender_restriction_mfb                                                 
			   ,m.min_age                                                                
			   ,m.max_age                                                                
			   ,m.secondary_ids                                                          
			   ,m.development_partner                                                    
			   ,m.main_findings                                                          
			   ,m.geo_platform                                                           
			   ,m.platform_name                                                          
			   ,m.search_area                                                            
		 from bio_clinical_trial_release m                                            
		 where m.release_study = TrialId                                              
		)                                                                             
	where b.trial_number = TrialId                                                 
	  and exists                                                                   
		  (select 1 from bio_clinical_trial_release x                                 
		   where x.release_study = TrialId);                                          
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Updated trial data in BIOMART 
bio_clinical_trial',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into biomart.bio_data_uid                                               
	(bio_data_id                                                                   
	,unique_id                                                                     
	,bio_data_type                                                                 
	)                                                                              
	select b.bio_data_id                                                           
	      ,b.unique_id                                                             
		  ,b.bio_data_type                                                            
	from bio_data_uid_release b                                                    
	where b.release_study = TrialId                                                
	  and not exists                                                               
	      (select 1 from biomart.bio_data_uid x                                    
		   where b.bio_data_id = x.bio_data_id);                                      
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data into BIOMA
RT bio_data_uid',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into biomart.bio_data_compound                                          
	(bio_data_id                                                                   
	,bio_compound_id                                                               
	,etl_source                                                                    
	)                                                                              
	select b.bio_data_id                                                           
	      ,b.bio_compound_id                                                       
		  ,b.etl_source                                                               
	from bio_data_compound_release b                                               
	where b.release_study = TrialId                                                
	  and exists                                                                   
	      (select 1 from biomart.bio_data_compound x                               
		   where b.bio_compound_id = x.bio_compound_id);                              
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data into BIOMA
RT bio_data_compound',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;	                                                                       
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into searchapp.search_secure_object                                     
	(search_secure_object_id                                                       
	,bio_data_id                                                                   
	,display_name                                                                  
	,data_type                                                                     
	,bio_data_unique_id                                                            
	)                                                                              
	select b.search_secure_object_id                                               
	      ,b.bio_data_id                                                           
		  ,b.display_name                                                             
		  ,b.data_type                                                                
		  ,b.bio_data_unique_id                                                       
	from search_secure_object_release b                                            
	where b.release_study = TrialId                                                
	  and exists                                                                   
	      (select 1 from biomart.bio_experiment x                                  
		   where b.bio_data_id = x.bio_experiment_id)                                 
	  and not exists                                                               
	      (select 1 from searchapp.search_secure_object y                          
		   where b.search_secure_object_id = y.search_secure_object_id);              
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial data into SEARC
HAPP search_secure_object',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
	                                                                               
	--	check gotSNP and reload tables if > 0                                       
	                                                                               
	if gotSNP > 0 then                                                             
                                                                                
		insert into deapp.de_snp_info                                                 
		select * from de_snp_info_release;                                            
		cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_s
np_info',SQL%ROWCOUNT,stepCt,'Done');                                           
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
	                                                                               
		insert into deapp.de_snp_probe                                                
		select * from de_snp_probe_release;                                           
		cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_s
np_probe',SQL%ROWCOUNT,stepCt,'Done');                                          
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
		                                                                              
		insert into deapp.de_snp_gene_map                                             
		select * from de_snp_gene_map_release;                                        
		cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_s
np_gene_map',SQL%ROWCOUNT,stepCt,'Done');                                       
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
		                                                                              
		insert into deapp.de_snp_probe_sorted_def                                     
		select * from de_snp_probe_sort_def_release;                                  
		cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_s
np_probe_sorted_def',SQL%ROWCOUNT,stepCt,'Done');                               
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
		                                                                              
	end if;                                                                        
                                                                                
/*	                                                                             
	insert into deapp.de_subject_snp_dataset                                       
	(subject_snp_dataset_id                                                        
	,dataset_name                                                                  
	,concept_cd                                                                    
	,platform_name                                                                 
	,trial_name                                                                    
	,patient_num                                                                   
	,timepoint                                                                     
	,subject_id                                                                    
	,sample_type                                                                   
	,paired_dataset_id                                                             
	,patient_gender)                                                               
	select subject_snp_dataset_id                                                  
		  ,dataset_name                                                               
		  ,concept_cd                                                                 
		  ,platform_name                                                              
		  ,trial_name                                                                 
		  ,patient_num                                                                
		  ,timepoint                                                                  
		  ,subject_id                                                                 
		  ,sample_type                                                                
		  ,paired_dataset_id                                                          
		  ,patient_gender                                                             
	from de_subject_snp_dataset_release                                            
	where trial_name = TrialId;                                                    
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_su
bject_snp_dataset',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
*/	                                                                             
	insert into deapp.de_snp_data_by_patient                                       
	(snp_data_by_patient_id                                                        
	,snp_dataset_id                                                                
	,trial_name                                                                    
	,patient_num                                                                   
	,chrom                                                                         
	,data_by_patient_chr                                                           
	)                                                                              
	select snp_data_by_patient_id                                                  
		  ,snp_dataset_id                                                             
		  ,trial_name                                                                 
		  ,patient_num                                                                
		  ,chrom                                                                      
		  ,data_by_patient_chr                                                        
	from de_snp_data_by_patient_release                                            
	where trial_name = TrialId;                                                    
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_sn
p_data_by_patient',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into deapp.de_snp_data_dataset_loc                                      
	(snp_data_dataset_loc_id                                                       
	,trial_name                                                                    
	,snp_dataset_id                                                                
	,location)                                                                     
	select snp_data_dataset_loc_id                                                 
		  ,trial_name                                                                 
		  ,snp_dataset_id                                                             
		  ,location                                                                   
	from de_snp_data_ds_loc_release                                                
	where trial_name = TrialId;                                                    
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_sn
p_data_dataset_loc',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	insert into deapp.de_snp_data_by_probe                                         
	(snp_data_by_probe_id                                                          
	,probe_id                                                                      
	,probe_name                                                                    
	,snp_id                                                                        
	,snp_name                                                                      
	,trial_name                                                                    
	,data_by_probe                                                                 
	)                                                                              
	select snp_data_by_probe_id                                                    
		  ,probe_id                                                                   
		  ,probe_name                                                                 
		  ,snp_id                                                                     
		  ,snp_name                                                                   
		  ,trial_name                                                                 
		  ,data_by_probe                                                              
	from de_snp_data_by_probe_release                                              
	where trial_name = TrialId;                                                    
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_sn
p_data_by_probe',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	stepCt := stepCt + 1;	                                                         
	                                                                               
	--	Load de_mrna_annotation                                                     
	                                                                               
	insert into deapp.de_mrna_annotation                                           
	select * from de_mrna_annotation_release;                                      
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_mr
na_annotation',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
                                                                                
	--	Load de_gpl_info                                                            
	                                                                               
	insert into deapp.de_gpl_info                                                  
	select * from de_gpl_info_release;                                             
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into DEAPP de_gp
l_info',SQL%ROWCOUNT,stepCt,'Done');                                            
	commit;                                                                        
	stepCt := stepCt + 1;                                                          
	                                                                               
	if gotSNP > 0 then                                                             
		-- Enable the SNP table constraints that were disabled prior to truncate      
		execute immediate('alter table DE_SNP_INFO ENABLE constraint U_SNP_INFO_NAME;'
);                                                                              
		execute immediate('alter table DE_SNP_PROBE ENABLE constraint U_SNP_PROBE_NAME
;');                                                                            
		execute immediate('alter table DE_SNP_INFO ENABLE constraint SYS_C0045667;  ')
;                                                                               
		execute immediate('alter table DE_SNP_PROBE ENABLE constraint FK_SNP_PROBE_SNP
_ID;');                                                                         
		execute immediate('alter table DE_SNP_GENE_MAP ENABLE constraint FK_SNP_GENE_M
AP_SNP_ID;');                                                                   
		execute immediate('alter table DE_SNP_DATA_BY_PROBE ENABLE constraint FK_SNP_B
Y_PROBE_PROBE_ID;');                                                            
	                                                                               
		cz_write_audit(jobId,databaseName,procedureName,'Constrants enabled for SNP ta
bles',SQL%ROWCOUNT,stepCt,'Done');                                              
		commit;                                                                       
		stepCt := stepCt + 1;                                                         
	end if;                                                                        
                                                                                
	--	Create patient-trial, concept counts, and load security data                
                                                                                
	i2b2_create_patient_trial(TrialId, StudyType, jobId, returnCode);              
	i2b2_create_concept_counts(ontPath, jobId);                                    
	i2b2_load_security_data(jobId);                                                
	                                                                               
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_load_from_release',0,
stepCt,'Done');                                                                 
	                                                                               
       ---Cleanup OVERALL JOB if this proc is being run standalone              
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_EQTL_TOP50" AS                 
BEGIN                                                                           
                                                                                
execute immediate ('drop table biomart.tmp_analysis_count_eqtl');               
                                                                                
execute immediate ('create table biomart.tmp_analysis_count_eqtl as             
select count(*) as total, bio_assay_analysis_id                                 
from biomart.bio_assay_analysis_eqtl                                            
group by bio_assay_analysis_id');                                               
                                                                                
                                                                                
execute immediate ('update biomart.bio_assay_analysis b                         
set b.data_count = (select a.total from biomart.tmp_analysis_count_eqtl  a where
 a.bio_assay_analysis_id =  b.bio_assay_analysis_id)                            
where exists(                                                                   
select 1 from biomart.tmp_analysis_count_eqtl  a where a.bio_assay_analysis_id =
  b.bio_assay_analysis_id                                                       
)');                                                                            
                                                                                
--select * from bio_assay_analysis_gwas                                         
--where bio_assay_analysis_id = 419842521                                       
--order by p_value asc, rs_id asc;                                              
                                                                                
--select * from tmp_analysis_gwas_top500                                        
--where bio_assay_analysis_id = 419842521                                       
--order by p_value asc;                                                         
                                                                                
                                                                                
execute immediate ('drop table biomart.tmp_analysis_eqtl_top500');              
                                                                                
execute immediate ('create table biomart.tmp_analysis_eqtl_top500               
as                                                                              
select a.*                                                                      
from (                                                                          
select                                                                          
bio_asy_analysis_eqtl_id,                                                       
bio_assay_analysis_id,                                                          
rs_id,                                                                          
p_value,                                                                        
log_p_value,                                                                    
etl_id,                                                                         
ext_data,                                                                       
p_value_char,                                                                   
gene,                                                                           
cis_trans,                                                                      
distance_from_gene,                                                             
row_number () over (partition by bio_assay_analysis_id order by p_value asc, rs_
id asc) as rnum                                                                 
from biomart.bio_assay_analysis_eqtl                                            
) a                                                                             
where                                                                           
a.rnum <=500');                                                                 
                                                                                
execute immediate ('create index BIOMART.t_a_ge_t500_idx on BIOMART.TMP_ANALYSIS
_eqtl_TOP500(RS_ID) tablespace "INDX"');                                        
execute immediate ('create index BIOMART.t_a_gae_t500_idx on BIOMART.TMP_ANALYSI
S_eqtl_TOP500(bio_assay_analysis_id) tablespace "INDX"');                       
                                                                                
execute immediate ('drop table biomart.bio_asy_analysis_eqtl_top50 cascade const
raints');                                                                       
                                                                                
execute immediate ('create table biomart.BIO_ASY_ANALYSIS_eqtl_TOP50            
as                                                                              
SELECT baa.bio_assay_analysis_id,                                               
baa.analysis_name AS analysis, info.chrom AS chrom, info.pos AS pos,            
gmap.gene_name AS rsgene, DATA.rs_id AS rsid,                                   
DATA.p_value AS pvalue, DATA.log_p_value AS logpvalue, data.gene as gene,       
DATA.ext_data AS extdata , DATA.rnum                                            
FROM biomart.tmp_analysis_eqtl_top500 DATA                                      
JOIN biomart.bio_assay_analysis baa                                             
ON baa.bio_assay_analysis_id = DATA.bio_assay_analysis_id                       
JOIN deapp.de_rc_snp_info info ON DATA.rs_id = info.rs_id and (hg_version='''||1
9||''')                                                                         
LEFT JOIN deapp.de_snp_gene_map gmap ON  gmap.snp_name =info.rs_id');           
                                                                                
--execute immediate ('select count(*) from BIO_ASY_ANALYSIS_eqtl_TOP50');       
                                                                                
execute immediate ('create index BIOMART.B_ASY_eqtl_T50_IDX1 on BIOMART.BIO_ASY_
ANALYSIS_eqtl_TOP50(bio_assay_analysis_id) parallel tablespace "INDX"');        
                                                                                
execute immediate ('create index BIOMART.B_ASY_eqtl_T50_IDX2 on BIOMART.BIO_ASY_
ANALYSIS_eqtl_TOP50(ANALYSIS) parallel tablespace "INDX"');                     
                                                                                
END I2B2_LOAD_EQTL_TOP50;                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_COMPOUND_METADATA"             
(                                                                               
  currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
	--	NOTE****	The compound.txt file must have the LF's cleaned from data (Run Cle
anCells macro before exporting to tab-delimited file)                           
	-- JEA@20110720	New, cloned for tranSMART consortia                            
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
BEGIN                                                                           
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
                                                                                
	--	Update existing compound data by generic_names, cnto_number, jnj_number or c
as_registry                                                                     
	                                                                               
	update biomart.bio_compound b                                                  
	set (cas_registry                                                              
		,code_name                                                                    
		,brand_name                                                                   
		,chemical_name                                                                
		,mechanism                                                                    
		,product_category                                                             
		,description                                                                  
		) = (select trim('"' from c.cas_registry)                                     
				   ,trim('"' from c.code_name)                                              
				   ,trim('"' from c.brand_name)                                             
				   ,trim('"' from c.chemical_name)                                          
				   ,trim('"' from c.mechanism)                                              
				   ,trim('"' from c.product_category)                                       
				   ,trim('"' from c.description)                                            
			 from control.compound_extrnl c                                              
			 where (c.generic_name is not null                                           
					and b.generic_name = c.generic_name)                                       
				or (c.cas_registry is not null                                              
					and b.cas_registry = c.cas_registry)                                       
			)                                                                            
		where (b.generic_name is not null                                             
			   and exists                                                                
			   (select 1 from control.compound_extrnl c                                  
			    where b.generic_name = c.generic_name                                    
			      and c.generic_name is not null                                         
			   ))                                                                        
		  or (b.cas_registry is not null                                              
			  and exists                                                                 
			  (select 1 from control.compound_extrnl c                                   
			   where b.cas_registry = c.cas_registry                                     
			     and c.cas_registry is not null                                          
			  ))                                                                         
	;                                                                              
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Updated compound in BI
OMART bio_compound',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	                                                                               
	--	Add new compound to bio_compound                                            
	                                                                               
	insert into biomart.bio_compound b                                             
	(cas_registry                                                                  
	,code_name                                                                     
	,generic_name                                                                  
	,brand_name                                                                    
	,chemical_name                                                                 
	,mechanism                                                                     
	,product_category                                                              
	,description                                                                   
	,etl_id                                                                        
	)                                                                              
	select trim('"' from c.cas_registry)                                           
		  ,trim('"' from c.code_name)                                                 
		  ,trim('"' from c.generic_name)                                              
		  ,trim('"' from c.brand_name)                                                
		  ,trim('"' from c.chemical_name)                                             
		  ,trim('"' from c.mechanism)                                                 
		  ,trim('"' from c.product_category)                                          
		  ,replace(trim('"' from c.description),'""','"')                             
		  ,to_char(sysdate,'YYYY/MM/DD HH:mm:SS')                                     
	from control.compound_extrnl c                                                 
	where (c.generic_name is not null or                                           
		   c.cas_registry is not null)                                                
	  and not exists                                                               
		   (select 1 from biomart.bio_compound xb                                     
		    where xb.generic_name = c.generic_name)                                   
	  and not exists                                                               
		   (select 1 from biomart.bio_compound wb                                     
		    where wb.cas_registry = c.cas_registry)                                   
	;                                                                              
	stepCt := stepCt + 1;                                                          
	control.cz_write_audit(jobId,databaseName,procedureName,'Inserted compound into
 BIOMART bio_compound',SQL%ROWCOUNT,stepCt,'Done');                             
	commit;	                                                                       
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		                                                                              
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_CLINICAL_DATA"                 
(                                                                               
  trial_id 			IN	VARCHAR2                                                       
 ,top_node			in  varchar2                                                       
 ,secure_study		in varchar2 := 'N'                                              
 ,highlight_study	in	varchar2 := 'N'                                            
 ,currentJobID		IN	NUMBER := null                                               
)                                                                               
AS                                                                              
/*************************************************************************      
* Copyright 2008-2012 Janssen Research m, LLC.                                  
*                                                                               
* Licensed under the Apache License, Version 2.0 (the "License");               
* you may not use this file except in compliance with the License.              
* You may obtain a copy of the License at                                       
*                                                                               
* http://www.apache.org/licenses/LICENSE-2.0                                    
*                                                                               
* Unless required by applicable law or agreed to in writing, software           
* distributed under the License is distributed on an "AS IS" BASIS,             
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
* See the License for the specific language governing permissions and           
* limitations under the License.                                                
******************************************************************/             
                                                                                
  topNode		VARCHAR2(2000);                                                      
  topLevel		number(10,0);                                                       
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
  study_name	varchar2(2000);                                                    
  TrialID		varchar2(100);                                                       
  secureStudy	varchar2(200);                                                    
  etlDate		date;                                                                
  tPath			varchar2(2000);                                                       
  pCount		int;                                                                  
  pExists		int;                                                                 
  rtnCode		int;                                                                 
  tText			varchar2(2000);                                                       
  v_bio_experiment_id	number(18,0);                                             
                                                                                
    --Audit variables                                                           
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
  duplicate_values	exception;                                                   
  invalid_topNode	exception;                                                    
  multiple_visit_names	exception;                                               
                                                                                
  CURSOR addNodes is                                                            
  select DISTINCT                                                               
         leaf_node,                                                             
    		 node_name                                                                
  from  wt_trial_nodes a                                                        
  ;                                                                             
                                                                                
	--	cursor to define the path for delete_one_node  this will delete any nodes th
at are hidden after i2b2_create_concept_counts                                  
                                                                                
	CURSOR delNodes is                                                             
	select distinct c_fullname                                                     
	from  i2b2                                                                     
	where c_fullname like topNode || '%'                                           
      and substr(c_visualattributes,2,1) = 'H';                                 
	                                                                               
	--	cursor to determine if any leaf nodes exist in i2b2 that are not used in thi
s reload (node changes from text to numeric or numeric to text)                 
	                                                                               
	cursor delUnusedLeaf is                                                        
	select l.c_fullname                                                            
	from i2b2 l                                                                    
	where l.c_visualattributes like 'L%'                                           
	  and l.c_fullname like topNode || '%'                                         
	  and l.c_fullname not in                                                      
		 (select t.leaf_node                                                          
		  from wt_trial_nodes t                                                       
		  union                                                                       
		  select m.c_fullname                                                         
		  from de_subject_sample_mapping sm                                           
			  ,i2b2 m                                                                    
		  where sm.trial_name = TrialId                                               
		    and sm.concept_code = m.c_basecode                                        
			and m.c_visualattributes like 'L%');                                         
BEGIN                                                                           
                                                                                
	TrialID := upper(trial_id);                                                    
	secureStudy := upper(secure_study);                                            
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
	                                                                               
	select sysdate into etlDate from dual;                                         
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 0;                                                                   
                                                                                
	stepCt := stepCt + 1;                                                          
	tText := 'Start i2b2_load_clinical_data for ' || TrialId;                      
	cz_write_audit(jobId,databaseName,procedureName,tText,0,stepCt,'Done');        
	                                                                               
	if (secureStudy not in ('Y','N') ) then                                        
		secureStudy := 'Y';                                                           
	end if;                                                                        
	                                                                               
	topNode := REGEXP_REPLACE('\' || top_node || '\','(\\){2,}', '\');             
	                                                                               
	--	figure out how many nodes (folders) are at study name and above             
	--	\Public Studies\Clinical Studies\Pancreatic_Cancer_Smith_GSE22780\: topLevel
 = 4, so there are 3 nodes                                                      
	--	\Public Studies\GSE12345\: topLevel = 3, so there are 2 nodes               
	                                                                               
	select length(topNode)-length(replace(topNode,'\','')) into topLevel from dual;
                                                                                
	                                                                               
	if topLevel < 3 then                                                           
		raise invalid_topNode;                                                        
	end if;	                                                                       
                                                                                
	--	delete any existing data from lz_src_clinical_data and load new data        
	                                                                               
	delete from lz_src_clinical_data                                               
	where study_id = TrialId;                                                      
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from lz_s
rc_clinical_data',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
	                                                                               
	insert into lz_src_clinical_data                                               
	(study_id                                                                      
	,site_id                                                                       
	,subject_id                                                                    
	,visit_name                                                                    
	,data_label                                                                    
	,data_value                                                                    
	,category_cd                                                                   
	,etl_job_id                                                                    
	,etl_date                                                                      
	,ctrl_vocab_code)                                                              
	select study_id                                                                
		  ,site_id                                                                    
		  ,subject_id                                                                 
		  ,visit_name                                                                 
		  ,data_label                                                                 
		  ,data_value                                                                 
		  ,category_cd                                                                
		  ,jobId                                                                      
		  ,etlDate                                                                    
		  ,ctrl_vocab_code                                                            
	from lt_src_clinical_data;                                                     
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data into lz_src_clinic
al_data',SQL%ROWCOUNT,stepCt,'Done');                                           
	commit;                                                                        
		                                                                              
	--	truncate wrk_clinical_data and load data from external file                 
	                                                                               
	execute immediate('truncate table tm_wz.wrk_clinical_data');                   
	                                                                               
	--	insert data from lt_src_clinical_data to wrk_clinical_data                  
	                                                                               
	insert into wrk_clinical_data                                                  
	(study_id                                                                      
	,site_id                                                                       
	,subject_id                                                                    
	,visit_name                                                                    
	,data_label                                                                    
	,data_value                                                                    
	,category_cd                                                                   
	,ctrl_vocab_code                                                               
	)                                                                              
	select study_id                                                                
		  ,site_id                                                                    
		  ,subject_id                                                                 
		  ,visit_name                                                                 
		  ,data_label                                                                 
		  ,data_value                                                                 
		  ,category_cd                                                                
		  ,ctrl_vocab_code                                                            
	from lt_src_clinical_data;                                                     
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load lt_src_clinical_data to w
ork table',SQL%ROWCOUNT,stepCt,'Done');                                         
	                                                                               
	commit;  	                                                                     
                                                                                
	-- Get study name from topNode                                                 
                                                                                
	select parse_nth_value(topNode, topLevel, '\') into study_name from dual;	     
	                                                                               
	--	Replace all underscores with spaces in topNode except those in study name   
                                                                                
	topNode := replace(replace(topNode,'\'||study_name||'\',null),'_',' ') || '\' |
| study_name || '\';                                                            
	                                                                               
	-- Get root_node from topNode                                                  
                                                                                
	select parse_nth_value(topNode, 2, '\') into root_node from dual;              
	                                                                               
	select count(*) into pExists                                                   
	from table_access                                                              
	where c_name = root_node;                                                      
	                                                                               
	select count(*) into pCount                                                    
	from i2b2                                                                      
	where c_name = root_node;                                                      
	                                                                               
	if pExists = 0 or pCount = 0 then                                              
		i2b2_add_root_node(root_node, jobId);                                         
	end if;                                                                        
	                                                                               
	select c_hlevel into root_level                                                
	from table_access                                                              
	where c_name = root_node;                                                      
	                                                                               
	--	Add any upper level nodes as needed                                         
	                                                                               
	tPath := REGEXP_REPLACE(replace(top_node,study_name,null),'(\\){2,}', '\');    
	select length(tPath) - length(replace(tPath,'\',null)) into pCount from dual;  
                                                                                
	if pCount > 2 then                                                             
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Adding upper-level nodes',0,s
tepCt,'Done');                                                                  
		i2b2_fill_in_tree(null, tPath, jobId);                                        
	end if;                                                                        
	                                                                               
/*	Don't delete existing data, concept_cds will be reused                       
	--	delete any existing data                                                    
	                                                                               
	i2b2_delete_all_nodes(topNode, jobId);                                         
*/                                                                              
                                                                                
	select count(*) into pExists                                                   
	from i2b2                                                                      
	where c_fullname = topNode;                                                    
	                                                                               
	--	add top node for study                                                      
	                                                                               
	if pExists = 0 then                                                            
		i2b2_add_node(TrialId, topNode, study_name, jobId);                           
	end if;                                                                        
                                                                                
	--	Set data_type, category_path, and usubjid                                   
                                                                                
	update wrk_clinical_data                                                       
	set data_type = 'T'                                                            
	   ,category_path = replace(replace(category_cd,'_',' '),'+','\')              
	  -- ,usubjid = TrialID || ':' || site_id || ':' || subject_id;                
	   ,usubjid = REGEXP_REPLACE(TrialID || ':' || site_id || ':' || subject_id,   
                   '(::){1,}', ':');                                            
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set columns in wrk_clinical_da
ta',SQL%ROWCOUNT,stepCt,'Done');                                                
	                                                                               
	commit;                                                                        
                                                                                
	--	Delete rows where data_value is null                                        
                                                                                
	delete from wrk_clinical_data                                                  
	where data_value is null;                                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete null data_values in wrk
_clinical_data',SQL%ROWCOUNT,stepCt,'Done');                                    
	                                                                               
	--Remove Invalid pipes in the data values.                                     
	--RULE: If Pipe is last or first, delete it                                    
	--If it is in the middle replace with a dash                                   
                                                                                
	update wrk_clinical_data                                                       
	set data_value = replace(trim('|' from data_value), '|', '-')                  
	where data_value like '%|%';                                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Remove pipes in data_value',SQ
L%ROWCOUNT,stepCt,'Done');                                                      
	                                                                               
	commit;                                                                        
                                                                                
	--Remove invalid Parens in the data                                            
	--They have appeared as empty pairs or only single ones.                       
                                                                                
	update wrk_clinical_data                                                       
	set data_value = replace(data_value,'(', '')                                   
	where data_value like '%()%'                                                   
	   or data_value like '%( )%'                                                  
	   or (data_value like '%(%' and data_value NOT like '%)%');                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Remove empty parentheses 1',SQ
L%ROWCOUNT,stepCt,'Done');                                                      
	                                                                               
	update wrk_clinical_data                                                       
	set data_value = replace(data_value,')', '')                                   
	where data_value like '%()%'                                                   
	   or data_value like '%( )%'                                                  
	   or (data_value like '%)%' and data_value NOT like '%(%');                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Remove empty parentheses 2',SQ
L%ROWCOUNT,stepCt,'Done');                                                      
	                                                                               
	commit;                                                                        
                                                                                
	--Replace the Pipes with Commas in the data_label column                       
	update wrk_clinical_data                                                       
    set data_label = replace (data_label, '|', ',')                             
    where data_label like '%|%';                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Replace pipes with comma in da
ta_label',SQL%ROWCOUNT,stepCt,'Done');                                          
	                                                                               
	commit;                                                                        
                                                                                
	--	set visit_name to null when there's only a single visit_name for the catgory
                                                                                
	                                                                               
	update wrk_clinical_data tpm                                                   
	set visit_name=null                                                            
	where (tpm.category_cd) in                                                     
		  (select x.category_cd                                                       
		   from wrk_clinical_data x                                                   
		   group by x.category_cd                                                     
		   having count(distinct upper(x.visit_name)) = 1);                           
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set single visit_name to null'
,SQL%ROWCOUNT,stepCt,'Done');                                                   
		                                                                              
	commit;                                                                        
	                                                                               
	--	set data_label to null when it duplicates the last part of the category_path
                                                                                
	--	Remove data_label from last part of category_path when they are the same    
	                                                                               
	update wrk_clinical_data tpm                                                   
	--set data_label = null                                                        
	set category_path=substr(tpm.category_path,1,instr(tpm.category_path,'\',-2)-1)
                                                                                
	   ,category_cd=substr(tpm.category_cd,1,instr(tpm.category_cd,'+',-2)-1)      
	where (tpm.category_cd, tpm.data_label) in                                     
		  (select distinct t.category_cd                                              
				 ,t.data_label                                                              
		   from wrk_clinical_data t                                                   
		   where upper(substr(t.category_path,instr(t.category_path,'\',-1)+1,length(t
.category_path)-instr(t.category_path,'\',-1)))                                 
			     = upper(t.data_label)                                                   
		     and t.data_label is not null)                                            
	  and tpm.data_label is not null;                                              
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set data_label to null when fo
und in category_path',SQL%ROWCOUNT,stepCt,'Done');                              
		                                                                              
	commit;                                                                        
                                                                                
	--	set visit_name to null if same as data_label                                
	                                                                               
	update wrk_clinical_data t                                                     
	set visit_name=null                                                            
	where (t.category_cd, t.visit_name, t.data_label) in                           
	      (select distinct tpm.category_cd                                         
				 ,tpm.visit_name                                                            
				 ,tpm.data_label                                                            
		  from wrk_clinical_data tpm                                                  
		  where tpm.visit_name = tpm.data_label);                                     
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set visit_name to null when fo
und in data_label',SQL%ROWCOUNT,stepCt,'Done');                                 
		                                                                              
	commit;                                                                        
	                                                                               
	--	set visit_name to null if same as data_value                                
	                                                                               
	update wrk_clinical_data t                                                     
	set visit_name=null                                                            
	where (t.category_cd, t.visit_name, t.data_value) in                           
	      (select distinct tpm.category_cd                                         
				 ,tpm.visit_name                                                            
				 ,tpm.data_value                                                            
		  from wrk_clinical_data tpm                                                  
		  where tpm.visit_name = tpm.data_value);                                     
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set visit_name to null when fo
und in data_value',SQL%ROWCOUNT,stepCt,'Done');                                 
		                                                                              
	commit;                                                                        
	                                                                               
	--	set visit_name to null if only DATALABEL in category_cd                     
	                                                                               
	update wrk_clinical_data t                                                     
	set visit_name=null                                                            
	where t.category_cd like '%DATALABEL%'                                         
	  and t.category_cd not like '%VISITNAME%';                                    
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set visit_name to null when on
ly DATALABE in category_cd',SQL%ROWCOUNT,stepCt,'Done');                        
		                                                                              
	commit;                                                                        
                                                                                
/*	--	Remove sample_type if found in category_path                              
	                                                                               
	update wrk_clinical_data t                                                     
	set sample_type = null                                                         
	where exists                                                                   
	     (select 1 from wrk_clinical_data c                                        
		  where instr(c.category_path,t.sample_type) > 0);                            
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Remove sample_type if already 
in category_path',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
*/                                                                              
	--	comment out may need later                                                  
	                                                                               
	--	change any % to Pct and & and + to ' and ' and _ to space in data_label only
                                                                                
	                                                                               
	update wrk_clinical_data                                                       
	set data_label=replace(replace(replace(replace(data_label,'%',' Pct'),'&',' and
 '),'+',' and '),'_',' ')                                                       
	   ,data_value=replace(replace(replace(data_value,'%',' Pct'),'&',' and '),'+',
' and ')                                                                        
	   ,category_cd=replace(replace(category_cd,'%',' Pct'),'&',' and ')           
	   ,category_path=replace(replace(category_path,'%',' Pct'),'&',' and ');      
                                                                                
  --Trim trailing and leadling spaces as well as remove any double spaces, remov
e space from before comma, remove trailing comma                                
                                                                                
	update wrk_clinical_data                                                       
	set data_label  = trim(trailing ',' from trim(replace(replace(data_label,'  ', 
' '),' ,',','))),                                                               
		data_value  = trim(trailing ',' from trim(replace(replace(data_value,'  ', ' '
),' ,',','))),                                                                  
--		sample_type = trim(trailing ',' from trim(replace(replace(sample_type,'  ', 
' '),' ,',','))),                                                               
		visit_name  = trim(trailing ',' from trim(replace(replace(visit_name,'  ', ' '
),' ,',',')));                                                                  
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Remove leading, trailing, doub
le spaces',SQL%ROWCOUNT,stepCt,'Done');                                         
	                                                                               
	commit;                                                                        
                                                                                
-- determine numeric data types                                                 
                                                                                
	execute immediate('truncate table tm_wz.wt_num_data_types');                   
                                                                                
	insert into wt_num_data_types                                                  
	(category_cd                                                                   
	,data_label                                                                    
	,visit_name                                                                    
	)                                                                              
    select category_cd,                                                         
           data_label,                                                          
           visit_name                                                           
    from wrk_clinical_data                                                      
    where data_value is not null                                                
    group by category_cd                                                        
	        ,data_label                                                            
            ,visit_name                                                         
      having sum(is_number(data_value)) = 0;                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert numeric data into WZ wt
_num_data_types',SQL%ROWCOUNT,stepCt,'Done');                                   
	                                                                               
	commit;                                                                        
                                                                                
	--	Check if any duplicate records of key columns (site_id, subject_id, visit_na
me, data_label, category_cd) for numeric data                                   
	--	exist.  Raise error if yes                                                  
	                                                                               
	execute immediate('truncate table tm_wz.wt_clinical_data_dups');               
	                                                                               
	insert into wt_clinical_data_dups                                              
	(site_id                                                                       
	,subject_id                                                                    
	,visit_name                                                                    
	,data_label                                                                    
	,category_cd)                                                                  
	select w.site_id, w.subject_id, w.visit_name, w.data_label, w.category_cd      
	from wrk_clinical_data w                                                       
	where exists                                                                   
		 (select 1 from wt_num_data_types t                                           
		 where coalesce(w.category_cd,'@') = coalesce(t.category_cd,'@')              
		   and coalesce(w.data_label,'@') = coalesce(t.data_label,'@')                
		   and coalesce(w.visit_name,'@') = coalesce(t.visit_name,'@')                
		  )                                                                           
	group by w.site_id, w.subject_id, w.visit_name, w.data_label, w.category_cd    
	having count(*) > 1;                                                           
		                                                                              
	pCount := SQL%ROWCOUNT;                                                        
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Check for duplicate key column
s',pCount,stepCt,'Done');                                                       
			                                                                             
	if pCount > 0 then                                                             
		raise duplicate_values;                                                       
	end if;                                                                        
	                                                                               
	--	check for multiple visit_names for category_cd, data_label, data_value      
	                                                                               
     select max(case when x.null_ct > 0 and x.non_null_ct > 0                   
					 then 1 else 0 end) into pCount                                            
      from (select category_cd, data_label, data_value                          
				  ,sum(decode(visit_name,null,1,0)) as null_ct                              
				  ,sum(decode(visit_name,null,0,1)) as non_null_ct                          
			from lt_src_clinical_data                                                    
			where (category_cd like '%VISITNAME%' or                                     
				   category_cd not like '%DATALABEL%')                                      
			group by category_cd, data_label, data_value) x;                             
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Check for multiple visit_names
 for category/label/value ',pCount,stepCt,'Done');                              
			                                                                             
	if pCount > 0 then                                                             
		raise multiple_visit_names;                                                   
	end if;                                                                        
		                                                                              
	update wrk_clinical_data t                                                     
	set data_type='N'                                                              
	where exists                                                                   
	     (select 1 from wt_num_data_types x                                        
	      where nvl(t.category_cd,'@') = nvl(x.category_cd,'@')                    
			and nvl(t.data_label,'**NULL**') = nvl(x.data_label,'**NULL**')              
			and nvl(t.visit_name,'**NULL**') = nvl(x.visit_name,'**NULL**')              
		  );                                                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated data_type flag for num
eric data_types',SQL%ROWCOUNT,stepCt,'Done');                                   
	                                                                               
	commit;                                                                        
                                                                                
	-- Build all needed leaf nodes in one pass for both numeric and text nodes     
                                                                                
	execute immediate('truncate table tm_wz.wt_trial_nodes');                      
	                                                                               
	insert into wt_trial_nodes                                                     
	(leaf_node                                                                     
	,category_cd                                                                   
	,visit_name                                                                    
	,data_label                                                                    
	--,node_name                                                                   
	,data_value                                                                    
	,data_type                                                                     
	)                                                                              
    select DISTINCT                                                             
    Case                                                                        
	--	Text data_type (default node)                                               
	When a.data_type = 'T'                                                         
	     then case when a.category_path like '%DATALABEL%' and a.category_path like
 '%VISITNAME%'                                                                  
		      then regexp_replace(topNode || replace(replace(a.category_path,'DATALABE
L',a.data_label),'VISITNAME',a.visit_name) || '\' || a.data_value || '\','(\\){2
,}', '\')                                                                       
			  when a.category_path like '%DATALABEL%'                                    
			  then regexp_replace(topNode || replace(a.category_path,'DATALABEL',a.data_l
abel) || '\' || a.data_value || '\','(\\){2,}', '\')                            
			  else REGEXP_REPLACE(topNode || a.category_path ||                          
                   '\'  || a.data_label || '\' || a.data_value || '\' || a.visit
_name || '\',                                                                   
                   '(\\){2,}', '\')                                             
			  end                                                                        
	--	else is numeric data_type and default_node                                  
	else case when a.category_path like '%DATALABEL%' and a.category_path like '%VI
SITNAME%'                                                                       
		      then regexp_replace(topNode || replace(replace(a.category_path,'DATALABE
L',a.data_label),'VISITNAME',a.visit_name) || '\','(\\){2,}', '\')              
			  when a.category_path like '%DATALABEL%'                                    
			  then regexp_replace(topNode || replace(a.category_path,'DATALABEL',a.data_l
abel) || '\','(\\){2,}', '\')                                                   
			  else REGEXP_REPLACE(topNode || a.category_path ||                          
                   '\'  || a.data_label || '\' || a.visit_name || '\',          
                   '(\\){2,}', '\')                                             
			  end                                                                        
	end as leaf_node,                                                              
    a.category_cd,                                                              
    a.visit_name,                                                               
	a.data_label,                                                                  
	decode(a.data_type,'T',a.data_value,null) as data_value                        
    ,a.data_type                                                                
	from  wrk_clinical_data a;                                                     
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create leaf nodes for trial',S
QL%ROWCOUNT,stepCt,'Done');                                                     
	commit;                                                                        
	                                                                               
	--	set node_name                                                               
	                                                                               
	update wt_trial_nodes                                                          
	set node_name=parse_nth_value(leaf_node,length(leaf_node)-length(replace(leaf_n
ode,'\',null)),'\');                                                            
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated node name for leaf nod
es',SQL%ROWCOUNT,stepCt,'Done');                                                
	commit;	                                                                       
	                                                                               
	-- execute immediate('analyze table tm_wz.wt_trial_nodes compute statistics'); 
	                                                                               
	--	insert subjects into patient_dimension if needed                            
	                                                                               
	execute immediate('truncate table tmp_subject_info');                          
                                                                                
	insert into tmp_subject_info                                                   
	(usubjid,                                                                      
     age_in_years_num,                                                          
     sex_cd,                                                                    
     race_cd                                                                    
    )                                                                           
	select a.usubjid,                                                              
	      nvl(max(case when upper(a.data_label) = 'AGE'                            
					   then case when is_number(a.data_value) = 1 then 0 else to_number(a.data_
value) end                                                                      
		               when upper(a.data_label) like '%(AGE)'                         
					   then case when is_number(a.data_value) = 1 then 0 else to_number(a.data_
value) end                                                                      
					   else null end),0) as age,                                               
		  --nvl(max(decode(upper(a.data_label),'AGE',data_value,null)),0) as age,     
		  nvl(max(case when upper(a.data_label) = 'SEX' then a.data_value             
		           when upper(a.data_label) like '%(SEX)' then a.data_value           
				   when upper(a.data_label) = 'GENDER' then a.data_value                    
				   else null end),'Unknown') as sex,                                        
		  --max(decode(upper(a.data_label),'SEX',data_value,'GENDER',data_value,null))
 as sex,                                                                        
		  max(case when upper(a.data_label) = 'RACE' then a.data_value                
		           when upper(a.data_label) like '%(RACE)' then a.data_value          
				   else null end) as race                                                   
		  --max(decode(upper(a.data_label),'RACE',data_value,null)) as race           
	from wrk_clinical_data a                                                       
	--where upper(a.data_label) in ('AGE','RACE','SEX','GENDER')                   
	group by a.usubjid;                                                            
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert subject information int
o temp table',SQL%ROWCOUNT,stepCt,'Done');                                      
	                                                                               
	commit;                                                                        
	                                                                               
	--	Delete dropped subjects from patient_dimension if they do not exist in de_su
bject_sample_mapping                                                            
	                                                                               
	delete patient_dimension                                                       
	where sourcesystem_cd in                                                       
		 (select distinct pd.sourcesystem_cd from patient_dimension pd                
		  where pd.sourcesystem_cd like TrialId || ':%'                               
		  minus                                                                       
		  select distinct cd.usubjid from wrk_clinical_data cd)                       
	  and patient_num not in                                                       
		  (select distinct sm.patient_id from de_subject_sample_mapping sm);          
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete dropped subjects from p
atient_dimension',SQL%ROWCOUNT,stepCt,'Done');                                  
	                                                                               
	commit;	                                                                       
	                                                                               
	--	update patients with changed information                                    
	                                                                               
	update patient_dimension pd                                                    
	set (sex_cd, age_in_years_num, race_cd, update_date) =                         
		(select nvl(t.sex_cd,pd.sex_cd), t.age_in_years_num, nvl(t.race_cd,pd.race_cd)
, sysdate                                                                       
		 from tmp_subject_info t                                                      
		 where t.usubjid = pd.sourcesystem_cd                                         
		   and (coalesce(pd.sex_cd,'@') != t.sex_cd or                                
				pd.age_in_years_num != t.age_in_years_num or                                
				coalesce(pd.race_cd,'@') != t.race_cd)                                      
		)                                                                             
	where exists                                                                   
		 (select 1 from tmp_subject_info x                                            
		  where pd.sourcesystem_cd = x.usubjid                                        
		    and (coalesce(pd.sex_cd,'@') != x.sex_cd or                               
				 pd.age_in_years_num != x.age_in_years_num or                               
				 coalesce(pd.race_cd,'@') != x.race_cd)                                     
		 );                                                                           
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update subjects with changed d
emographics in patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                  
	                                                                               
	commit;	                                                                       
                                                                                
	--	insert new subjects into patient_dimension                                  
	                                                                               
	insert into patient_dimension                                                  
    (patient_num,                                                               
     sex_cd,                                                                    
     age_in_years_num,                                                          
     race_cd,                                                                   
     update_date,                                                               
     download_date,                                                             
     import_date,                                                               
     sourcesystem_cd                                                            
    )                                                                           
    select seq_patient_num.nextval,                                             
		   t.sex_cd,                                                                  
		   t.age_in_years_num,                                                        
		   t.race_cd,                                                                 
		   sysdate,                                                                   
		   sysdate,                                                                   
		   sysdate,                                                                   
		   t.usubjid                                                                  
    from tmp_subject_info t                                                     
	where t.usubjid in                                                             
		 (select distinct cd.usubjid from tmp_subject_info cd                         
		  minus                                                                       
		  select distinct pd.sourcesystem_cd from patient_dimension pd                
		  where pd.sourcesystem_cd like TrialId || '%');                              
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert new subjects into patie
nt_dimension',SQL%ROWCOUNT,stepCt,'Done');                                      
	                                                                               
	commit;                                                                        
		                                                                              
	--	delete leaf nodes that will not be reused, if any                           
	                                                                               
	 FOR r_delUnusedLeaf in delUnusedLeaf Loop                                     
                                                                                
    --	deletes unused leaf nodes for a trial one at a time                      
                                                                                
		i2b2_delete_1_node(r_delUnusedLeaf.c_fullname);                               
		stepCt := stepCt + 1;	                                                        
		cz_write_audit(jobId,databaseName,procedureName,'Deleted unused node: ' || r_d
elUnusedLeaf.c_fullname,SQL%ROWCOUNT,stepCt,'Done');                            
                                                                                
	END LOOP;	                                                                     
	                                                                               
	--	bulk insert leaf nodes                                                      
	                                                                               
	update concept_dimension cd                                                    
	set name_char=(select t.node_name from wt_trial_nodes t                        
				   where cd.concept_path = t.leaf_node                                      
				     and cd.name_char != t.node_name)                                       
	where exists (select 1 from wt_trial_nodes x                                   
				  where cd.concept_path = x.leaf_node                                       
				    and cd.name_char != x.node_name);                                       
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update name_char in concept_di
mension for changed names',SQL%ROWCOUNT,stepCt,'Done');                         
	                                                                               
	commit;                                                                        
							                                                                         
	                                                                               
	insert into concept_dimension                                                  
    (concept_cd                                                                 
	,concept_path                                                                  
	,name_char                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,table_name                                                                    
	)                                                                              
    select concept_id.nextval                                                   
	     ,x.leaf_node                                                              
		 ,x.node_name                                                                 
		 ,sysdate                                                                     
		 ,sysdate                                                                     
		 ,sysdate                                                                     
		 ,TrialId                                                                     
		 ,'CONCEPT_DIMENSION'                                                         
	from (select distinct c.leaf_node                                              
				,to_char(c.node_name) as node_name                                          
		  from wt_trial_nodes c                                                       
		  where not exists                                                            
			(select 1 from concept_dimension x                                           
			where c.leaf_node = x.concept_path)                                          
		 ) x;                                                                         
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted new leaf nodes into I
2B2DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                     
    commit;                                                                     
	                                                                               
	--	update i2b2 to pick up change in name, data_type for leaf nodes             
	                                                                               
	update i2b2 b                                                                  
	set (c_name, c_columndatatype, c_metadataxml)=                                 
		(select t.node_name, t.data_type                                              
		 ,case when t.data_type = 'T'                                                 
		       then null                                                              
			   else '<?xml version="1.0"?><ValueMetadata><Version>3.02</Version><Creation
DateTime>08/14/2008 01:22:59</CreationDateTime><TestID></TestID><TestName></Test
Name><DataType>PosFloat</DataType><CodeType></CodeType><Loinc></Loinc><Flagstous
e></Flagstouse><Oktousevalues>Y</Oktousevalues><MaxStringLength></MaxStringLengt
h><LowofLowValue>0</LowofLowValue><HighofLowValue>0</HighofLowValue><LowofHighVa
lue>100</LowofHighValue>100<HighofHighValue>100</HighofHighValue><LowofToxicValu
e></LowofToxicValue><HighofToxicValue></HighofToxicValue><EnumValues></EnumValue
s><CommentsDeterminingExclusion><Com></Com></CommentsDeterminingExclusion><UnitV
alues><NormalUnits>ratio</NormalUnits><EqualUnits></EqualUnits><ExcludingUnits><
/ExcludingUnits><ConvertingUnits><Units></Units><MultiplyingFactor></Multiplying
Factor></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New /></Anal
ysis></ValueMetadata>'                                                          
		  end                                                                         
		 from wt_trial_nodes t                                                        
		 where b.c_fullname = t.leaf_node                                             
		   and (b.c_name != t.node_name or b.c_columndatatype != t.data_type))        
	where exists                                                                   
		(select 1 from wt_trial_nodes x                                               
		 where b.c_fullname = x.leaf_node                                             
		   and (b.c_name != x.node_name or b.c_columndatatype != x.data_type));       
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated name and data type in 
i2b2 if changed',SQL%ROWCOUNT,stepCt,'Done');                                   
    commit;                                                                     
			                                                                             
	insert into i2b2                                                               
    (c_hlevel                                                                   
	,c_fullname                                                                    
	,c_name                                                                        
	,c_visualattributes                                                            
	,c_synonym_cd                                                                  
	,c_facttablecolumn                                                             
	,c_tablename                                                                   
	,c_columnname                                                                  
	,c_dimcode                                                                     
	,c_tooltip                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,c_basecode                                                                    
	,c_operator                                                                    
	,c_columndatatype                                                              
	,c_comment                                                                     
	,i2b2_id                                                                       
	,c_metadataxml                                                                 
	)                                                                              
    select (length(c.concept_path) - nvl(length(replace(c.concept_path, '\')),0)
) / length('\') - 2 + root_level                                                
		  ,c.concept_path                                                             
		  ,c.name_char                                                                
		  ,'LA'                                                                       
		  ,'N'                                                                        
		  ,'CONCEPT_CD'                                                               
		  ,'CONCEPT_DIMENSION'                                                        
		  ,'CONCEPT_PATH'                                                             
		  ,c.concept_path                                                             
		  ,c.concept_path                                                             
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,c.sourcesystem_cd                                                          
		  ,c.concept_cd                                                               
		  ,'LIKE'                                                                     
		  ,'T'		-- if i2b2 gets fixed to respect c_columndatatype then change to t.dat
a_type                                                                          
		  ,'trial:' || TrialID                                                        
		  ,i2b2_id_seq.nextval                                                        
		  ,case when t.data_type = 'T' then null                                      
		   else '<?xml version="1.0"?><ValueMetadata><Version>3.02</Version><CreationD
ateTime>08/14/2008 01:22:59</CreationDateTime><TestID></TestID><TestName></TestN
ame><DataType>PosFloat</DataType><CodeType></CodeType><Loinc></Loinc><Flagstouse
></Flagstouse><Oktousevalues>Y</Oktousevalues><MaxStringLength></MaxStringLength
><LowofLowValue>0</LowofLowValue><HighofLowValue>0</HighofLowValue><LowofHighVal
ue>100</LowofHighValue>100<HighofHighValue>100</HighofHighValue><LowofToxicValue
></LowofToxicValue><HighofToxicValue></HighofToxicValue><EnumValues></EnumValues
><CommentsDeterminingExclusion><Com></Com></CommentsDeterminingExclusion><UnitVa
lues><NormalUnits>ratio</NormalUnits><EqualUnits></EqualUnits><ExcludingUnits></
ExcludingUnits><ConvertingUnits><Units></Units><MultiplyingFactor></MultiplyingF
actor></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New /></Analy
sis></ValueMetadata>'                                                           
		   end                                                                        
    from concept_dimension c                                                    
		,wt_trial_nodes t                                                             
    where c.concept_path = t.leaf_node                                          
	  and not exists                                                               
		 (select 1 from i2b2 x                                                        
		  where c.concept_path = x.c_fullname);                                       
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted leaf nodes into I2B2M
ETADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                                      
    COMMIT;                                                                     
                                                                                
	--	delete from observation_fact all concept_cds for trial that are clinical dat
a, exclude concept_cds from biomarker data                                      
	                                                                               
	delete from observation_fact f                                                 
	where (f.modifier_cd = TrialId or f.sourcesystem_cd = TrialId)                 
	  and f.concept_cd not in                                                      
		 (select distinct concept_code as concept_cd from de_subject_sample_mapping   
		  where trial_name = TrialId                                                  
		    and concept_code is not null                                              
		  union                                                                       
		  select distinct platform_cd as concept_cd from de_subject_sample_mapping    
		  where trial_name = TrialId                                                  
		    and platform_cd is not null                                               
		  union                                                                       
		  select distinct sample_type_cd as concept_cd from de_subject_sample_mapping 
		  where trial_name = TrialId                                                  
		    and sample_type_cd is not null                                            
		  union                                                                       
		  select distinct tissue_type_cd as concept_cd from de_subject_sample_mapping 
		  where trial_name = TrialId                                                  
		    and tissue_type_cd is not null                                            
		  union                                                                       
		  select distinct timepoint_cd as concept_cd from de_subject_sample_mapping   
		  where trial_name = TrialId                                                  
		    and timepoint_cd is not null                                              
		  union                                                                       
		  select distinct concept_cd as concept_cd from de_subject_snp_dataset        
		  where trial_name = TrialId                                                  
		    and concept_cd is not null);                                              
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete clinical data for study
 from observation_fact',SQL%ROWCOUNT,stepCt,'Done');                            
    COMMIT;		                                                                   
	                                                                               
    --Insert into observation_fact                                              
	                                                                               
	insert into observation_fact                                                   
	(patient_num,                                                                  
     concept_cd,                                                                
     modifier_cd,                                                               
     valtype_cd,                                                                
     tval_char,                                                                 
     nval_num,                                                                  
     sourcesystem_cd,                                                           
     import_date,                                                               
     valueflag_cd,                                                              
     provider_id,                                                               
     location_cd                                                                
	)                                                                              
	select distinct c.patient_num,                                                 
		   i.c_basecode,                                                              
		   '@',                                                                       
		   a.data_type,                                                               
		   case when a.data_type = 'T' then a.data_value                              
				else 'E'  --Stands for Equals for numeric types                             
				end,                                                                        
		   case when a.data_type = 'N' then a.data_value                              
				else null --Null for text types                                             
				end,                                                                        
		   TrialId,                                                                   
		  sysdate,                                                                    
		   '@',                                                                       
		   '@',                                                                       
		   '@'                                                                        
	from wrk_clinical_data a                                                       
		,patient_dimension c                                                          
		,wt_trial_nodes t                                                             
		,i2b2 i                                                                       
	where a.usubjid = c.sourcesystem_cd                                            
	  and nvl(a.category_cd,'@') = nvl(t.category_cd,'@')                          
	  and nvl(a.data_label,'**NULL**') = nvl(t.data_label,'**NULL**')              
	  and nvl(a.visit_name,'**NULL**') = nvl(t.visit_name,'**NULL**')              
	  and decode(a.data_type,'T',a.data_value,'**NULL**') = nvl(t.data_value,'**NUL
L**')                                                                           
	  and t.leaf_node = i.c_fullname                                               
	  and not exists		-- don't insert if lower level node exists                   
		 (select 1 from wt_trial_nodes x                                              
		  where x.leaf_node like t.leaf_node || '%_')                                 
	  and a.data_value is not null;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert trial into I2B2DEMODATA
 observation_fact',SQL%ROWCOUNT,stepCt,'Done');                                 
	                                                                               
	commit;                                                                        
                                                                                
	--	update c_visualattributes for all nodes in study, done to pick up node that 
changed from leaf/numeric to folder/text                                        
	                                                                               
	update i2b2 a                                                                  
	set c_visualattributes=(                                                       
		with upd as (select p.c_fullname, count(*) as nbr_children                    
				 from i2b2 p                                                                
					 ,i2b2 c                                                                   
				 where p.c_fullname like topNode || '%'                                     
				   and c.c_fullname like p.c_fullname || '%'                                
				 group by p.c_fullname)                                                     
		select case when u.nbr_children = 1                                           
					then 'L' || substr(a.c_visualattributes,2,2)                               
	                else 'F' || substr(a.c_visualattributes,2,1) ||                
						 case when u.c_fullname = topNode and highlight_study = 'Y'               
							  then 'J' else substr(a.c_visualattributes,3,1) end                     
			   end                                                                       
		from upd u                                                                    
		where a.c_fullname = u.c_fullname)                                            
	where a.c_fullname in                                                          
		(select x.c_fullname from i2b2 x                                              
		 where x.c_fullname like topNode || '%');                                     
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update c_visualattributes for 
study',SQL%ROWCOUNT,stepCt,'Done');                                             
                                                                                
	commit;                                                                        
	                                                                               
	-- final procs                                                                 
                                                                                
	i2b2_fill_in_tree(TrialId, topNode, jobID);                                    
	                                                                               
	--	set sourcesystem_cd, c_comment to null if any added upper-level nodes       
		                                                                              
	update i2b2 b                                                                  
	set sourcesystem_cd=null,c_comment=null                                        
	where b.sourcesystem_cd = TrialId                                              
	  and length(b.c_fullname) < length(topNode);                                  
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Set sourcesystem_cd to null fo
r added upper-level nodes',SQL%ROWCOUNT,stepCt,'Done');                         
	commit;                                                                        
	                                                                               
	i2b2_create_concept_counts(topNode, jobID);                                    
	                                                                               
	--	delete each node that is hidden after create concept counts                 
	                                                                               
	 FOR r_delNodes in delNodes Loop                                               
                                                                                
    --	deletes hidden nodes for a trial one at a time                           
                                                                                
		i2b2_delete_1_node(r_delNodes.c_fullname);                                    
		stepCt := stepCt + 1;                                                         
		tText := 'Deleted node: ' || r_delNodes.c_fullname;                           
		                                                                              
		cz_write_audit(jobId,databaseName,procedureName,tText,SQL%ROWCOUNT,stepCt,'Don
e');                                                                            
                                                                                
	END LOOP;  	                                                                   
                                                                                
	i2b2_create_security_for_trial(TrialId, secureStudy, jobID);                   
	i2b2_load_security_data(jobID);                                                
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_load_clinical_data',0
,stepCt,'Done');                                                                
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	if newJobFlag = 1                                                              
	then                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	end if;                                                                        
                                                                                
	rtnCode := 0;                                                                  
                                                                                
	exception                                                                      
	when duplicate_values then                                                     
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Duplicate values found in key
 columns',0,stepCt,'Done');	                                                    
		cz_error_handler (jobID, procedureName);                                      
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;		                                                              
	when invalid_topNode then                                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Path specified in top_node mu
st contain at least 2 nodes',0,stepCt,'Done');	                                 
		cz_error_handler (jobID, procedureName);                                      
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;	                                                               
	when multiple_visit_names then                                                 
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Multiple visit_names exist fo
r category/label/value',0,stepCt,'Done');	                                      
		cz_error_handler (jobID, procedureName);                                      
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;                                                                
	when others then                                                               
    --Handle errors.                                                            
		cz_error_handler (jobID, procedureName);                                      
    --End Proc                                                                  
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;                                                                
	                                                                               
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_ANNOTATION_DEAPP"              
(                                                                               
currentJobID NUMBER := null                                                     
 )                                                                              
AS                                                                              
                                                                                
	--	Loads annotation_deapp from external table                                  
	                                                                               
	--	JEA@20100322	(JNJ-1789) New                                                 
	--	JEA@20100601	Added code to insert to probeset_deapp and update annotation_de
app with probeset_id                                                            
	--	JEA@20100624	Added step to refresh deapp.de_mrna_annotation                 
	--	JEA@20100805	Added distinct to remove dups                                  
	--	JEA@20100901	Use gene_id from biomart.bio_marker to update de_mrna_annotatio
n if gene_id is null                                                            
	--	JEA@20100914	Use bio_marker_name from biomart.bio_marker to update de_mrna_a
nnotation if gene_symbol is null                                                
	--	JEA@20110210	Convert gene_id to number when inserting into de_mrna_annotatio
n                                                                               
	--	JEA@20111103	Only load data if gene_is is not null or gene_symbol is not nul
l                                                                               
	--	JEA@20111229	Change probeset_deapp to load only new probesets and allow null
 gene_id and gene_symbol,                                                       
	--					added organism                                                          
	--	JEA@20120208	Added coalesce to force organism to Homo sapiens if none specif
ied, added to_char to gene_id                                                   
	--					when querying bio_marker table                                          
	--	JEA@@0120523	Update organism in probeset_deapp if changed                   
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
	gplId	varchar2(100);                                                           
                                                                                
BEGIN                                                                           
                                                                                
	stepCt := 0;                                                                   
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_load_annotation_
deapp',0,stepCt,'Done');                                                        
                                                                                
	--	get GPL id from external table                                              
	                                                                               
	select distinct gpl_id into gplId from lt_src_deapp_annot;                     
	                                                                               
/*	                                                                             
	--	delete any existing data from probeset_deapp                                
	                                                                               
	delete from probeset_deapp                                                     
	where platform = gplId;                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from REFE
RENCE probeset_deapp',SQL%ROWCOUNT,stepCt,'Done');                              
*/                                                                              
		                                                                              
	--	delete any existing data from annotation_deapp                              
	                                                                               
	delete from annotation_deapp                                                   
	where gpl_id = gplId;                                                          
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from anno
tation_deapp',SQL%ROWCOUNT,stepCt,'Done');                                      
                                                                                
	--	delete any existing data from deapp.de_mrna_annotation                      
	                                                                               
	delete from deapp.de_mrna_annotation                                           
	where gpl_id = gplId;                                                          
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data from de_m
rna_annotation',SQL%ROWCOUNT,stepCt,'Done');                                    
                                                                                
	--	update organism for existing probesets in probeset_deapp                    
	                                                                               
	update probeset_deapp p                                                        
	set organism=(select distinct t.organism from lt_src_deapp_annot t             
				  where p.platform = t.gpl_id                                               
				    and p.probeset = t.probe_id)                                            
	where exists                                                                   
		 (select 1 from lt_src_deapp_annot x                                          
		  where p.platform = x.gpl_id                                                 
		    and p.probeset = x.probe_id);                                             
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update organism in probeset_de
app',SQL%ROWCOUNT,stepCt,'Done');                                               
			                                                                             
	--	insert any new probesets into probeset_deapp                                
	                                                                               
	insert into probeset_deapp                                                     
	(probeset                                                                      
	,organism                                                                      
	,platform)                                                                     
	select distinct probe_id                                                       
		  ,coalesce(organism,'Homo sapiens')                                          
	      ,gpl_id                                                                  
	from lt_src_deapp_annot t                                                      
	where not exists                                                               
		 (select 1 from probeset_deapp x                                              
		  where t.gpl_id = x.platform                                                 
		    and t.probe_id = x.probeset                                               
			and coalesce(t.organism,'Homo sapiens') = coalesce(x.organism,'Homo sapiens')
)                                                                               
	;                                                                              
	--where gene_id is not null                                                    
	--   or gene_symbol is not null;                                               
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert new probesets into prob
eset_deapp',SQL%ROWCOUNT,stepCt,'Done');                                        
		                                                                              
	--	insert data into annotation_deapp                                           
	                                                                               
	insert into annotation_deapp                                                   
	(gpl_id                                                                        
	,probe_id                                                                      
	,gene_symbol                                                                   
	,gene_id                                                                       
	,probeset_id                                                                   
	,organism)                                                                     
	select distinct d.gpl_id                                                       
	,d.probe_id                                                                    
	,d.gene_symbol                                                                 
	,d.gene_id                                                                     
	,p.probeset_id                                                                 
	,coalesce(d.organism,'Homo sapiens')                                           
	from lt_src_deapp_annot d                                                      
	,probeset_deapp p                                                              
	where d.probe_id = p.probeset                                                  
	  and d.gpl_id = p.platform                                                    
	  and coalesce(d.organism,'Homo sapiens') = coalesce(p.organism,'Homo sapiens')
                                                                                
	  --and (d.gene_id is not null or d.gene_symbol is not null)                   
	  ;                                                                            
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load annotation data into REFE
RENCE annotation_deapp',SQL%ROWCOUNT,stepCt,'Done');                            
		                                                                              
	--	insert data into deapp.de_mrna_annotation                                   
	                                                                               
	insert into de_mrna_annotation                                                 
	(gpl_id                                                                        
	,probe_id                                                                      
	,gene_symbol                                                                   
	,gene_id                                                                       
	,probeset_id                                                                   
	,organism)                                                                     
	select distinct d.gpl_id                                                       
	,d.probe_id                                                                    
	,d.gene_symbol                                                                 
	,decode(d.gene_id,null,null,to_number(d.gene_id)) as gene_id                   
	,p.probeset_id                                                                 
	,coalesce(d.organism,'Homo sapiens')                                           
	from lt_src_deapp_annot d                                                      
	,probeset_deapp p                                                              
	where d.probe_id = p.probeset                                                  
	  and d.gpl_id = p.platform                                                    
	  and coalesce(d.organism,'Homo sapiens') = coalesce(p.organism,'Homo sapiens')
                                                                                
	  --and (d.gene_id is not null or d.gene_symbol is not null)                   
	  ;                                                                            
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load annotation data into DEAP
P de_mrna_annotation',SQL%ROWCOUNT,stepCt,'Done');                              
		                                                                              
	--	update gene_id if null                                                      
	                                                                               
	update de_mrna_annotation t                                                    
	set gene_id=(select to_number(min(b.primary_external_id)) as gene_id           
				 from biomart.bio_marker b                                                  
				 where t.gene_symbol = b.bio_marker_name                                    
				   and upper(b.organism) = upper(t.organism)                                
				   and upper(b.bio_marker_type) = 'GENE')                                   
	where t.gpl_id = gplId                                                         
	  and t.gene_id is null                                                        
	  and t.gene_symbol is not null                                                
	  and exists                                                                   
		 (select 1 from biomart.bio_marker x                                          
		  where t.gene_symbol = x.bio_marker_name                                     
			and upper(x.organism) = upper(t.organism)                                    
			and upper(x.bio_marker_type) = 'GENE');                                      
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated missing gene_id in de_
mrna_annotation',SQL%ROWCOUNT,stepCt,'Done');                                   
	                                                                               
	--	update gene_symbol if null                                                  
	                                                                               
	update de_mrna_annotation t                                                    
	set gene_symbol=(select min(b.bio_marker_name) as gene_symbol                  
				 from biomart.bio_marker b                                                  
				 where to_char(t.gene_id) = b.primary_external_id                           
				   and upper(b.organism) = upper(t.organism)                                
				   and upper(b.bio_marker_type) = 'GENE')                                   
	where t.gpl_id = gplId                                                         
	  and t.gene_symbol is null                                                    
	  and t.gene_id is not null                                                    
	  and exists                                                                   
		 (select 1 from biomart.bio_marker x                                          
		  where to_char(t.gene_id) = x.primary_external_id                            
			and upper(x.organism) = upper(t.organism)                                    
			and upper(x.bio_marker_type) = 'GENE');                                      
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Updated missing gene_id in de_
mrna_annotation',SQL%ROWCOUNT,stepCt,'Done');                                   
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_load_annotation_deapp
',0,stepCt,'Done');                                                             
	                                                                               
       ---Cleanup OVERALL JOB if this proc is being run standalone              
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
/*                                                                              
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_PROBESET_ID"  MINVALUE 249738 MAXVALUE 99999999
 INCREMENT BY 1 START WITH 265364 CACHE 20 NOORDER  NOCYCLE ;                   
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."ANNOTATION_DEAPP"                                       
   (	"GPL_ID" VARCHAR2(100 BYTE),                                               
	"PROBE_ID" VARCHAR2(100 BYTE),                                                 
	"GENE_SYMBOL" VARCHAR2(100 BYTE),                                              
	"GENE_ID" VARCHAR2(100 BYTE),                                                  
	"PROBESET_ID" NUMBER(38,0)                                                     
   ) PCTFREE 10  NOLOGGING                                                      
  TABLESPACE "TRANSMART" ;                                                      
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."PROBESET_DEAPP"                                         
   (	"PROBESET_ID" NUMBER(38,0) NOT NULL ENABLE,                                
	"PROBESET" VARCHAR2(100 BYTE) NOT NULL ENABLE,                                 
	"PLATFORM" VARCHAR2(100 BYTE) NOT NULL ENABLE                                  
   ) PCTFREE 10 NOLOGGING                                                       
  TABLESPACE "TRANSMART" ;                                                      
                                                                                
                                                                                
  CREATE INDEX "TM_CZ"."PROBESET_DEAPP_I1" ON "TM_CZ"."PROBESET_DEAPP" ("PROBESE
T_ID")                                                                          
  PCTFREE 10 NOLOGGING COMPUTE STATISTICS                                       
  TABLESPACE "INDX" ;                                                           
                                                                                
  CREATE INDEX "TM_CZ"."PROBESET_DEAPP_I2" ON "TM_CZ"."PROBESET_DEAPP" ("PROBESE
T", "PLATFORM")                                                                 
  PCTFREE 10 NOLOGGING COMPUTE STATISTICS                                       
  TABLESPACE "INDX" ;                                                           
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_PROBESET_DEAPP"                        
before insert on "PROBESET_DEAPP"                                               
	for each row begin                                                             
		if inserting then                                                             
			if :NEW."PROBESET_ID" is null then                                           
				select SEQ_PROBESET_ID.nextval into :NEW."PROBESET_ID" from dual;           
			end if;                                                                      
		end if;                                                                       
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_PROBESET_DEAPP" ENABLE;                              
                                                                                
                                                                                
  CREATE TABLE "TM_LZ"."DEAPP_ANNOT_EXTRNL"                                     
   (	"GPL_ID" VARCHAR2(100 BYTE),                                               
	"PROBE_ID" VARCHAR2(100 BYTE),                                                 
	"GENE_SYMBOL" VARCHAR2(100 BYTE),                                              
	"GENE_ID" VARCHAR2(250 BYTE)                                                   
   )                                                                            
   ORGANIZATION EXTERNAL                                                        
    ( TYPE ORACLE_LOADER                                                        
      DEFAULT DIRECTORY "DATA"                                                  
      ACCESS PARAMETERS                                                         
      ( records delimited BY newline nologfile skip 1 fields terminated BY 0X'09
' LRTRIM MISSING FIELD VALUES ARE NULL     )                                    
      LOCATION                                                                  
       ( 'GPL180_p.txt'                                                         
       )                                                                        
    )                                                                           
  ;                                                                             
                                                                                
                                                                                
  CREATE TABLE "TM_LZ"."LT_SRC_DEAPP_ANNOT"                                     
   (	"GPL_ID" VARCHAR2(100 BYTE),                                               
	"PROBE_ID" VARCHAR2(100 BYTE),                                                 
	"GENE_SYMBOL" VARCHAR2(100 BYTE),                                              
	"GENE_ID" VARCHAR2(250 BYTE),                                                  
	"ORGANISM" VARCHAR2(200)                                                       
   ) SEGMENT CREATION DEFERRED                                                  
  PCTFREE 10 NOLOGGING                                                          
  TABLESPACE "TRANSMART" ;                                                      
                                                                                
                                                                                
  CREATE TABLE "DEAPP"."DE_GPL_INFO"                                            
   (	"PLATFORM" VARCHAR2(10 BYTE),                                              
	"TITLE" VARCHAR2(500 BYTE),                                                    
	"ORGANISM" VARCHAR2(100 BYTE),                                                 
	"ANNOTATION_DATE" TIMESTAMP (6)                                                
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING         
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)              
  TABLESPACE "DEAPP" ;                                                          
                                                                                
                                                                                
  CREATE TABLE "DEAPP"."DE_MRNA_ANNOTATION"                                     
   (	"GPL_ID" VARCHAR2(100 BYTE),                                               
	"PROBE_ID" VARCHAR2(100 BYTE),                                                 
	"GENE_SYMBOL" VARCHAR2(100 BYTE),                                              
	"PROBESET_ID" NUMBER(38,0),                                                    
	"GENE_ID" NUMBER(18,0)                                                         
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING         
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)              
  TABLESPACE "DEAPP" ;                                                          
                                                                                
                                                                                
  CREATE INDEX "DEAPP"."DE_MRNA_ANNOTATION_I2" ON "DEAPP"."DE_MRNA_ANNOTATION" (
"GPL_ID", "PROBE_ID")                                                           
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS                         
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)              
  TABLESPACE "DEAPP" ;                                                          
                                                                                
                                                                                
                                                                                
                                                                                
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_LOAD_ACROSS_TRIALS"                 
(                                                                               
 currentJobID NUMBER := null                                                    
)                                                                               
AS                                                                              
                                                                                
    --Audit variables                                                           
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
	pCount		number;                                                                
                                                                                
	mixed_datatypes	exception;                                                     
	no_table_access	exception;                                                     
	                                                                               
                                                                                
  -- JEA@20111104	New                                                           
                                                                                
                                                                                
  root_node 	varchar2(1000);                                                    
  root_level	number;                                                            
  node_name 	varchar(1000);                                                     
                                                                                
BEGIN                                                                           
                                                                                
    stepCt := 0;                                                                
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_load_across_trials'
,0,stepCt,'Done');                                                              
	                                                                               
	--	Get level for \Across Trials\  could be 0 or -1                             
	                                                                               
	select count(*)                                                                
	into root_level                                                                
	from table_access                                                              
	where c_fullname = '\Across Trials\';                                          
	                                                                               
	if root_level = 0 then                                                         
		raise no_table_access;                                                        
	end if;                                                                        
                                                                                
	select c_hlevel                                                                
	into root_level                                                                
	from table_access                                                              
	where c_fullname = '\Across Trials\';                                          
	                                                                               
	--	truncate work table                                                         
	                                                                               
	execute immediate('truncate table tm_wz.wt_xtrial_nodes');                     
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncate tm_wz.wt_xtrial_nodes
',0,stepCt,'Done');                                                             
		                                                                              
	--	Insert folder-level data                                                    
	                                                                               
	insert into wt_xtrial_nodes                                                    
	(xtrial_cd                                                                     
	,trial_name                                                                    
	,leaf_name                                                                     
	,data_type                                                                     
	,concept_cd                                                                    
	,leaf_node                                                                     
	)                                                                              
	select distinct t.xtrial_cd                                                    
		  ,base.c_name as trial_name                                                  
		  ,la.c_name as leaf_name                                                     
		  ,la.c_columndatatype                                                        
		  ,la.c_basecode                                                              
		  ,REGEXP_REPLACE('\Across Trials\' || replace(replace(t.xtrial_category_cd,'+
','\'),'_',' ')  || '\' || t.xtrial_name || '\' ||                              
		   decode(la.c_columndatatype,'T',la.c_name,'') || '\' || base.c_name || '\','
(\\){2,}', '\')                                                                 
	from cz_xtrial_codes t                                                         
		,i2b2 fa                                                                      
		,i2b2 la                                                                      
		,i2b2 base                                                                    
	where t.xtrial_name = fa.c_name                                                
	  and fa.c_fullname not like '%Across Trials%'                                 
	  and fa.c_visualattributes like 'FA%'                                         
	  and la.c_fullname like fa.c_fullname || '%'                                  
	  and la.c_visualattributes like 'LA%'                                         
	  and to_char(fa.c_comment) = to_char(base.c_comment)                          
	  and base.c_hlevel = 1                                                        
	  and not exists                                                               
	      (select 1 from cz_xtrial_exclusion xx                                    
		   where to_char(fa.c_comment) = 'trial:' || trial_id);                       
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert folder data into wt_xtr
ial_nodes',SQL%ROWCOUNT,stepCt,'Done');                                         
	commit;                                                                        
                                                                                
	--	Insert leaf level data, check for dups                                      
	                                                                               
	insert into wt_xtrial_nodes                                                    
	(xtrial_cd                                                                     
	,trial_name                                                                    
	,leaf_name                                                                     
	,data_type                                                                     
	,concept_cd                                                                    
	,leaf_node                                                                     
	)                                                                              
	select distinct t.xtrial_cd                                                    
		  ,base.c_name as trial_name                                                  
		  ,la.c_name as leaf_name                                                     
		  ,la.c_columndatatype                                                        
		  ,la.c_basecode                                                              
		  ,REGEXP_REPLACE('\Across Trials\' || replace(replace(t.xtrial_category_cd,'+
','\'),'_',' ')  || '\' || t.xtrial_name || '\' ||                              
			'\' || base.c_name || '\' ,'(\\){2,}', '\')                                  
	from cz_xtrial_codes t                                                         
		,i2b2 la                                                                      
		,i2b2 base                                                                    
	where t.xtrial_name = la.c_name                                                
	  and la.c_fullname not like '%Across Trials%'                                 
	  and la.c_visualattributes like 'LA%'                                         
	  and to_char(la.c_comment) = to_char(base.c_comment)                          
	  and base.c_hlevel = 1                                                        
	  and not exists                                                               
		 (select 1 from wt_xtrial_nodes x                                             
		  where t.xtrial_cd = x.xtrial_cd                                             
		    and base.c_name = x.trial_name                                            
			and la.c_name = x.leaf_name                                                  
			and la.c_basecode = x.concept_cd)                                            
	  and not exists                                                               
	      (select 1 from cz_xtrial_exclusion xx                                    
		   where to_char(la.c_comment) = 'trial:' || trial_id);                       
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert leaf data into wt_xtria
l_nodes',SQL%ROWCOUNT,stepCt,'Done');                                           
	commit;                                                                        
                                                                                
	--	Determine if any xtrial_cds have more than one datatype (mix of numeric and 
text).  If yes, raise exception                                                 
	                                                                               
	select count(*)                                                                
	into pCount                                                                    
	from (select xtrial_cd                                                         
		  from wt_xtrial_nodes                                                        
		  group by xtrial_cd                                                          
		  having count(distinct data_type) > 1);                                      
		                                                                              
	if pCount > 0 then                                                             
		raise mixed_datatypes;                                                        
	end if;                                                                        
                                                                                
	--	delete Across Trials nodes in i2b2                                          
	--	can't use i2b2_delete_all_nodes because the observation_fact data should not
 be deleted.  It belongs to the trial                                           
	                                                                               
	--concept dimension                                                            
	delete from concept_dimension                                                  
	where concept_path like '\Across Trials\%';                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete Across Trials from I2B2
DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                        
	commit;                                                                        
                                                                                
	--i2b2                                                                         
	delete from i2b2                                                               
	where c_fullname like '\Across Trials\%';                                      
	stepCt := stepCt + 1;                                                          
	  cz_write_audit(jobId,databaseName,procedureName,'Delete Across Trials from I2
B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	--	delete patient SECURITY nodes for Across Trials                             
	                                                                               
	delete from observation_fact                                                   
	where modifier_cd = 'Across Trials'                                            
	  and concept_cd = 'SECURITY';                                                 
	stepct := stepct + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete Across Trials SECURITY 
from I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                
	commit;	                                                                       
	                                                                               
	--	add top-level Across Trial nodes                                            
	                                                                               
	i2b2_add_node('Across Trials','\Across Trials\','Across Trials',jobid);        
	                                                                               
	--	create Across Trials i2b2 nodes                                             
	                                                                               
	insert into i2b2                                                               
    (c_hlevel                                                                   
	,c_fullname                                                                    
	,c_name                                                                        
	,c_visualattributes                                                            
	,c_synonym_cd                                                                  
	,c_facttablecolumn                                                             
	,c_tablename                                                                   
	,c_columnname                                                                  
    ,c_dimcode                                                                  
	,c_tooltip                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,c_basecode                                                                    
	,c_operator                                                                    
	,c_columndatatype                                                              
	,c_metadataxml                                                                 
	,c_comment)                                                                    
    SELECT (length(leaf_node) - nvl(length(replace(leaf_node, '\')),0)) / length
('\') - 2 + root_level                                                          
		  ,leaf_node                                                                  
		  ,trial_name                                                                 
		  ,'LA'		--	set to folder for initial insert, will be changed to LA for leaf n
odes in later update                                                            
		  ,'N'                                                                        
		  ,'CONCEPT_CD'                                                               
		  ,'CONCEPT_DIMENSION'                                                        
		  ,'CONCEPT_PATH'                                                             
		  ,leaf_node                                                                  
		  ,leaf_node                                                                  
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,'Across_Trials'                                                            
		  ,concept_cd                                                                 
		  ,'LIKE'                                                                     
		  ,data_type                                                                  
		  ,case when data_type = 'N'                                                  
		        then '<?xml version="1.0"?><ValueMetadata><Version>3.02</Version><Crea
tionDateTime>08/14/2008 01:22:59</CreationDateTime><TestID></TestID><TestName></
TestName><DataType>PosFloat</DataType><CodeType></CodeType><Loinc></Loinc><Flags
touse></Flagstouse><Oktousevalues>Y</Oktousevalues><MaxStringLength></MaxStringL
ength><LowofLowValue>0</LowofLowValue><HighofLowValue>0</HighofLowValue><LowofHi
ghValue>100</LowofHighValue>100<HighofHighValue>100</HighofHighValue><LowofToxic
Value></LowofToxicValue><HighofToxicValue></HighofToxicValue><EnumValues></EnumV
alues><CommentsDeterminingExclusion><Com></Com></CommentsDeterminingExclusion><U
nitValues><NormalUnits>ratio</NormalUnits><EqualUnits></EqualUnits><ExcludingUni
ts></ExcludingUnits><ConvertingUnits><Units></Units><MultiplyingFactor></Multipl
yingFactor></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New /></
Analysis></ValueMetadata>'                                                      
				else null end                                                               
		  ,'trial:Across_Trials'                                                      
	from wt_xtrial_nodes;                                                          
	                                                                               
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Add leaf nodes for Across Tria
ls to I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                           
                                                                                
	--	Add concept_dimension paths for Across Trials leaf nodes                    
	                                                                               
	insert into concept_dimension                                                  
    (concept_cd                                                                 
	,concept_path                                                                  
	,name_char                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,table_name)                                                                   
    SELECT distinct concept_cd                                                  
		  ,leaf_node                                                                  
		  ,leaf_name                                                                  
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,'Across_Trials'                                                            
		  ,'CONCEPT_DIMENSION'                                                        
    from wt_xtrial_nodes;                                                       
	                                                                               
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Add leaf nodes to I2B2DEMODATA
 concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
	                                                                               
	--	add patient SECURITY data to observation fact                               
	                                                                               
    insert into i2b2demodata.observation_fact                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,provider_id                                                                   
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,valueflag_cd                                                                  
	,location_cd                                                                   
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	)                                                                              
	SELECT distinct pd.patient_num                                                 
		  ,'SECURITY'                                                                 
		  ,'@'                                                                        
		  ,'Across Trials'                                                            
		  ,'T'                                                                        
		  ,'EXP:PUBLIC'                                                               
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,pd.sourcesystem_cd                                                         
	from wt_xtrial_nodes c                                                         
		,observation_fact f                                                           
		,patient_dimension pd                                                         
	WHERE c.concept_cd = f.concept_cd                                              
	  and f.patient_num = pd.patient_num;                                          
	                                                                               
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Add SECURITY records to I2B2DE
MODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                           
	commit;                                                                        
		                                                                              
	--	fill in tree                                                                
	                                                                               
	i2b2_fill_in_tree('Across Trials','\Across Trials\', jobID);                   
                                                                                
	--	create concept counts                                                       
	                                                                               
    i2b2_create_concept_counts('\Across Trials\',jobID );                       
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create concept counts for Clin
ical Data',0,stepCt,'Done');                                                    
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
                                                                                
    i2b2_load_security_data(jobId);                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load security data',0,stepCt,'
Done');                                                                         
		                                                                              
	---Cleanup OVERALL JOB if this proc is being run standalone                    
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	when mixed_datatypes then                                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Check wt_xtrial_nodes for mix
ed data_types',0,stepCt,'Done');                                                
		cz_error_handler (jobID, procedureName);                                      
		cz_end_audit (jobID, 'FAIL');                                                 
	when no_table_access then                                                      
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'No record for \Across Trials\
 in table_access',0,stepCt,'Done');                                             
		cz_error_handler (jobID, procedureName);                                      
		cz_end_audit (jobID, 'FAIL');	                                                
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_HIDE_NODE"                          
(                                                                               
  path VARCHAR2                                                                 
)                                                                               
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- hIDES a tree node in I2b2                                                  
  -- KCR@20090519 - First Rev                                                   
  -- JEA@20120404	Only update second character of c_visualattributes            
  -------------------------------------------------------------                 
  if path != ''  or path != '%'                                                 
  then                                                                          
                                                                                
	update i2b2 b                                                                  
	set c_visualattributes=substr(b.c_visualattributes,1,1) || 'H' || substr(b.c_vi
sualattributes,3,1)                                                             
	where c_fullname like path || '%';                                             
	                                                                               
	delete from concept_counts                                                     
	where concept_path like path || '%';                                           
	                                                                               
	commit;                                                                        
	                                                                               
	                                                                               
/*                                                                              
      --I2B2                                                                    
     UPDATE i2b2                                                                
      SET c_visualattributes = 'FH'                                             
    WHERE c_visualattributes like 'F%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
                                                                                
     UPDATE i2b2                                                                
      SET c_visualattributes = 'LH'                                             
    WHERE c_visualattributes like 'L%'                                          
      AND C_FULLNAME LIKE PATH || '%';                                          
    COMMIT;                                                                     
*/                                                                              
  END IF;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_FILL_IN_TREE"                       
(                                                                               
  trial_id VARCHAR2                                                             
 ,path VARCHAR2                                                                 
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
  TrialID varchar2(100);                                                        
                                                                                
    --Audit variables                                                           
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
  auditText varchar2(4000);                                                     
                                                                                
  ----------------------------------------------                                
  --Goal: To fill out an I2B2 Tree node                                         
  --Steps. Walk backwards through an i2b2 tree and fill in all missing nodes.   
  --\1\2\3\4\5\6\                                                               
  --Will check that \1\, \1\2\, etc..all exist.                                 
  ----------------------------------------------                                
                                                                                
  -- JEA@20100107 - Added auditing                                              
                                                                                
  --Get the nodes                                                               
  CURSOR cNodes is                                                              
    --Trimming off the last node as it would never need to be added.            
    select distinct substr(c_fullname, 1,instr(c_fullname,'\',-2,1)) as c_fullna
me                                                                              
    --select c_fullname                                                         
    from i2b2                                                                   
    where c_fullname like path || '%';                                          
--      and c_hlevel > = 2;                                                     
                                                                                
  root_node varchar2(1000);                                                     
  node_name varchar(1000);                                                      
  v_count NUMBER;                                                               
                                                                                
BEGIN                                                                           
  TrialID := upper(trial_id);                                                   
                                                                                
    stepCt := 0;                                                                
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
  --start node with the first slash                                             
                                                                                
  --Iterate through each node                                                   
  FOR r_cNodes in cNodes Loop                                                   
    root_node := '\';                                                           
    --Determine how many nodes there are                                        
    --Iterate through, Start with 2 as one will be null from the parser         
                                                                                
    for loop_counter in 2 .. (length(r_cNodes.c_fullname) - nvl(length(replace(r
_cNodes.c_fullname, '\')),0)) / length('\')                                     
    LOOP                                                                        
      --Determine Node:                                                         
      node_name := parse_nth_value(r_cNodes.c_fullname, loop_counter, '\');     
      root_node :=  root_node || node_name || '\';                              
                                                                                
      --Dont run for first 2 nodes                                              
    --  if loop_counter > 3 then                                                
        --Check if node exists. If it does not, add it.                         
        select count(*)                                                         
          into v_count                                                          
        from i2b2                                                               
        where c_fullname = root_node;                                           
                                                                                
        --If it doesn't exist, add it                                           
        if v_count = 0 then                                                     
			auditText := 'Inserting ' || root_node;                                      
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,auditText,0,stepCt,'Done');  
            i2b2_add_node(trial_id, root_node, node_name, jobId);               
        end if;                                                                 
    --  end if;                                                                 
                                                                                
    END LOOP;                                                                   
                                                                                
    --RESET VARIABLES                                                           
    root_node := '';                                                            
    node_name := '';                                                            
  END LOOP;                                                                     
                                                                                
      ---Cleanup OVERALL JOB if this proc is being run standalone               
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_DELETE_ALL_NODES"                   
(                                                                               
  path VARCHAR2                                                                 
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
Begin                                                                           
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  -------------------------------------------------------------                 
  -- Delete a tree node in I2b2                                                 
  -- Not handling Observation Fact. It will take too long.                      
  -- KCR@20090404 - First Rev                                                   
  -- JEA@20100106 - Added auditing                                              
  -------------------------------------------------------------                 
  if path != ''  or path != '%'                                                 
  then                                                                          
    --I2B2                                                                      
    DELETE                                                                      
      FROM OBSERVATION_FACT                                                     
    WHERE                                                                       
      concept_cd IN (SELECT C_BASECODE FROM I2B2 WHERE C_FULLNAME LIKE PATH || '
%');                                                                            
	  stepCt := stepCt + 1;                                                        
	  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I
2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                      
    COMMIT;                                                                     
	                                                                               
                                                                                
      --CONCEPT DIMENSION                                                       
    DELETE                                                                      
      FROM CONCEPT_DIMENSION                                                    
    WHERE                                                                       
      CONCEPT_PATH LIKE path || '%';                                            
	  stepCt := stepCt + 1;                                                        
	  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I
2B2DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                     
    COMMIT;                                                                     
                                                                                
      --I2B2                                                                    
      DELETE                                                                    
        FROM i2b2                                                               
      WHERE                                                                     
        C_FULLNAME LIKE PATH || '%';                                            
	  stepCt := stepCt + 1;                                                        
	  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I
2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                                  
    COMMIT;                                                                     
  END IF;                                                                       
                                                                                
  --i2b2_secure                                                                 
      DELETE                                                                    
        FROM i2b2_secure                                                        
      WHERE                                                                     
        C_FULLNAME LIKE PATH || '%';                                            
	  stepCt := stepCt + 1;                                                        
	  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I
2B2METADATA i2b2_secure',SQL%ROWCOUNT,stepCt,'Done');                           
    COMMIT;                                                                     
                                                                                
  --concept_counts                                                              
      DELETE                                                                    
        FROM concept_counts                                                     
      WHERE                                                                     
        concept_path LIKE PATH || '%';                                          
	  stepCt := stepCt + 1;                                                        
	  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I
2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');                        
    COMMIT;                                                                     
                                                                                
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_DELETE_1_NODE"                      
(                                                                               
  path VARCHAR2                                                                 
)                                                                               
AS                                                                              
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- Delete a tree node in I2b2                                                 
  -- Not handling Observation Fact. It will take too long.                      
  -- KCR@20090404 - First Rev                                                   
  -------------------------------------------------------------                 
  if path != ''  or path != '%'                                                 
  then                                                                          
    --I2B2                                                                      
    DELETE                                                                      
      FROM OBSERVATION_FACT                                                     
    WHERE                                                                       
      concept_cd IN (SELECT C_BASECODE FROM I2B2 WHERE C_FULLNAME = PATH);      
    COMMIT;                                                                     
                                                                                
      --CONCEPT DIMENSION                                                       
    DELETE                                                                      
      FROM CONCEPT_DIMENSION                                                    
    WHERE                                                                       
      CONCEPT_PATH = path;                                                      
    COMMIT;                                                                     
                                                                                
      --I2B2                                                                    
      DELETE                                                                    
        FROM i2b2                                                               
      WHERE                                                                     
        C_FULLNAME = PATH;                                                      
    COMMIT;                                                                     
                                                                                
  --i2b2_secure                                                                 
      DELETE                                                                    
        FROM i2b2_secure                                                        
      WHERE                                                                     
        C_FULLNAME = PATH;                                                      
    COMMIT;                                                                     
                                                                                
  --i2b2_secure                                                                 
      DELETE                                                                    
        FROM concept_counts                                                     
      WHERE                                                                     
        concept_path = PATH;                                                    
    COMMIT;                                                                     
                                                                                
  END IF;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CREATE_SECURITY_FOR_TRIAL"          
(                                                                               
  trial_id VARCHAR2                                                             
 ,secured_study varchar2 := 'N'                                                 
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
/*************************************************************************      
* Copyright 2008-2012 Janssen Research and Development, LLC.                    
*                                                                               
* Licensed under the Apache License, Version 2.0 (the "License");               
* you may not use this file except in compliance with the License.              
* You may obtain a copy of the License at                                       
*                                                                               
* http://www.apache.org/licenses/LICENSE-2.0                                    
*                                                                               
* Unless required by applicable law or agreed to in writing, software           
* distributed under the License is distributed on an "AS IS" BASIS,             
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
* See the License for the specific language governing permissions and           
* limitations under the License.                                                
******************************************************************/             
                                                                                
	TrialID 			varchar2(100);                                                      
	securedStudy 		varchar2(5);                                                    
	pExists				int;                                                                
	v_bio_experiment_id	number(18,0);                                              
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
BEGIN                                                                           
	TrialID := trial_id;                                                           
	securedStudy := secured_study;                                                 
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := 0;                                                                   
                                                                                
	delete from i2b2demodata.observation_fact                                      
	where case when modifier_cd = '@'                                              
			   then sourcesystem_cd                                                      
			   else modifier_cd end = TrialId                                            
	  and concept_cd = 'SECURITY';                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete security records for tr
ial from I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');            
	                                                                               
	commit;                                                                        
                                                                                
	insert into i2b2demodata.observation_fact                                      
    (patient_num                                                                
	,concept_cd                                                                    
	,provider_id                                                                   
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,valueflag_cd                                                                  
	,location_cd                                                                   
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,instance_num                                                                  
	)                                                                              
	select distinct patient_num                                                    
		  ,'SECURITY'                                                                 
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'T'                                                                        
		  ,decode(securedStudy,'N','EXP:PUBLIC','EXP:' || trialID)                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,sysdate                                                                    
		  ,TrialId                                                                    
		  ,1                                                                          
	from patient_dimension                                                         
	where sourcesystem_cd like TrialID || ':%';                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert security records for tr
ial from I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');            
	                                                                               
	commit;                                                                        
	                                                                               
	--	insert patients to patient_trial table                                      
	                                                                               
	delete from patient_trial                                                      
	where trial  = TrialID;                                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I2B
2DEMODATA patient_trial',SQL%ROWCOUNT,stepCt,'Done');                           
	                                                                               
	commit;                                                                        
                                                                                
	insert into i2b2demodata.patient_trial                                         
	(patient_num                                                                   
	,trial                                                                         
	,secure_obj_token                                                              
	)                                                                              
	select patient_num,                                                            
		   TrialID,                                                                   
		   decode(securedStudy,'Y','EXP:' || TrialID,'EXP:PUBLIC')                    
	from patient_dimension                                                         
	where sourcesystem_cd like TrialID || ':%';                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial into I2B
2DEMODATA patient_trial',SQL%ROWCOUNT,stepCt,'Done');                           
	commit;                                                                        
	                                                                               
	--	if secure study, then create bio_experiment record if needed and insert to s
earch_secured_object                                                            
	                                                                               
	select count(*) into pExists                                                   
	from searchapp.search_secure_object sso                                        
	where bio_data_unique_id = 'EXP:' || TrialId;                                  
	                                                                               
	if pExists = 0 then                                                            
		--	if securedStudy = Y, add trial to searchapp.search_secured_object          
		if securedStudy = 'Y' then                                                    
			select count(*) into pExists                                                 
			from biomart.bio_experiment                                                  
			where accession = TrialId;                                                   
			                                                                             
			if pExists = 0 then                                                          
				insert into biomart.bio_experiment                                          
				(title, accession, etl_id)                                                  
				select 'Metadata not available'                                             
					  ,TrialId                                                                 
					  ,'METADATA:' || TrialId                                                  
				from dual;                                                                  
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Insert trial/study into bio
mart.bio_experiment',SQL%ROWCOUNT,stepCt,'Done');                               
				commit;                                                                     
			end if;                                                                      
			                                                                             
			select bio_experiment_id into v_bio_experiment_id                            
			from biomart.bio_experiment                                                  
			where accession = TrialId;                                                   
			                                                                             
			insert into searchapp.search_secure_object                                   
			(bio_data_id                                                                 
			,display_name                                                                
			,data_type                                                                   
			,bio_data_unique_id                                                          
			)                                                                            
			select v_bio_experiment_id                                                   
				  ,parse_nth_value(md.c_fullname,2,'\') || ' - ' || md.c_name as display_nam
e                                                                               
				  ,'BIO_CLINICAL_TRIAL' as data_type                                        
				  ,'EXP:' || TrialId as bio_data_unique_id                                  
			from i2b2metadata.i2b2 md                                                    
			where md.sourcesystem_cd = TrialId                                           
			  and md.c_hlevel =                                                          
				 (select min(x.c_hlevel) from i2b2metadata.i2b2 x                           
				  where x.sourcesystem_cd = TrialId)                                        
			  and not exists                                                             
				 (select 1 from searchapp.search_secure_object so                           
				  where v_bio_experiment_id = so.bio_data_id);                              
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Inserted trial/study into SE
ARCHAPP search_secure_object',SQL%ROWCOUNT,stepCt,'Done');                      
			commit;                                                                      
		end if;                                                                       
	else                                                                           
		--	if securedStudy = N, delete entry from searchapp.search_secure_object      
		if securedStudy = 'N' then                                                    
			delete from searchapp.search_secure_object                                   
			where bio_data_unique_id = 'EXP:' || TrialId;                                
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Deleted trial/study from SEA
RCHAPP search_secure_object',SQL%ROWCOUNT,stepCt,'Done');                       
			commit;                                                                      
		end if;		                                                                     
	end if;                                                                        
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CREATE_PATIENT_TRIAL"               
(                                                                               
  TrialID 		IN	VARCHAR2                                                         
 ,study_type 	IN	VARCHAR2 := NULL                                               
 ,currentJobID 	IN	NUMBER := null                                               
 ,rtnCode		OUT	int                                                              
)                                                                               
AS                                                                              
		                                                                              
  -------------------------------------------------------------                 
  -- Insert records into the Patient Trial table for new Trials                 
  -- KCR@20090518 - First Rev                                                   
  -- JEA@20091013 - Added new column secure_obj_token and logic for Public Study
                                                                                
  -- JEA@20091118 - Added auditing                                              
  -- JEA@20100112 - Set secure_obj_token to EXP:PUBLIC for \Internal Studies\ an
d \Experimental Medicine Study\Normals\                                         
  -- JEA@20100505 - Added return code                                           
  -------------------------------------------------------------                 
                                                                                
	StudyType varchar2(100);                                                       
	                                                                               
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
    StudyType := study_type;                                                    
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
  	                                                                             
	if StudyType is null then                                                      
		StudyType := 'Secured';                                                       
	end if;                                                                        
                                                                                
                                                                                
  --Remove existing records                                                     
  delete                                                                        
    from patient_trial                                                          
  where                                                                         
     trial  = TrialID;                                                          
  stepCt := stepCt + 1;                                                         
  cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I2
B2DEMODATA patient_trial',SQL%ROWCOUNT,stepCt,'Done');                          
	                                                                               
  commit;                                                                       
                                                                                
  insert into i2b2demodata.patient_trial                                        
  (patient_num                                                                  
  ,trial                                                                        
  ,secure_obj_token                                                             
  )                                                                             
  select                                                                        
    patient_num,                                                                
    TrialID,                                                                    
	decode(studyType,'Public Studies','EXP:PUBLIC'                                 
	                ,'Internal Studies','EXP:PUBLIC'                               
					,'Experimental Medicine Study',decode(TrialId,'NORMALS','EXP:PUBLIC','EXP:'
 || TrialID)                                                                    
					,'EXP:' || TrialID)                                                        
  from                                                                          
    patient_dimension                                                           
  where                                                                         
    sourcesystem_cd like TrialID || '%';                                        
  stepCt := stepCt + 1;                                                         
 cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial into I2B
2DEMODATA patient_trial',SQL%ROWCOUNT,stepCt,'Done');                           
	                                                                               
  commit;                                                                       
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  rtnCode := 0;                                                                 
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	rtnCode := 16;                                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CREATE_PATIENT_DIM"                 
(                                                                               
  trial_id VARCHAR2                                                             
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
  TrialID varchar2(100);                                                        
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
  -------------------------------------------------------------                 
  -- Load the Patient Dimension Table                                           
  -- KCR@20090404 - First Rev                                                   
  -- JEA@20091117 - Added auditing                                              
  -------------------------------------------------------------                 
  TrialID := upper(trial_id);                                                   
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
  stepCt := 0;                                                                  
                                                                                
  --delete existing data if it exists                                           
  DELETE                                                                        
    FROM PATIENT_DIMENSION                                                      
  WHERE                                                                         
    sourcesystem_cd like TrialID || '%';                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete existing data for trial
 in I2B2DEMODATA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                
  commit;                                                                       
  --insert patient data                                                         
  INSERT                                                                        
    INTO PATIENT_DIMENSION                                                      
    (                                                                           
      PATIENT_NUM,                                                              
      SEX_CD,                                                                   
      AGE_IN_YEARS_NUM,                                                         
      RACE_CD,                                                                  
      UPDATE_DATE,                                                              
      DOWNLOAD_DATE,                                                            
      IMPORT_DATE,                                                              
      SOURCESYSTEM_CD                                                           
    )                                                                           
    SELECT                                                                      
      SEQ_PATIENT_NUM.nextval,                                                  
      CASE                                                                      
        WHEN UPPER(SEX_CD) = 'MALE' THEN 'M'                                    
        WHEN UPPER(SEX_CD) = 'FEMALE' THEN 'F'                                  
        WHEN UPPER(SEX_CD) = 'UNKNOWN' THEN 'U'                                 
        ELSE sex_cd                                                             
      END,                                                                      
      AGE_IN_YEARS_NUM,                                                         
      RACE_CD,                                                                  
      SYSDATE,                                                                  
      SYSDATE,                                                                  
      SYSDATE,                                                                  
      USUBJID                                                                   
    FROM                                                                        
      PATIENT_INFO                                                              
      where UPPER(study_id) = TrialID;                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data for trial in I2B2D
EMODATA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                         
  COMMIT;                                                                       
                                                                                
/*                                                                              
  --Update temp table for UI                                                    
  DELETE                                                                        
    FROM PATIENT_TRIAL                                                          
    WHERE trial = TrialID;                                                      
  COMMIT;                                                                       
                                                                                
                                                                                
  INSERT INTO PATIENT_TRIAL (                                                   
    PATIENT_NUM,                                                                
    TRIAL)                                                                      
  select                                                                        
    patient_num,                                                                
    TrialID                                                                     
  from                                                                          
    patient_dimension                                                           
  where                                                                         
    sourcesystem_cd like TrialID || '%';                                        
  COMMIT;                                                                       
*/                                                                              
                                                                                
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CREATE_EXTERNAL_TABLES"             
(                                                                               
  TPMExtFn VARCHAR2,                                                            
  CATGExtFn VARCHAR2                                                            
)                                                                               
AS                                                                              
                                                                                
sqltxt varchar2(5000);                                                          
                                                                                
BEGIN                                                                           
                                                                                
--  recreate CATEGORY_EXTRNL tabls with CATGExtFN parameter (filename in externa
l file system)                                                                  
                                                                                
sqltxt:='drop table i2b2_lz.category_extrnl';                                   
                                                                                
  execute immediate sqltxt;                                                     
                                                                                
sqltxt:='CREATE TABLE "I2B2_LZ"."CATEGORY_EXTRNL"                               
   ( "STUDY_ID" VARCHAR2(100 BYTE),                                             
	"CATEGORY_CD" VARCHAR2(100 BYTE),                                              
	"CATEGORY_PATH" VARCHAR2(250 BYTE)                                             
   )                                                                            
   ORGANIZATION EXTERNAL                                                        
    ( TYPE ORACLE_LOADER                                                        
      DEFAULT DIRECTORY "BIOMART_LZ"                                            
      ACCESS PARAMETERS                                                         
      ( records delimited by newline nologfile skip 1                           
        fields terminated by 0X"09"                                             
        MISSING FIELD VALUES ARE NULL                                           
            )                                                                   
      LOCATION                                                                  
       ( ' || '''' || CATGExtFn || '''' || '))';                                
                                                                                
   execute immediate sqltxt;                                                    
                                                                                
--  recreate TIME_POINT_MEASUREMENT_EXTRNL tabls with TPMExtFN parameter (filena
me in external file system)                                                     
                                                                                
sqltxt:='drop table i2b2_lz.time_point_measurement_extrnl';                     
                                                                                
  execute immediate sqltxt;                                                     
                                                                                
sqltxt:='    CREATE TABLE "I2B2_LZ"."TIME_POINT_MEASUREMENT_EXTRNL"             
   ("STUDY_ID" VARCHAR2(25 BYTE),                                               
	"USUBJID" VARCHAR2(50 BYTE),                                                   
	"SITE_ID" VARCHAR2(10 BYTE),                                                   
	"SUBJECT_ID" VARCHAR2(10 BYTE),                                                
	"VISIT_NAME" VARCHAR2(100 BYTE),                                               
	"DATASET_NAME" VARCHAR2(500 BYTE),                                             
	"SAMPLE_TYPE" VARCHAR2(100 BYTE),                                              
	"DATA_LABEL" VARCHAR2(500 BYTE),                                               
	"DATA_VALUE" VARCHAR2(500 BYTE),                                               
	"CATEGORY_CD" VARCHAR2(100 BYTE),                                              
	"PERIOD" VARCHAR2(100 BYTE)                                                    
   )                                                                            
   ORGANIZATION EXTERNAL                                                        
    ( TYPE ORACLE_LOADER                                                        
      DEFAULT DIRECTORY "BIOMART_LZ"                                            
      ACCESS PARAMETERS                                                         
      ( records delimited by newline nologfile skip 1                           
        fields terminated by 0X"09"                                             
        MISSING FIELD VALUES ARE NULL                                           
            )                                                                   
      LOCATION ( ' || '''' || TPMExtFn || '''' ||  ') )';                       
                                                                                
    execute immediate sqltxt;                                                   
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CREATE_CONCEPT_COUNTS"              
(                                                                               
  path VARCHAR2                                                                 
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
  -------------------------------------------------------------                 
  -- Insert records into the Concept Counts table for new nodes                 
  -- KCR@20090404 - First Rev                                                   
  -- KCR@20090709 - NEXT Rev                                                    
  -- JEA@20090817 - Changed processing to eliminate need for cursor             
  -- JEA@20091118 - Added auditing                                              
  -- JEA@20100507 - Changed to account for Biomarker mRNA nodes that may have di
fferent patient counts from                                                     
  --				the Samples & Timepoints concept                                        
  -- JEA220100702 - Remove separate pass for Biomarker mRNA nodes, they now have
 unique concept codes                                                           
  -- JEA@20111025	Exclude samples from being counted as subjects                
  -- JEA@20120113	Allow for third character in c_visualattributes               
                                                                                
  --1. BUILD A TEMP TABLE OF ALL CONCEPT CODES WITH THEIR PATIENTS.             
  -- NEED TO INCLUDE ROLLUPS OF INDIRECT RELATIONSHIPS (FOLDERS TO THEIR CHILDRE
N)                                                                              
  --Build a cursor of Paths by level                                            
  --iterate through the paths in reverse, so determine max level and go backward
s,                                                                              
  --this way each folder will have the data needed when you get to it already ro
lled up                                                                         
                                                                                
  -------------------------------------------------------------                 
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
    	                                                                           
  stepCt := 0;                                                                  
                                                                                
  delete                                                                        
    from concept_counts                                                         
  where                                                                         
    concept_path like path || '%';                                              
  stepCt := stepCt + 1;                                                         
  cz_write_audit(jobId,databaseName,procedureName,'Delete counts for trial from 
I2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');                       
	                                                                               
  commit;                                                                       
                                                                                
/*	Removed because mRNA nodes have unique concept_cds (20100702)                
                                                                                
	execute immediate('truncate table tmp_concept_counts');                        
	                                                                               
	--	insert data for leaf nodes, do Biomarker mRNA nodes first so that the correc
t patients are joined to de_subject_sample_mapping                              
	--	this is done because mRNA nodes can share concept_cds with Samples & Timepoi
nts nodes                                                                       
	                                                                               
	insert into tmp_concept_counts                                                 
	(leaf_path                                                                     
	,patient_num                                                                   
	)                                                                              
	select distinct la.c_fullname                                                  
		  ,tpm.patient_num                                                            
	from i2b2 la                                                                   
		,observation_fact tpm                                                         
		,deapp.de_subject_sample_mapping sm                                           
		,reference.gpl_info gi                                                        
	where la.c_fullname like path || '%'                                           
	  and la.c_visualattributes like 'L%'                                          
	  and la.c_basecode = tpm.concept_cd(+)                                        
	  and tpm.patient_num = sm.patient_id                                          
	  and tpm.modifier_cd = sm.trial_name                                          
	  and sm.platform = 'MRNA_AFFYMETRIX'                                          
	  and sm.gpl_id = gi.platform                                                  
	  and la.c_fullname like path || '%' || gi.title || '%';                       
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert mRNA leaf counts for tr
ial into I2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');              
	commit;	                                                                       
	                                                                               
	--	insert data for remaining leaf nodes and exclude Biomarker mRNA leaf nodes  
	                                                                               
	insert into tmp_concept_counts                                                 
	(leaf_path                                                                     
	,patient_num                                                                   
	)                                                                              
	select distinct la.c_fullname                                                  
		  ,tpm.patient_num                                                            
	from i2b2 la                                                                   
		,observation_fact tpm                                                         
	where la.c_fullname like path || '%'                                           
	  and la.c_visualattributes like 'L%'                                          
	  and la.c_basecode = tpm.concept_cd(+)                                        
	  and not exists                                                               
	     (select 1 from tmp_concept_counts cx                                      
		  where la.c_fullname = cx.leaf_path);                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert all remaining leaf coun
ts for trial into I2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');     
	commit;	                                                                       
*/                                                                              
	                                                                               
	--	Join each node (folder or leaf) in the path to it's leaf in the work table t
o count patient numbers                                                         
                                                                                
	insert into concept_counts                                                     
	(concept_path                                                                  
	,parent_concept_path                                                           
	,patient_count                                                                 
	)                                                                              
	select fa.c_fullname                                                           
		  ,ltrim(SUBSTR(fa.c_fullname, 1,instr(fa.c_fullname, '\',-1,2)))             
		  ,count(distinct tpm.patient_num)                                            
	from i2b2 fa                                                                   
	    ,i2b2 la                                                                   
		,observation_fact tpm                                                         
		,patient_dimension p                                                          
	where fa.c_fullname like path || '%'                                           
	  and substr(fa.c_visualattributes,2,1) != 'H'                                 
	  and la.c_fullname like fa.c_fullname || '%'                                  
	  and la.c_visualattributes like 'L%'                                          
	  and tpm.patient_num = p.patient_num                                          
	  and p.sourcesystem_cd not like '%:S:%'                                       
	  and la.c_basecode = tpm.concept_cd(+)                                        
	group by fa.c_fullname                                                         
			,ltrim(SUBSTR(fa.c_fullname, 1,instr(fa.c_fullname, '\',-1,2)));             
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert counts for trial into I
2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');                        
		                                                                              
	commit;                                                                        
                                                                                
	--execute immediate('truncate table tmp_concept_counts');                      
	                                                                               
	--SET ANY NODE WITH MISSING OR ZERO COUNTS TO HIDDEN                           
                                                                                
	update i2b2                                                                    
	set c_visualattributes = substr(c_visualattributes,1,1) || 'H' || substr(c_visu
alattributes,3,1)                                                               
	where c_fullname like path || '%'                                              
	  and (not exists                                                              
			 (select 1 from concept_counts nc                                            
				  where c_fullname = nc.concept_path)                                       
				 or                                                                         
			 exists                                                                      
				 (select 1 from concept_counts zc                                           
				  where c_fullname = zc.concept_path                                        
					and zc.patient_count = 0)                                                  
			  )                                                                          
		and c_name != 'SECURITY';                                                     
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Nodes hidden with missing/zero
 counts for trial into I2B2DEMODATA concept_counts',SQL%ROWCOUNT,stepCt,'Done');
                                                                                
		                                                                              
	  commit;                                                                      
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
	                                                                               
END;                                                                            
                                                                                
/*	needed for i2b2 1.4                                                          
                                                                                
update i2b2 i                                                                   
set c_totalnum=(select count(distinct tpm.patient_num)                          
				 from i2b2 la                                                               
				     ,observation_fact tpm                                                  
				 where la.c_fullname like i.c_fullname || '%'                               
                   and la.c_visualattributes like 'L%'                          
                   and la.c_basecode = tpm.concept_cd(+)                        
				)                                                                           
where exists                                                                    
     (select 1 from i2b2 lax                                                    
				   ,observation_fact tpmx                                                   
	  where lax.c_fullname like i.c_fullname || '%'                                
        and lax.c_visualattributes like 'L%'                                    
        and lax.c_basecode = tpmx.concept_cd(+)                                 
       )                                                                        
and i.c_visualattributes not like '%H%'                                         
and i.c_fullname like '%BEERLUNG%'                                              
                                                                                
*/                                                                              
                                                                                
/* old CODE                                                                     
                                                                                
--	Cursor                                                                       
                                                                                
  maxLevel NUMBER := 0;                                                         
  currentLevel number := 0;                                                     
                                                                                
  CURSOR cPath is                                                               
  select a.concept_cd, a.concept_path                                           
    FROM concept_dimension a                                                    
    join i2b2 b                                                                 
      on a.concept_path = b.c_fullname                                          
    where b.c_hlevel = currentLevel                                             
      and b.c_visualattributes not like '%H%' --do not consider Hidden values   
      and b.c_fullname like path || '%';                                        
                                                                                
  insert                                                                        
    into concept_counts(                                                        
      patient_count,                                                            
      concept_path)                                                             
  select                                                                        
    count(distinct c.patient_num) patient_count,                                
    e.c_fullname as concept_path                                                
  from                                                                          
    i2b2 e                                                                      
  join                                                                          
    concept_dimension d                                                         
  on                                                                            
    d.concept_path like e.c_fullname ||'%'                                      
  left outer join                                                               
    observation_fact c                                                          
  on                                                                            
    d.concept_cd = c.concept_cd                                                 
  where                                                                         
    e.c_fullname like path || '%'                                               
  group by (e.c_fullname);                                                      
  commit;                                                                       
                                                                                
  --determine the parent_path                                                   
  update concept_counts                                                         
  set parent_concept_path = ltrim(SUBSTR(concept_path, 1,instr(Concept_Path, '\'
,-1,2)))                                                                        
  where concept_path like path || '%';                                          
  commit;                                                                       
                                                                                
    update i2b2                                                                 
    set c_visualattributes = 'FH'                                               
  where c_fullname like path || '%'                                             
    and c_visualattributes like 'F%'                                            
    and c_fullname in (select concept_path from concept_counts where patient_cou
nt = 0 and concept_path like path || '%')                                       
    and c_name != 'SECURITY';                                                   
  commit;                                                                       
                                                                                
                                                                                
    update i2b2                                                                 
    set c_visualattributes = 'LH'                                               
  where c_fullname like path || '%'                                             
    and c_visualattributes like 'L%'                                            
    and c_fullname in (select concept_path from concept_counts where patient_cou
nt = 0 and concept_path like path || '%')                                       
    and c_name != 'SECURITY';                                                   
                                                                                
*/                                                                              
                                                                                
/*	The following code was never implemented in production                       
                                                                                
  --Truncate temp table                                                         
  EXECUTE IMMEDIATE('TRUNCATE TABLE I2B2_PATIENT_ROLLUP');                      
                                                                                
  --REMOVE RECORDS FROM CONCEPT COUNTS FOR THIS PATH                            
                                                                                
  --get max level                                                               
  SELECT max(c_hlevel) into maxLevel                                            
    FROM i2b2                                                                   
      WHERE c_visualattributes not like '%H%' --do not consider Hidden values   
      and c_fullname like path || '%';                                          
                                                                                
  --iterate through all paths by level in reverse                               
  FOR Lpath IN REVERSE 0..maxLevel                                              
  LOOP                                                                          
    --inner loop through cursor for the particular level                        
    currentLevel := Lpath;                                                      
    FOR r_cPath in cPath Loop                                                   
      insert into i2b2_patient_rollup                                           
        SELECT distinct r_cPath.concept_cd, r_cPath.concept_path, b.patient_num,
 currentLevel                                                                   
          from concept_dimension a                                              
          join observation_fact b                                               
            on a.concept_cd = b.concept_cd                                      
            and a.concept_cd = r_cPath.concept_cd                               
        union                                                                   
        select distinct r_cPath.concept_cd, r_cPath.concept_path, a.patient_num,
 currentLevel                                                                   
          from i2b2_patient_rollup a                                            
            where a.concept_path like r_cPath.concept_path || '%'               
              and a.c_hlevel = (currentLevel + 1);                              
    COMMIT;                                                                     
    END LOOP;                                                                   
  END LOOP;                                                                     
                                                                                
  --aggregate the temp table and load into concept_counts                       
  INSERT                                                                        
  INTO CONCEPT_COUNTS                                                           
  (                                                                             
    CONCEPT_PATH,                                                               
    PATIENT_COUNT                                                               
  )                                                                             
  SELECT CONCEPT_PATH, COUNT(DISTINCT PATIENT_NUM)                              
  FROM i2b2_patient_rollup                                                      
  GROUP BY CONCEPT_PATH;                                                        
  COMMIT;                                                                       
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_COPY_TO_RELEASE"                    
(                                                                               
  trial_id IN VARCHAR2                                                          
 ,ont_Path IN VARCHAR2	--	Use this parameter if TrialID is not contained in the 
i2b2/concept_dimension paths.  This will specify the string to use in filters   
 ,currentJobID NUMBER := null                                                   
 )                                                                              
AS                                                                              
                                                                                
	TrialId varchar2(200);                                                         
	ontPath varchar2(200);                                                         
	msgText	varchar2(2000);                                                        
                                                                                
	sql_txt varchar2(2000);                                                        
	tExists number;                                                                
  vSNP number;                                                                  
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
                                                                                
                                                                                
	--	JEA@20100624	Removed gene_symbol, renamed probeset to probeset_id in de_subj
ect_mrna_data_release                                                           
	--					added de_mrna_annotation_release                                        
	--	JEA@20100903	Added haploview_data_release                                   
	--	JEA@2010099		Added trial/path logging to audit log                          
	--	JEA@20101013	Added de_gpl_info_release table                                
	--	JEA@20110125	Added deapp SNP tables                                         
	                                                                               
BEGIN                                                                           
                                                                                
	TrialID := upper(trial_id);                                                    
	ontPath := ont_path;                                                           
	                                                                               
	stepCt := 0;                                                                   
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_promote_to_stg',
0,stepCt,'Done');                                                               
	                                                                               
	stepCt := stepCt + 1;                                                          
	msgText := 'Extracting trial: ' || TrialId || ' path: ' || ontPath;            
	cz_write_audit(jobId,databaseName,procedureName, msgText,0,stepCt,'Done');     
                                                                                
	if TrialId = null then                                                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'TrialID missing',0,stepCt,'Do
ne');                                                                           
		Return;                                                                       
	end if;                                                                        
                                                                                
	if ontPath = null or ontPath = '' or ontPath = '%'then                         
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'ontPath invalid',0,stepCt,'Do
ne');                                                                           
		Return;                                                                       
	End if;                                                                        
                                                                                
	--	Delete existing data for trial                                              
	                                                                               
	delete i2b2_release                                                            
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  i2b2_relea
se',SQL%ROWCOUNT,stepCt,'Done');                                                
	commit;                                                                        
                                                                                
	delete observation_fact_release                                                
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  observatio
n_fact_release',SQL%ROWCOUNT,stepCt,'Done');                                    
	commit;                                                                        
                                                                                
	delete patient_dimension_release                                               
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  patient_di
mension_release',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	delete concept_dimension_release                                               
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  concept_di
mension_release',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	delete de_subj_sample_map_release                                              
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_subj_sa
mple_map_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
                                                                                
	delete de_subject_mrna_data_release                                            
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_subject
_mrna_data_release',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
                                                                                
	delete de_subject_rbm_data_release                                             
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_subject
_rbm_data_release',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
                                                                                
	delete de_subj_protein_data_release                                            
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_subj_pr
otein_data_release',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;                                                                        
                                                                                
	delete haploview_data_release                                                  
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  haploview_
data_release',SQL%ROWCOUNT,stepCt,'Done');                                      
	commit;                                                                        
                                                                                
	delete i2b2_tags_release                                                       
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  i2b2_tags_
release',SQL%ROWCOUNT,stepCt,'Done');                                           
	commit;                                                                        
                                                                                
	delete bio_experiment_release                                                  
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  bio_experi
ment_release',SQL%ROWCOUNT,stepCt,'Done');                                      
	commit;                                                                        
                                                                                
	delete bio_clinical_trial_release                                              
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  bio_clinic
al_trial_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;	                                                                       
                                                                                
	delete bio_data_uid_release                                                    
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  bio_data_u
id_release',SQL%ROWCOUNT,stepCt,'Done');                                        
	commit;	                                                                       
                                                                                
	delete bio_data_compound_release                                               
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  bio_data_c
ompound_release',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;	                                                                       
                                                                                
	delete search_secure_object_release                                            
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  search_sec
ure_object_release',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;	                                                                       
	                                                                               
	--delete de_subject_snp_dataset_release                                        
	--where release_study = TrialID;                                               
	--stepCt := stepCt + 1;                                                        
	--cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_subje
ct_snp_dataset_release',SQL%ROWCOUNT,stepCt,'Done');                            
	--commit;	                                                                     
	                                                                               
	delete de_snp_data_by_patient_release                                          
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_snp_dat
a_by_patient_release',SQL%ROWCOUNT,stepCt,'Done');                              
	commit;	                                                                       
		                                                                              
	delete de_snp_data_ds_loc_release                                              
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_snp_dat
a_ds_loc_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;	                                                                       
	                                                                               
	delete de_snp_data_by_probe_release                                            
	where release_study = TrialID;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from  de_snp_dat
a_by_probe_release',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;	                                                                       
                                                                                
	delete sample_categories_release                                               
	where release_study = TrialId;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted trial from sample_cate
gories_release',SQL%ROWCOUNT,stepCt,'Done');                                    
	                                                                               
	execute immediate('truncate table de_mrna_annotation_release');                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncated table  de_mrna_annot
ation_release',SQL%ROWCOUNT,stepCt,'Done');                                     
	                                                                               
	execute immediate('truncate table de_gpl_info_release');                       
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncated table  de_gpl_info_r
elease',SQL%ROWCOUNT,stepCt,'Done');                                            
                                                                                
		                                                                              
	--	insert i2b2 records into release table                                      
                                                                                
	insert into i2b2_release                                                       
	select mf.*, TrialId as release_study                                          
	from i2b2 mf                                                                   
	where mf.c_fullname like '%' || ontPath || '%'                                 
    and mf.c_fullname not like '%Across Trials%';                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  i2b2_rele
ase',SQL%ROWCOUNT,stepCt,'Done');                                               
	commit;                                                                        
	                                                                               
	insert into observation_fact_release                                           
	select mf.*, mf.modifier_cd as release_study                                   
	from observation_fact mf                                                       
	where mf.modifier_cd = TrialId;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  observati
on_fact_release',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
	                                                                               
	insert into patient_dimension_release                                          
	select mf.*, TrialId as release_study                                          
	from patient_dimension mf                                                      
	where mf.sourcesystem_cd like TrialId || '%';                                  
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  patient_d
imension_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
	                                                                               
	insert into concept_dimension_release                                          
	select mf.*, mf.sourcesystem_cd as release_study                               
	from concept_dimension mf                                                      
	where mf.sourcesystem_cd = TrialId;                                            
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  concept_d
imension_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;	                                                                       
	                                                                               
	insert into de_subj_sample_map_release                                         
	select mf.*, mf.trial_name as release_study                                    
	from deapp.de_subject_sample_mapping mf                                        
	where mf.trial_name = TrialId;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_subj_s
ample_map_release',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;	                                                                       
                                                                                
	insert into de_subject_mrna_data_release                                       
	select mf.*, mf.trial_name as release_study                                    
	from deapp.de_subject_microarray_data mf                                       
	where mf.trial_name = TrialId;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_subjec
t_mrna_data_release',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
                                                                                
                                                                                
                                                                                
/*                                                                              
	insert into de_subject_rbm_data_release                                        
	select mf.*, mf.trial_name as release_study                                    
	from deapp.de_subject_rbm_data mf                                              
	where mf.trial_name = TrialId;                                                 
	*/                                                                             
                                                                                
  insert into de_subject_rbm_data_release                                       
        (ANTIGEN_NAME, ASSAY_ID, CONCEPT_CD, DATA_UID, GENE_ID, GENE_SYMBOL, LOG
_INTENSITY, MEAN_INTENSITY, MEDIAN_INTENSITY, N_VALUE, NORMALIZED_VALUE, PATIENT
_ID, RBM_PANEL, STDDEV_INTENSITY, TIMEPOINT, TRIAL_NAME, VALUE, ZSCORE, release_
study)                                                                          
	select ANTIGEN_NAME, ASSAY_ID, CONCEPT_CD, DATA_UID, GENE_ID, GENE_SYMBOL, LOG_
INTENSITY, MEAN_INTENSITY, MEDIAN_INTENSITY, N_VALUE, NORMALIZED_VALUE, PATIENT_
ID, RBM_PANEL, STDDEV_INTENSITY, TIMEPOINT, TRIAL_NAME, VALUE, ZSCORE, TrialId  
	from deapp.de_subject_rbm_data mf                                              
	where mf.trial_name = TrialId;                                                 
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_subjec
t_rbm_data_release',SQL%ROWCOUNT,stepCt,'Done');                                
	commit;	                                                                       
	                                                                               
	insert into de_subj_protein_data_release                                       
	select mf.*, mf.trial_name as release_study                                    
	from deapp.de_subject_protein_data mf                                          
	where mf.trial_name = TrialId;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_subj_p
rotein_data_release',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;	                                                                       
	                                                                               
	insert into haploview_data_release                                             
	select mf.*, mf.trial_name as release_study                                    
	from deapp.haploview_data mf                                                   
	where mf.trial_name = TrialId;                                                 
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  haploview
_data_release',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;	                                                                       
		                                                                              
	insert into i2b2_tags_release                                                  
	select mf.*, TrialId as release_study                                          
	from i2b2_tags mf                                                              
	where mf.path like '%' || ontPath || '%';                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  i2b2_tags
_release',SQL%ROWCOUNT,stepCt,'Done');                                          
	commit;                                                                        
	                                                                               
	insert into bio_experiment_release                                             
	select mf.*, mf.accession as release_study                                     
	from biomart.bio_experiment mf                                                 
	where mf.accession = TrialId;                                                  
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  bio_exper
iment_release',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;                                                                        
                                                                                
	insert into bio_clinical_trial_release                                         
	select mf.*, TrialId as release_study                                          
	from biomart.bio_clinical_trial mf                                             
	where mf.trial_number = TrialId;                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  bio_clini
cal_trial_release',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
                                                                                
	insert into bio_data_uid_release                                               
	select mf.*, TrialId as release_study                                          
	from biomart.bio_data_uid mf                                                   
	    ,biomart.bio_experiment mx                                                 
	where mx.accession = Trialid                                                   
	  and mx.bio_experiment_id = mf.bio_data_id;                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  bio_data_
uid_release',SQL%ROWCOUNT,stepCt,'Done');                                       
	commit;                                                                        
                                                                                
	insert into bio_data_compound_release                                          
	select mf.*, TrialId as release_study                                          
	from biomart.bio_data_compound mf                                              
	    ,biomart.bio_experiment mx                                                 
	where mx.accession = Trialid                                                   
	  and mx.bio_experiment_id = mf.bio_data_id;                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  bio_data_
compound_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
	                                                                               
	insert into search_secure_object_release                                       
	select mf.*, TrialId as release_study                                          
	from searchapp.search_secure_object mf                                         
	    ,biomart.bio_experiment mx                                                 
	where mx.accession = Trialid                                                   
	  and mx.bio_experiment_id = mf.bio_data_id;                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  search_se
cure_object_release',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	                                                                               
	--insert into de_subject_snp_dataset_release                                   
	--select snp.*, TrialId as release_study                                       
	--from deapp.de_subject_snp_dataset snp                                        
	--where snp.trial_name = Trialid;                                              
	--stepCt := stepCt + 1;                                                        
	--cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_subj
ect_snp_dataset_release',SQL%ROWCOUNT,stepCt,'Done');                           
		                                                                              
                                                                                
	insert into de_snp_data_by_patient_release                                     
	select snp.*, TrialId as release_study                                         
	from deapp.de_snp_data_by_patient snp                                          
	where snp.trial_name = Trialid;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_snp_da
ta_by_patient_release',SQL%ROWCOUNT,stepCt,'Done');                             
                                                                                
                                                                                
                                                                                
	insert into de_snp_data_ds_loc_release                                         
	select snp.*, TrialId as release_study                                         
	from deapp.de_snp_data_dataset_loc snp                                         
	where snp.trial_name = Trialid;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_snp_da
ta_ds_loc_release',SQL%ROWCOUNT,stepCt,'Done');                                 
	                                                                               
	insert into de_snp_data_by_probe_release                                       
	select snp.*, TrialId as release_study                                         
	from deapp.de_snp_data_by_probe snp                                            
	where snp.trial_name = Trialid;                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted trial into  de_snp_da
ta_by_probe_release',SQL%ROWCOUNT,stepCt,'Done');                               
                                                                                
                                                                                
	insert into de_mrna_annotation_release                                         
	select * from deapp.de_mrna_annotation;                                        
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_mrna_an
notation_release',SQL%ROWCOUNT,stepCt,'Done');                                  
	commit;                                                                        
                                                                                
	insert into de_gpl_info_release                                                
	select * from deapp.de_gpl_info;                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_gpl_inf
o_release',SQL%ROWCOUNT,stepCt,'Done');                                         
	commit;                                                                        
                                                                                
  /* JDC: Check if the study contains SNP data and only load the following snp t
ables if needed */                                                              
                                                                                
  vSNP:=0;                                                                      
  select count(*)                                                               
	into vSNP                                                                      
	from de_snp_data_by_probe_release                                              
	where release_study = TrialId;                                                 
                                                                                
                                                                                
	IF vSNP > 0 THEN                                                               
                                                                                
                                                                                
    execute immediate('truncate table de_snp_info_release');                    
	                                                                               
    insert into de_snp_info_release                                             
    select * from deapp.de_snp_info;                                            
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_snp_
info_release',SQL%ROWCOUNT,stepCt,'Done');                                      
    commit;                                                                     
                                                                                
	execute immediate('truncate table de_snp_probe_release');                      
	                                                                               
    insert into de_snp_probe_release                                            
    select * from deapp.de_snp_probe;                                           
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_snp_
probe_release',SQL%ROWCOUNT,stepCt,'Done');                                     
    commit;                                                                     
                                                                                
	execute immediate('truncate table de_snp_gene_map_release');                   
	                                                                               
    insert into de_snp_gene_map_release                                         
    select * from deapp.de_snp_gene_map;                                        
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_snp_
gene_map_release',SQL%ROWCOUNT,stepCt,'Done');                                  
    commit;                                                                     
                                                                                
	execute immediate('truncate table de_snp_probe_sort_def_release');             
	                                                                               
    insert into de_snp_probe_sort_def_release                                   
    select * from deapp.de_snp_probe_sorted_def;                                
    stepCt := stepCt + 1;                                                       
    cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  de_snp_
probe_sort_def_release',SQL%ROWCOUNT,stepCt,'Done');                            
    commit;                                                                     
                                                                                
  end if;                                                                       
                                                                                
                                                                                
                                                                                
	insert into sample_categories_release                                          
	select sc.*, TrialId as release_study                                          
    from lz_src_sample_categories sc                                            
	where trial_cd = TrialId;                                                      
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted data into  sample_cat
egories_release',SQL%ROWCOUNT,stepCt,'Done');                                   
	commit;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_promote_to_stg',0,ste
pCt,'Done');                                                                    
                                                                                
       ---Cleanup OVERALL JOB if this proc is being run standalone              
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
/*	Create release tables                                                        
                                                                                
	create table i2b2_release as                                                   
	select x.*, x.sourcesystem_cd as release_study                                 
	from i2b2 x                                                                    
	where 1=2'                                                                     
                                                                                
	create table observation_fact_release as                                       
	select x.*, x.modifier_cd as release_study                                     
	from observation_fact x                                                        
	where 1=2	                                                                     
                                                                                
	create table patient_dimension_release as                                      
	select x.*, x.sourcesystem_cd as release_study                                 
	from patient_dimension x                                                       
	where 1=2                                                                      
                                                                                
	create table concept_dimension_release as                                      
	select x.*, x.sourcesystem_cd as release_study                                 
	from concept_dimension x                                                       
	where 1=2                                                                      
	                                                                               
	create table de_subj_sample_map_release as                                     
	select x.*, x.trial_name as release_study                                      
	from deapp.de_subject_sample_mapping x                                         
	where 1=2                                                                      
	                                                                               
	create table de_subject_mrna_data_release as                                   
	select x.*, x.trial_name as release_study                                      
	from deapp.de_subject_microarray_data x                                        
	where 1=2                                                                      
	                                                                               
	create table de_subject_rbm_data_release as                                    
	select x.*, x.trial_name as release_study                                      
	from deapp.de_subject_rbm_data x                                               
	where 1=2                                                                      
	                                                                               
	create table de_subj_protein_data_release as                                   
	select x.*, x.trial_name as release_study                                      
	from deapp.de_subject_protein_data x                                           
	where 1=2                                                                      
	                                                                               
	create table i2b2_tags_release as                                              
	select x.*, x.path as release_study                                            
	from i2b2_tags x                                                               
	where 1=2                                                                      
	                                                                               
	create table bio_experiment_release as                                         
	select x.*, x.accession as release_study                                       
	from biomart.bio_experiment x                                                  
	where 1=2                                                                      
	                                                                               
	create table bio_clinical_trial_release as                                     
	select x.*, x.trial_number as release_study                                    
	from biomart.bio_clinical_trial x                                              
	where 1=2                                                                      
	                                                                               
	create table bio_data_uid_release as                                           
	select x.*, x.unique_id as release_study                                       
	from biomart.bio_data_uid x                                                    
	where 1=2                                                                      
	                                                                               
	create table bio_data_compound_release as                                      
	select c.*, b.accession as release_study                                       
	from biomart.bio_data_compound c                                               
		,biomart.bio_experiment b                                                     
	where 1=2                                                                      
	                                                                               
	create table search_secure_object_release as                                   
	select c.*, b.accession as release_study                                       
	from searchapp.search_secure_object c                                          
	    ,biomart.bio_experiment b                                                  
	where 1=2                                                                      
	                                                                               
*/                                                                              
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_CLINICAL_DATA_EXTRNL_LT"            
(                                                                               
  trial_id 		IN	VARCHAR2                                                        
 ,currentJobID	IN	NUMBER := null                                                
)                                                                               
AS                                                                              
                                                                                
	--	JEA@20111028	New, loads clinical data from external table to landing zone te
mporary table                                                                   
                                                                                
  topNode		VARCHAR2(2000);                                                      
  topLevel		number(10,0);                                                       
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
  study_name	varchar2(2000);                                                    
  TrialID		varchar2(100);                                                       
  secureStudy	varchar2(200);                                                    
  etlDate		date;                                                                
  tPath			varchar2(2000);                                                       
  pCount		int;                                                                  
  rtnCode		int;                                                                 
                                                                                
    --Audit variables                                                           
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
                                                                                
BEGIN                                                                           
                                                                                
	TrialID := upper(trial_id);                                                    
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
	                                                                               
	select sysdate into etlDate from dual;                                         
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 0;                                                                   
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start i2b2_clinical_data_extrn
l_lt',0,stepCt,'Done');                                                         
	                                                                               
	--	truncate landing zone work table                                            
	                                                                               
	execute immediate('truncate table tm_lz.lt_src_clinical_data');                
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Truncate table lt_src_clinical
_data',0,stepCt,'Done');                                                        
		                                                                              
	--	Insert data to lt_src_clinical_data                                         
	                                                                               
	insert into lt_src_clinical_data                                               
	(study_id                                                                      
	,site_id                                                                       
	,subject_id                                                                    
	,visit_name                                                                    
	,data_label                                                                    
	,data_value                                                                    
	,category_cd)                                                                  
	select study_id                                                                
		  ,site_id                                                                    
		  ,subject_id                                                                 
		  ,visit_name                                                                 
		  ,data_label                                                                 
		  ,data_value                                                                 
		  ,category_cd                                                                
	from clinical_data_extrnl;                                                     
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert data into lt_src_clinic
al_data',SQL%ROWCOUNT,stepCt,'Done');                                           
	commit;                                                                        
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_clinical_data_extrnl_
lt',0,stepCt,'Done');                                                           
	                                                                               
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
	if newJobFlag = 1                                                              
	then                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	end if;                                                                        
                                                                                
	rtnCode := 0;                                                                  
                                                                                
	exception                                                                      
	when others then                                                               
    --Handle errors.                                                            
		cz_error_handler (jobID, procedureName);                                      
    --End Proc                                                                  
		cz_end_audit (jobID, 'FAIL');                                                 
		rtnCode := 16;                                                                
	                                                                               
end;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_BACKOUT_TRIAL"                      
(                                                                               
  trial_id VARCHAR2                                                             
 ,path_string varchar2                                                          
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
--	JEA@20100106	New                                                             
--	JEA@20100112	Added removal of SECURITY records from observation_fact         
--	JEA@20120313	Added colon to study on patient_dimension delete                
--	JEA@20120416	Only delete omic data if omic_source_study is null or same as Tr
ialId                                                                           
                                                                                
  TrialID	varchar2(100);                                                        
  TrialType VARCHAR2(250);                                                      
  pExists	number;                                                               
  sqlText	varchar2(1000);                                                       
                                                                                
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
  --TrialID := upper(trial_id);                                                 
  TrialId := trial_id;                                                          
                                                                                
  stepCt := 0;                                                                  
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
  if path_string != ''  or path_string != '%'                                   
  then                                                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_backout_trial',0
,stepCt,'Done');                                                                
                                                                                
	--	delete all i2b2 nodes                                                       
	                                                                               
	i2b2_delete_all_nodes(path_string,jobId);                                      
	                                                                               
	--	delete any i2b2_tag data                                                    
	                                                                               
	delete from i2b2_tags                                                          
	where path like path_string || '%';                                            
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I2B
2METADATA i2b2_tags',SQL%ROWCOUNT,stepCt,'Done');                               
	commit;                                                                        
	                                                                               
	--	delete clinical data                                                        
	                                                                               
	delete from lz_src_clinical_data                                               
	where study_id = trialId;                                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from lz_
src_clinical_data',SQL%ROWCOUNT,stepCt,'Done');                                 
	commit;                                                                        
		                                                                              
	--	delete observation_fact SECURITY data, do before patient_dimension delete   
	                                                                               
	delete from observation_fact f                                                 
	where f.concept_cd = 'SECURITY'                                                
	  and f.patient_num in                                                         
	     (select distinct p.patient_num from patient_dimension p                   
		  where p.sourcesystem_cd like trialId || ':%');                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete SECURITY data for trial
 from I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');               
	commit;	                                                                       
	                                                                               
	--	delete patient data                                                         
	                                                                               
	delete from patient_dimension                                                  
	where sourcesystem_cd like trialId || ':%';                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I2B
2DEMODATA patient_dimension',SQL%ROWCOUNT,stepCt,'Done');                       
	commit;                                                                        
	                                                                               
	delete from patient_trial                                                      
	where trial=  trialId;                                                         
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from I2B
2DEMODATA patient_trial',SQL%ROWCOUNT,stepCt,'Done');                           
	commit;                                                                        
	                                                                               
	--	delete gene expression data                                                 
	                                                                               
	select count(*) into pExists                                                   
	from de_subject_sample_mapping                                                 
	where trial_name = TrialId                                                     
	  and platform = 'MRNA_AFFYMETRIX'                                             
	  and trial_name = TrialId                                                     
	  --and coalesce(omic_source_study,trial_name) = TrialId                       
	  ;                                                                            
	                                                                               
	if pExists > 1 then                                                            
		select count(*) into pExists                                                  
		from all_tables                                                               
		where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                               
		  and partitioned = 'YES';                                                    
		                                                                              
		if pExists = 0 then                                                           
			--	table not partitioned, do delete                                          
			delete from de_subject_microarray_data                                       
			where trial_name = TrialId;                                                  
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from d
e_subject_sample_mapping',SQL%ROWCOUNT,stepCt,'Done');                          
			commit;			                                                                   
		else                                                                          
			select count(*) into pExists                                                 
			from all_tab_partitions                                                      
			where table_name = 'DE_SUBJECT_MICROARRAY_DATA'                              
			  and partition_name = TrialId;                                              
			                                                                             
			if pExists > 0 then			                                                       
				sqlText := 'alter table deapp.de_subject_microarray_data drop PARTITION "' |
| TrialID || '"';                                                               
				execute immediate(sqlText);                                                 
				stepCt := stepCt + 1;                                                       
				cz_write_audit(jobId,databaseName,procedureName,'Dropped partition from de_s
ubject_microarray_data',0,stepCt,'Done');                                       
			end if;                                                                      
		end if;                                                                       
	else                                                                           
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'No gene expression data to be
 deleted',0,stepCt,'Done');                                                     
	end if;                                                                        
		                                                                              
	--	check for SNP data	                                                         
	                                                                               
	select count(*) into pExists                                                   
	from de_subject_sample_mapping                                                 
	where trial_name = TrialId                                                     
	  and platform = 'SNP'                                                         
	  and trial_name = TrialId;                                                    
	                                                                               
	if pexists > 0 then                                                            
		--	delete SNP data                                                            
		                                                                              
		delete from de_snp_data_dataset_loc                                           
		where trial_name = TrialId;                                                   
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_snp_data_dataset_loc',SQL%ROWCOUNT,stepCt,'Done');                             
		commit;                                                                       
		                                                                              
		delete from de_snp_data_by_patient                                            
		where trial_name = TrialId;                                                   
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_snp_data_by_patient',SQL%ROWCOUNT,stepCt,'Done');                              
		commit;                                                                       
		                                                                              
		delete from deapp.de_snp_calls_by_gsm s                                       
		where s.patient_num in                                                        
			 (select distinct x.patient_id                                               
			  from de_subject_sample_mapping x                                           
			  where x.trial_name = TrialId                                               
			    and x.platform = 'SNP');                                                 
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_snp_calls_by_gsm',SQL%ROWCOUNT,stepCt,'Done');                                 
		commit;                                                                       
		                                                                              
		delete from deapp.de_snp_copy_number s                                        
		where s.patient_num in                                                        
			 (select distinct x.patient_id                                               
			  from de_subject_sample_mapping x                                           
			  where x.trial_name = TrialId                                               
			    and x.platform = 'SNP');                                                 
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_snp_copy_number',SQL%ROWCOUNT,stepCt,'Done');                                  
		commit;                                                                       
		                                                                              
		delete from deapp.de_snp_subject_sorted_def s                                 
		where s.trial_name = TrialId;                                                 
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_snp_subject_sorted_def',SQL%ROWCOUNT,stepCt,'Done');                           
		commit;                                                                       
                                                                                
		select count(*) into pExists                                                  
		from all_tables                                                               
		where table_name = 'DE_SNP_DATA_BY_PROBE'                                     
		  and partitioned = 'YES';                                                    
		                                                                              
		if pExists = 0 then                                                           
			--	table not partitioned, so just do delete                                  
			delete from de_snp_data_by_probe                                             
			where trial_name = TrialId;                                                  
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from d
e_snp_data_by_probe',SQL%ROWCOUNT,stepCt,'Done');                               
			commit;	                                                                     
		else                                                                          
			sqlText := 'alter table deapp.de_snp_data_by_probe drop PARTITION "' || Trial
ID || '"';                                                                      
			execute immediate(sqlText);                                                  
			stepCt := stepCt + 1;                                                        
			cz_write_audit(jobId,databaseName,procedureName,'Dropped partition from de_sn
p_data_by_probe',0,stepCt,'Done');			                                           
		end if;                                                                       
		                                                                              
		delete from de_subject_snp_dataset                                            
		where trial_name = TrialId;                                                   
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete data for trial from de
_subject_snp_dataset',SQL%ROWCOUNT,stepCt,'Done');                              
		commit;		                                                                     
                                                                                
	else                                                                           
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'No SNP data to be deleted',0,
stepCt,'Done');                                                                 
	end if;		                                                                      
	                                                                               
	--	delete trial from de_subject_sample_mapping                                 
	                                                                               
	delete from de_subject_sample_mapping                                          
	where trial_name = TrialId;                                                    
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from de_subject_s
ample_mapping',SQL%ROWCOUNT,stepCt,'Done');                                     
	commit;                                                                        
			                                                                             
	--	delete data in biomart                                                      
	                                                                               
	delete from bio_data_uid                                                       
	where unique_id = 'EXP:' || TrialId;                                           
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from bio_data_uid
',SQL%ROWCOUNT,stepCt,'Done');                                                  
	commit;                                                                        
	                                                                               
	delete from bio_data_compound                                                  
	where bio_data_id in                                                           
		 (select x.bio_experiment_id from bio_experiment x                            
		  where x.accession = TrialId                                                 
		    and x.etl_id = 'METADATA:' || TrialId);                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from bio_data_com
pound',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
	                                                                               
	delete from bio_data_disease                                                   
	where bio_data_id in                                                           
		 (select x.bio_experiment_id from bio_experiment x                            
		  where x.accession = TrialId                                                 
		    and x.etl_id = 'METADATA:' || TrialId);                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from bio_data_dis
ease',SQL%ROWCOUNT,stepCt,'Done');                                              
	commit;                                                                        
	                                                                               
	delete from bio_data_taxonomy                                                  
	where bio_data_id in                                                           
		 (select x.bio_experiment_id from bio_experiment x                            
		  where x.accession = TrialId                                                 
		    and x.etl_id = 'METADATA:' || TrialId);                                   
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Delete trial from bio_data_tax
onomy',SQL%ROWCOUNT,stepCt,'Done');                                             
	commit;                                                                        
	                                                                               
	--	reload i2b2_secure                                                          
	                                                                               
	i2b2_load_security_data;                                                       
	                                                                               
  end if;                                                                       
                                                                                
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_ADD_SNP_BIOMARKER_NODES"            
(                                                                               
  trial_id 		VARCHAR2                                                           
  ,ont_path		varchar2                                                           
 ,currentJobID 	NUMBER := null                                                  
)                                                                               
AS                                                                              
	--	Adds SNP platform and sample type nodes into Biomarker Data ontology and add
s rows into observation_fact for                                                
	--	each subject/concept combination                                            
	                                                                               
	--	JEA@20110120	New                                                            
	--	JEA@@0111218	Remove hard-coded "Biomarker Data" node, use what's supplied in
 ont_path                                                                       
                                                                                
	TrialID	varchar2(100);                                                         
	ontPath		varchar2(500);                                                        
                                                                                
	RootNode	VARCHAR2(300);                                                        
	pExists 	number;                                                               
	platformTitle	varchar2(200);                                                   
	tText		varchar2(1000);                                                         
	ontLevel	integer;                                                              
	nodeName	varchar2(200);                                                        
                                                                                
	--Audit variables                                                              
	newJobFlag INTEGER(1);                                                         
	databaseName VARCHAR(100);                                                     
	procedureName VARCHAR(100);                                                    
	jobID number(18,0);                                                            
	stepCt number(18,0);                                                           
	                                                                               
	--	raise exception if platform not in de_gpl_info                              
	                                                                               
	missing_GPL exception;                                                         
	                                                                               
--	cursor to add platform-level nodes, need to be inserted before de_subject_sam
ple_mapping                                                                     
                                                                                
	cursor addPlatform is                                                          
	select distinct REGEXP_REPLACE(ont_path || '\' || g.title || '\' ,             
                  '(\\){2,}', '\') as path                                      
		   ,g.title                                                                   
	from de_subject_snp_dataset s                                                  
		,de_gpl_info g                                                                
	where s.trial_name = TrialId                                                   
	  and nvl(s.platform_name,'GPL570') = g.platform                               
	  and upper(g.organism) = 'HOMO SAPIENS';                                      
	                                                                               
--	cursor to add sample-level nodes                                             
                                                                                
	cursor addSample is                                                            
	select distinct REGEXP_REPLACE(ont_path || '\' || g.title || '\' ||            
                    s.sample_type || '\',	'(\\){2,}', '\') as sample_path       
		   ,s.sample_type as sample_name                                              
	from de_subject_snp_dataset s                                                  
		,de_gpl_info g                                                                
	where s.trial_name = TrialId                                                   
	  and nvl(s.platform_name,'GPL570') = g.platform                               
	  and upper(g.organism) = 'HOMO SAPIENS'                                       
	  and s.sample_type is not null;                                               
	                                                                               
BEGIN                                                                           
	TrialID := upper(trial_id);                                                    
	ontPath := ont_path;                                                           
                                                                                
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
    	                                                                           
	stepCt := 0;                                                                   
	cz_write_audit(jobId,databaseName,procedureName,'Starting i2b2_add_snp_node',0,
stepCt,'Done');                                                                 
	stepCt := stepCt + 1;                                                          
                                                                                
	--	determine last node in ontPath                                              
	                                                                               
	select length(ontPath)-length(replace(ontPath,'\','')) into ontLevel from dual;
                                                                                
	select parse_nth_value(ontPath,ontLevel,'\') into nodeName from dual;          
	                                                                               
	--	add the high level \ node if it doesn't exist (first time loading data)     
                                                                                
	select count(*)                                                                
	into pExists                                                                   
	from i2b2                                                                      
	where c_fullname = REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\');            
                                                                                
	if pExists = 0 then                                                            
		i2b2_add_node(TrialId, REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\'), nodeNa
me, jobID);                                                                     
        stepCt := stepCt + 1;                                                   
	    cz_write_audit(jobId,databaseName,procedureName,'Add node for ontPath',0,st
epCt,'Done');                                                                   
	end if;                                                                        
                                                                                
    --	check if a node exists for the platform, if yes, then delete existing dat
a, make sure all platforms in de_subject_snp_dataset have an                    
	--	entry in de_gpl_info, if not, raise exception                               
	                                                                               
	select count(*) into pExists                                                   
	from de_subject_snp_dataset s                                                  
		,de_gpl_info g                                                                
	where s.trial_name = TrialId                                                   
	  and nvl(s.platform_name,'GPL570') = g.platform(+)                            
	  and  'HOMO SAPIENS' = upper(g.organism(+))                                   
	  and g.platform is null;                                                      
	                                                                               
	if pExists > 0                                                                 
		then raise missing_GPL;                                                       
	end if;                                                                        
                                                                                
	--	add SNP platform nodes                                                      
	                                                                               
	for r_addPlatform in addPlatform Loop                                          
	                                                                               
		i2b2_delete_all_nodes(REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\') || r_add
Platform.title || '\', jobID);                                                  
		stepCt := stepCt + 1;                                                         
		cz_write_audit(jobId,databaseName,procedureName,'Delete existing SNP Platform 
for trial in I2B2METADATA i2b2',0,stepCt,'Done');                               
		                                                                              
		i2b2_add_node(TrialId, r_addPlatform.path, r_addPlatform.title, jobId);       
		tText := 'Added Platform: ' || r_addPlatform.path || '  Name: ' || r_addPlatfo
rm.title;                                                                       
		stepCt := stepCt + 1;                                                         
	    cz_write_audit(jobId,databaseName,procedureName,tText,SQL%ROWCOUNT,stepCt,'
Done');                                                                         
	end loop;                                                                      
                                                                                
	cz_write_audit(jobId,databaseName,procedureName,'Added SNP Platform nodes',0,st
epCt,'Done');                                                                   
	stepCt := stepCt + 1;                                                          
	commit;                                                                        
	                                                                               
	--	Insert the sample-level nodes                                               
	                                                                               
	for r_addSample in addSample Loop                                              
	                                                                               
		i2b2_add_node(TrialId, r_addSample.sample_path, r_addSample.sample_name, jobId
);                                                                              
		tText := 'Added Sample: ' || r_addSample.sample_path || '  Name: ' || r_addSam
ple.sample_name;                                                                
	    cz_write_audit(jobId,databaseName,procedureName,tText,SQL%ROWCOUNT,stepCt,'
Done');                                                                         
		stepCt := stepCt + 1;                                                         
                                                                                
	end loop;		                                                                    
	                                                                               
--	Insert records for patients into observation_fact                            
                                                                                
	insert into observation_fact                                                   
    (patient_num                                                                
	,concept_cd                                                                    
	,modifier_cd                                                                   
	,valtype_cd                                                                    
	,tval_char                                                                     
	,nval_num                                                                      
	,sourcesystem_cd                                                               
	,import_date                                                                   
	,valueflag_cd                                                                  
	,provider_id                                                                   
	,location_cd                                                                   
	,units_cd                                                                      
    )                                                                           
    select p.patient_num                                                        
		  ,t.concept_cd                                                               
		  ,t.sourcesystem_cd                                                          
		  ,'T' -- Text data type                                                      
		  ,'E'  --Stands for Equals for Text Types                                    
		  ,null	--	not numeric for Proteomics                                         
		  ,t.sourcesystem_cd                                                          
		  ,sysdate                                                                    
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'@'                                                                        
		  ,'' -- no units available                                                   
    from  concept_dimension t                                                   
		 ,de_subject_snp_dataset p                                                    
		 ,de_gpl_info g                                                               
    where p.trial_name =  TrialId                                               
	  and nvl(p.platform_name,'GPL570') = g.platform                               
	  and upper(g.organism) = 'HOMO SAPIENS'                                       
	  and t.concept_path = REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\') || g.tit
le || '\' || p.sample_type || '\'                                               
    group by p.patient_num                                                      
			,t.concept_cd                                                                
			,t.sourcesystem_cd;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert trial into I2B2DEMODATA
 observation_fact',SQL%ROWCOUNT,stepCt,'Done');                                 
	stepCt := stepCt + 1;                                                          
    commit;                                                                     
	                                                                               
	--	update concept_cd in de_subject_snp_dataset                                 
	                                                                               
	update de_subject_snp_dataset d                                                
	set concept_cd = (select t.concept_cd                                          
					  from de_subject_snp_dataset p                                            
						  ,de_gpl_info g                                                          
						  ,concept_dimension t                                                    
					  where d.subject_snp_dataset_id = p.subject_snp_dataset_id                
						and nvl(p.platform_name,'GPL570') = g.platform                            
						and upper(g.organism) = 'HOMO SAPIENS'                                    
						and t.concept_path = REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\') || g.
title || '\' || p.sample_type || '\'                                            
					  )                                                                        
	where d.trial_name = TrialId;                                                  
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Update concept_cd in DEAPP de_
subject_snp_dataset',SQL%ROWCOUNT,stepCt,'Done');                               
    commit;                                                                     
                                                                                
--	Update visual attributes for leaf active (default is folder)                 
                                                                                
	update i2b2 a                                                                  
    set c_visualattributes = 'LA'                                               
    where 1 = (select count(*)                                                  
			   from i2b2 b                                                               
			   where b.c_fullname like (a.c_fullname || '%'))                            
      and a.c_fullname like REGEXP_REPLACE(ont_path || '\','(\\){2,}', '\') || '
%';                                                                             
    stepCt := stepCt + 1;                                                       
	cz_write_audit(jobId,databaseName,procedureName,'Update leaf active attribute f
or trial in I2B2METADATA i2b2',SQL%ROWCOUNT,stepCt,'Done');                     
    commit;                                                                     
	                                                                               
--	fill in tree                                                                 
                                                                                
	--	get top level for study, this will be used for fill-in and create_concept_co
unts                                                                            
	--	if this fails, check to make sure the trialId is not a sourcesystem_cd at an
 higher level than the study                                                    
	                                                                               
	select b.c_fullname into nodeName                                              
	from i2b2 b                                                                    
	where b.c_hlevel =                                                             
		 (select min(x.c_hlevel) from i2b2 x                                          
		  where b.sourcesystem_cd = x.sourcesystem_cd)                                
	  and ontPath like b.c_fullname || '%'                                         
	  and b.sourcesystem_cd = TrialId;                                             
                                                                                
	i2b2_fill_in_tree(TrialID,REGEXP_REPLACE(nodeName || '\','(\\){2,}', '\'), jobI
D);                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Fill in tree for Biomarker Dat
a for trial',SQL%ROWCOUNT,stepCt,'Done');                                       
                                                                                
  --Build concept Counts                                                        
  --Also marks any i2B2 records with no underlying data as Hidden, need to do at
 Biomarker level because there may be multiple platforms and patient count can v
ary                                                                             
                                                                                
    i2b2_create_concept_counts(REGEXP_REPLACE(nodeName || '\','(\\){2,}', '\'),j
obID );                                                                         
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Create concept counts',0,stepC
t,'Done');                                                                      
                                                                                
  --Reload Security: Inserts one record for every I2B2 record into the security 
table                                                                           
                                                                                
    i2b2_load_security_data(jobId);                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Load security data',0,stepCt,'
Done');                                                                         
                                                                                
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End i2b2_process_protein_data'
,0,stepCt,'Done');                                                              
		                                                                              
    ---Cleanup OVERALL JOB if this proc is being run standalone                 
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
                                                                                
  WHEN missing_GPL  then                                                        
	--	put message in log                                                          
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'One or more GPL platforms in d
e_subject_snp_dataset is not in de_gpl_info',0,stepCt,'Done');                  
                                                                                
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_ADD_ROOT_NODE"                      
(root_node		varchar2                                                            
,currentJobID	NUMBER := null                                                    
)                                                                               
AS                                                                              
	--	JEA@20120510	New                                                            
	--	JEA@20120529	Updated for i2b2 1.6                                           
	                                                                               
	--Audit variables                                                              
	newJobFlag 	INTEGER(1);                                                        
	databaseName 	VARCHAR(100);                                                    
	procedureName VARCHAR(100);                                                    
	jobID 		number(18,0);                                                          
	stepCt 		number(18,0);                                                         
                                                                                
	rootNode	varchar2(200);                                                        
	rootPath	varchar2(200);                                                        
	                                                                               
Begin                                                                           
	rootNode := root_node;                                                         
	rootPath := '\' || rootNode || '\';                                            
                                                                                
    stepCt := 0;                                                                
	                                                                               
	--Set Audit Parameters                                                         
	newJobFlag := 0; -- False (Default)                                            
	jobID := currentJobID;                                                         
                                                                                
	SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;   
	procedureName := $$PLSQL_UNIT;                                                 
                                                                                
	--Audit JOB Initialization                                                     
	--If Job ID does not exist, then this is a single procedure run and we need to 
create it                                                                       
	IF(jobID IS NULL or jobID < 1)                                                 
	THEN                                                                           
		newJobFlag := 1; -- True                                                      
		cz_start_audit (procedureName, databaseName, jobID);                          
	END IF;                                                                        
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Start ' || procedureName,0,ste
pCt,'Done');                                                                    
	                                                                               
	insert into table_access                                                       
	select rootNode as c_table_cd                                                  
		  ,'i2b2' as c_table_name                                                     
		  ,'N' as protected_access                                                    
		  ,0 as c_hlevel                                                              
		  ,rootPath as c_fullname                                                     
		  ,rootNode as c_name                                                         
		  ,'N' as c_synonym_cd                                                        
		  ,'CA' as c_visualattributes                                                 
		  ,null as c_totalnum                                                         
		  ,null as c_basecode                                                         
		  ,null as c_metadataxml                                                      
		  ,'concept_cd' as c_facttablecolumn                                          
		  ,'concept_dimension' as c_dimtablename                                      
		  ,'concept_path' as c_columnname                                             
		  ,'T' as c_columndatatype                                                    
		  ,'LIKE' as c_operator                                                       
		  ,rootPath as c_dimcode                                                      
		  ,null as c_comment                                                          
		  ,rootPath as c_tooltip                                                      
		  ,sysdate as c_entry_date                                                    
		  ,null as c_change_date                                                      
		  ,null as c_status_cd                                                        
		  ,null as valuetype_cd                                                       
	from dual                                                                      
	where not exists                                                               
		(select 1 from table_access x                                                 
		 where x.c_table_cd = rootNode);                                              
	                                                                               
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert to table_access',SQL%RO
WCOUNT,stepCt,'Done');                                                          
    COMMIT;	                                                                    
                                                                                
	--	insert root_node into i2b2                                                  
	                                                                               
	insert into i2b2                                                               
	(c_hlevel                                                                      
	,c_fullname                                                                    
	,c_name                                                                        
	,c_synonym_cd                                                                  
	,c_visualattributes                                                            
	,c_totalnum                                                                    
	,c_basecode                                                                    
	,c_metadataxml                                                                 
	,c_facttablecolumn                                                             
	,c_tablename                                                                   
	,c_columnname                                                                  
	,c_columndatatype                                                              
	,c_operator                                                                    
	,c_dimcode                                                                     
	,c_comment                                                                     
	,c_tooltip                                                                     
	,update_date                                                                   
	,download_date                                                                 
	,import_date                                                                   
	,sourcesystem_cd                                                               
	,valuetype_cd                                                                  
	,i2b2_id                                                                       
	)                                                                              
	select 0 as c_hlevel                                                           
		  ,rootPath as c_fullname                                                     
		  ,rootNode as c_name                                                         
		  ,'N' as c_synonym_cd                                                        
		  ,'CA' as c_visualattributes                                                 
		  ,null as c_totalnum                                                         
		  ,null as c_basecode                                                         
		  ,null as c_metadataxml                                                      
		  ,'concept_cd' as c_facttablecolumn                                          
		  ,'concept_dimension' as c_tablename                                         
		  ,'concept_path' as c_columnname                                             
		  ,'T' as c_columndatatype                                                    
		  ,'LIKE' as c_operator                                                       
		  ,rootPath as c_dimcode                                                      
		  ,null as c_comment                                                          
		  ,rootPath as c_tooltip                                                      
		  ,sysdate as update_date                                                     
		  ,null as download_date                                                      
		  ,sysdate as import_date                                                     
		  ,null as sourcesystem_cd                                                    
		  ,null as valuetype_cd                                                       
		  ,I2B2_ID_SEQ.nextval as i2b2_id                                             
	from dual                                                                      
	where not exists                                                               
		 (select 1 from i2b2 x                                                        
		  where x.c_name = rootNode);                                                 
		                                                                              
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Insert root_node ' || rootNode
 || ' to i2b2',SQL%ROWCOUNT,stepCt,'Done');                                     
    COMMIT;	                                                                    
			                                                                             
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'End ' || procedureName,0,stepC
t,'Done');                                                                      
	                                                                               
    COMMIT;                                                                     
	--Cleanup OVERALL JOB if this proc is being run standalone                     
	IF newJobFlag = 1                                                              
	THEN                                                                           
		cz_end_audit (jobID, 'SUCCESS');                                              
	END IF;                                                                        
                                                                                
	EXCEPTION                                                                      
	WHEN OTHERS THEN                                                               
		--Handle errors.                                                              
		cz_error_handler (jobID, procedureName);                                      
		--End Proc                                                                    
		cz_end_audit (jobID, 'FAIL');                                                 
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_ADD_NODE"                           
(                                                                               
  TrialID VARCHAR2,                                                             
  path VARCHAR2,                                                                
  path_name VARCHAR2                                                            
 ,currentJobID NUMBER := null                                                   
)                                                                               
AS                                                                              
                                                                                
  root_node		varchar2(2000);                                                    
  root_level	int;                                                               
                                                                                
                                                                                
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
  stepCt number(18,0);                                                          
                                                                                
BEGIN                                                                           
                                                                                
  -------------------------------------------------------------                 
  -- Add a tree node in I2b2                                                    
  -- KCR@20090519 - First Rev                                                   
  -- JEA@20100107 - Added auditing                                              
  -- JEA@20111212	Added i2b2_id sequence                                        
  -- JEA@20120529	Updated for i2b2 1.6                                          
                                                                                
  -------------------------------------------------------------                 
                                                                                
  stepCt := 0;                                                                  
	                                                                               
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
	select parse_nth_value(path, 2, '\') into root_node from dual;                 
	                                                                               
	select c_hlevel into root_level                                                
	from table_access                                                              
	where c_name = root_node;                                                      
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    cz_start_audit (procedureName, databaseName, jobID);                        
  END IF;                                                                       
                                                                                
  if path != ''  or path != '%' or path_name != ''                              
  then                                                                          
    --Delete existing node.                                                     
    --I2B2                                                                      
    DELETE                                                                      
      FROM OBSERVATION_FACT                                                     
    WHERE                                                                       
      concept_cd IN (SELECT C_BASECODE FROM I2B2 WHERE C_FULLNAME = PATH);      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted any concepts for path 
from I2B2DEMODATA observation_fact',SQL%ROWCOUNT,stepCt,'Done');                
    COMMIT;                                                                     
                                                                                
      --CONCEPT DIMENSION                                                       
    DELETE                                                                      
      FROM CONCEPT_DIMENSION                                                    
    WHERE                                                                       
      CONCEPT_PATH = path;                                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted any concepts for path 
from I2B2DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');               
    COMMIT;                                                                     
                                                                                
      --I2B2                                                                    
      DELETE                                                                    
        FROM i2b2                                                               
      WHERE                                                                     
        C_FULLNAME = PATH;                                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Deleted path from I2B2METADATA
 i2b2',SQL%ROWCOUNT,stepCt,'Done');                                             
    COMMIT;                                                                     
                                                                                
      --CONCEPT DIMENSION                                                       
    INSERT INTO CONCEPT_DIMENSION                                               
      (CONCEPT_CD, CONCEPT_PATH, NAME_CHAR,  UPDATE_DATE,  DOWNLOAD_DATE, IMPORT
_DATE, SOURCESYSTEM_CD, TABLE_NAME)                                             
    VALUES                                                                      
      (concept_id.nextval,                                                      
      path,                                                                     
      to_char(path_name),                                                       
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      TrialID,                                                                  
      'CONCEPT_DIMENSION');                                                     
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted concept for path into
 I2B2DEMODATA concept_dimension',SQL%ROWCOUNT,stepCt,'Done');                   
    COMMIT;                                                                     
                                                                                
    --I2B2                                                                      
    INSERT                                                                      
     INTO I2B2                                                                  
      (c_hlevel, C_FULLNAME, C_NAME, C_VISUALATTRIBUTES, c_synonym_cd, C_FACTTAB
LECOLUMN, C_TABLENAME, C_COLUMNNAME,                                            
      C_DIMCODE, C_TOOLTIP, UPDATE_DATE, DOWNLOAD_DATE, IMPORT_DATE, SOURCESYSTE
M_CD, c_basecode, C_OPERATOR, c_columndatatype, c_comment,                      
	  i2b2_id, m_applied_path)                                                     
    SELECT                                                                      
      (length(concept_path) - nvl(length(replace(concept_path, '\')),0)) / lengt
h('\') - 2 + root_level,                                                        
      CONCEPT_PATH,                                                             
      NAME_CHAR,                                                                
      'FA',                                                                     
      'N',                                                                      
      'CONCEPT_CD',                                                             
      'CONCEPT_DIMENSION',                                                      
      'CONCEPT_PATH',                                                           
      CONCEPT_PATH,                                                             
      CONCEPT_PATH,                                                             
      sysdate,                                                                  
      sysdate,                                                                  
      sysdate,                                                                  
      SOURCESYSTEM_CD,                                                          
      CONCEPT_CD,                                                               
      'LIKE',                                                                   
      'T',                                                                      
      decode(TrialID,null,null,'trial:' || TrialID),                            
	  i2b2_id_seq.nextval,                                                         
	  '@'                                                                          
    FROM                                                                        
      CONCEPT_DIMENSION                                                         
    WHERE                                                                       
      CONCEPT_PATH = path;                                                      
	stepCt := stepCt + 1;                                                          
	cz_write_audit(jobId,databaseName,procedureName,'Inserted path into I2B2METADAT
A i2b2',SQL%ROWCOUNT,stepCt,'Done');                                            
    COMMIT;                                                                     
	  END IF;                                                                      
      ---Cleanup OVERALL JOB if this proc is being run standalone               
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."EXEC_TEST_RUN" (                         
  v_test_category_id integer,                                                   
  v_param1 VARCHAR2,                                                            
  v_test_name VARCHAR2 --optional test name for searching                       
)                                                                               
AS                                                                              
 --BASIC TEST HARNESS FOR SQL TESTS                                             
 --KCR: 2009-08-24                                                              
 --TAKES IN 3 CATEGORY PARAMETERS. These are used to filter the tests to run    
 --Uses 1 "PARAM1" value to pass to the individual tests to use in the test.    
                                                                                
                                                                                
  --initiate variables for Job run and step ID's                                
  testRunID  CONTROL.AZ_TEST_RUN.TEST_RUN_ID%TYPE;                              
  testStepRunID CONTROL.AZ_TEST_STEP_RUN.TEST_STEP_RUN_ID%TYPE;                 
                                                                                
  startDate DATE;                                                               
  testStatus VARCHAR2(100);                                                     
  err_code VARCHAR2(4000);                                                      
  err_msg VARCHAR2(4000);                                                       
  testName VARCHAR2(200);                                                       
  testNameExists INTEGER;                                                       
                                                                                
  --Create a cursor of tests                                                    
  CURSOR testList is                                                            
  select test_id                                                                
    from CZ_TEST                                                                
  WHERE                                                                         
    test_category_id = v_test_category_id;                                      
                                                                                
BEGIN                                                                           
  startDate := sysdate;                                                         
                                                                                
  testName := v_test_name;                                                      
                                                                                
  --validate test name                                                          
  IF testName = '' then                                                         
  select to_char(max(dw_version_id)) || '-' || v_test_category_id  || '-' || v_p
aram1 || '-' || to_char(sysdate,'YYYYMMDD-HH24:MI:SS')                          
    into testName                                                               
    from cz_dw_version;                                                         
  ELSE                                                                          
    --add date/time to make distinct                                            
    testName := testName || '-' || to_char(startDate,'YYYYMMDD-HH24:MI:SS');    
  end if;                                                                       
                                                                                
  --CREATE A NEW TEST RUN                                                       
  INSERT                                                                        
  INTO AZ_TEST_RUN                                                              
  (                                                                             
    TEST_RUN_NAME,                                                              
    DW_VERSION_ID,                                                              
    START_DATE,                                                                 
    STATUS,                                                                     
    TEST_CATEGORY_ID,                                                           
    PARAM1                                                                      
  )                                                                             
  select                                                                        
    testName,                                                                   
    max(dw_version_id),                                                         
    startDate,                                                                  
    'RUNNING',                                                                  
    v_test_category_id,                                                         
    v_param1                                                                    
      FROM cz_dw_version;                                                       
  commit;                                                                       
                                                                                
    --Get the new Test Run ID                                                   
    select                                                                      
      max(test_run_id) into testRunID                                           
    from az_test_run                                                            
      WHERE start_date = startDate;                                             
                                                                                
                                                                                
  --ITERATE THROUGH TESTS AND EXECUTE THEM                                      
  FOR r_testList in testList Loop                                               
    exec_test(testRunID, r_testList.test_id, v_param1);                         
  END LOOP;                                                                     
                                                                                
    --determine minimum testRunStatus' for this Test.                           
    --They will appear as ERROR, FAIL, PASS, WARNING                            
    select min(status)                                                          
    into testStatus                                                             
    from az_test_step_run                                                       
      where test_run_id = testRunID;                                            
                                                                                
    --update run info                                                           
    update az_test_run                                                          
      set end_date = sysdate,                                                   
      status = testStatus                                                       
    where                                                                       
      test_run_id = testRunID;                                                  
    commit;                                                                     
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
                                                                                
    err_code := SQLCODE;                                                        
    err_msg := substr(SQLERRM, 1, 4000);                                        
                                                                                
    --Update Actual Results                                                     
    UPDATE AZ_TEST_RUN                                                          
    SET END_DATE = SYSDATE,                                                     
    STATUS = 'RUNERROR',                                                        
    RETURN_CODE = err_code,                                                     
    RETURN_MESSAGE = err_msg                                                    
    where                                                                       
      test_run_id = testRunID;                                                  
                                                                                
    commit;                                                                     
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."EXEC_TEST" (                             
  v_test_run_id NUMBER, -- From AZ_TEST_RUN                                     
  v_test_id NUMBER,     -- From CZ_TEST                                         
  v_param1 VARCHAR2      -- used if parameter is passed.                        
)                                                                               
AS                                                                              
                                                                                
  --initiate variables for Job run and step ID's                                
  testRunID  CONTROL.AZ_TEST_RUN.TEST_RUN_ID%TYPE;                              
  testStepRunID CONTROL.AZ_TEST_STEP_RUN.TEST_STEP_RUN_ID%TYPE;                 
                                                                                
  --Other variables                                                             
  sqlTestCode VARCHAR2(4000);                                                   
  startDate DATE;                                                               
  returnCount NUMBER;                                                           
  minValue NUMBER;                                                              
  maxValue NUMBER;                                                              
  err_code VARCHAR2(4000);                                                      
  err_msg VARCHAR2(4000);                                                       
  testStatus VARCHAR2(100);                                                     
  testType VARCHAR2(100);                                                       
  testSeverity varchar2(20);                                                    
  dwVersionID NUMBER;                                                           
  comparisonExists NUMBER;                                                      
                                                                                
BEGIN                                                                           
  --Set start Date (Need to set so the correct record can be retrieved)         
  startDate := sysdate;                                                         
                                                                                
  --Check for test run id. If null, create one.                                 
  if v_test_run_id is null or v_test_run_id = 0 then                            
    INSERT                                                                      
    INTO AZ_TEST_RUN                                                            
    (                                                                           
      DW_VERSION_ID,                                                            
      START_DATE,                                                               
      STATUS                                                                    
    )                                                                           
    select max(dw_version_id), startDate, 'RUNNING'                             
      FROM cz_dw_version;                                                       
    commit;                                                                     
                                                                                
    --Get the new Test Run ID                                                   
    select                                                                      
      max(test_run_id) into testRunID                                           
    from az_test_run                                                            
      WHERE start_date = startDate;                                             
  else                                                                          
    testRunID := v_test_run_id;                                                 
  end if;                                                                       
                                                                                
  --Create a new test step record                                               
  INSERT INTO                                                                   
    AZ_TEST_STEP_RUN (                                                          
      TEST_RUN_ID,                                                              
      START_DATE,                                                               
      TEST_ID,                                                                  
      STATUS,                                                                   
      PARAM1)                                                                   
  VALUES(                                                                       
    testRunID,                                                                  
    sysdate,                                                                    
    v_test_id,                                                                  
    'RUNNING',                                                                  
    v_param1);                                                                  
  COMMIT;                                                                       
                                                                                
  --Get the new Test Step ID                                                    
  select                                                                        
    max(test_step_run_id) into testStepRunID                                    
    from az_test_step_run                                                       
      WHERE start_date = startDate;                                             
                                                                                
 BEGIN                                                                          
    --Get SQL for test                                                          
    SELECT                                                                      
      TEST_SQL, TEST_TYPE, TEST_MIN_VALUE, TEST_MAX_VALUE, TEST_SEVERITY_CD     
    INTO                                                                        
      sqlTestCode, testType, minValue, maxValue, testSeverity                   
    FROM CZ_TEST                                                                
    WHERE TEST_ID = v_test_id;                                                  
                                                                                
  --Replace 'PARAM1' with passed variable                                       
  sqlTestCode := replace(sqlTestCode,'PARAM1', v_Param1);                       
                                                                                
    --Execute Test                                                              
    EXECUTE immediate sqlTestCode into returnCount;                             
                                                                                
    INSERT INTO                                                                 
        AZ_TEST_STEP_ACT_RESULT                                                 
        (TEST_STEP_RUN_ID,                                                      
        ACT_RECORD_CNT)                                                         
    SELECT                                                                      
      testStepRunID,                                                            
      returnCount                                                               
    FROM                                                                        
      CONTROL.AZ_TEST_STEP_RUN a                                                
    WHERE                                                                       
      a.TEST_STEP_RUN_ID = testStepRunId;                                       
    commit;                                                                     
                                                                                
    --ADDING LOGIC FOR COMPARISON TESTS                                         
    IF testType = 'COMPARISON' THEN                                             
      --get current dw version                                                  
      select max(dw_version_id) into dwVersionID                                
        from cz_dw_version;                                                     
                                                                                
      --Add or update current data to comparison table                          
      select count(*)                                                           
        into comparisonExists                                                   
        from az_test_comparison_info                                            
      where param1 = v_param1                                                   
      and test_id = v_test_id;                                                  
                                                                                
                                                                                
      if (comparisonExists) = 1 then                                            
        update az_test_comparison_info                                          
          set curr_act_record_cnt = returncount,                                
          curr_dw_version_id = dwversionid,                                     
          curr_test_step_run_id = teststeprunid,                                
          curr_run_date = sysdate                                               
        where param1 = v_param1                                                 
        and test_id = v_test_id;                                                
        commit;                                                                 
      end if;                                                                   
                                                                                
      if (comparisonExists) = 0 then                                            
        INSERT INTO CONTROL.AZ_TEST_COMPARISON_INFO                             
        (TEST_ID,                                                               
        PARAM1,                                                                 
        CURR_DW_VERSION_ID,                                                     
        CURR_TEST_STEP_RUN_ID,                                                  
        CURR_ACT_RECORD_CNT,                                                    
        curr_run_date                                                           
        )                                                                       
        VALUES                                                                  
        (                                                                       
          v_test_id,                                                            
          v_param1,                                                             
          dwVersionID,                                                          
          teststeprunid,                                                        
          returncount,                                                          
          sysdate                                                               
        );                                                                      
        commit;                                                                 
      end if;                                                                   
                                                                                
                                                                                
    --GET THE RESULTS FOR THIS TEST FROM THE PREVIOUS BUILD                     
    -- put it in both min and max for comparison                                
      SELECT PREV_ACT_RECORD_CNT, PREV_ACT_RECORD_CNT                           
      into minValue, maxValue                                                   
        from az_test_comparison_info                                            
      where                                                                     
        v_test_id = test_id -- get correct test                                 
      and v_param1 = param1; -- correct parameter                               
                                                                                
    end if;                                                                     
                                                                                
                                                                                
    --Determine Pass/Fail                                                       
    if returnCount BETWEEN minValue AND maxValue then                           
      testStatus := 'PASS';                                                     
    elsif testSeverity =  'INFO' then  --Informational Test                     
      testStatus := 'WARNING';                                                  
    else --Required test                                                        
      testStatus := 'FAIL';                                                     
    end if;                                                                     
                                                                                
    --update step info                                                          
    update az_test_Step_run                                                     
      set end_date = sysdate,                                                   
      status = testStatus                                                       
    where                                                                       
      test_step_run_id = testStepRunID;                                         
    commit;                                                                     
  END;                                                                          
                                                                                
  commit;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
                                                                                
    err_code := SQLCODE;                                                        
    err_msg := substr(SQLERRM, 1, 4000);                                        
                                                                                
    --Update Actual Results                                                     
    INSERT INTO AZ_TEST_STEP_ACT_RESULT                                         
    (                                                                           
      TEST_STEP_RUN_ID,                                                         
      RETURN_CODE,                                                              
      RETURN_MESSAGE,                                                           
      RETURN_ERROR_STACK,                                                       
      RETURN_ERROR_BACK_TRACE                                                   
    )                                                                           
    VALUES                                                                      
    (                                                                           
      testStepRunID,                                                            
      err_code,                                                                 
      err_msg,                                                                  
      DBMS_UTILITY.FORMAT_ERROR_STACK,                                          
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE                                       
    );                                                                          
                                                                                
    update az_test_Step_run                                                     
      set end_date = sysdate,                                                   
      status = 'ERROR'                                                          
    where                                                                       
      test_step_run_id = testStepRunID;                                         
    commit;                                                                     
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."DROP_TABLE" (                            
  TabOwner in VARCHAR2,                                                         
  TabName in VARCHAR2                                                           
  )                                                                             
  IS                                                                            
    temp number:=0;                                                             
    drp_stmt VARCHAR2 (200):=null;                                              
                                                                                
    BEGIN                                                                       
      select                                                                    
        count(*)                                                                
      into                                                                      
        temp                                                                    
      from                                                                      
        all_tables                                                              
      where                                                                     
        upper(TABLE_NAME) = upper(TabName)                                      
      and                                                                       
        upper(OWNER) = upper(TabOwner);                                         
                                                                                
      if temp = 1 then                                                          
        drp_stmt := 'Drop Table ' || TabOwner || '.' || TabName;                
        EXECUTE IMMEDIATE drp_stmt;                                             
        commit;                                                                 
      end if;                                                                   
                                                                                
    EXCEPTION                                                                   
      WHEN OTHERS THEN                                                          
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -
ERROR- '||SQLERRM);                                                             
                                                                                
END DROP_TABLE;                                                                 
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."DROPSYN" IS                              
 CURSOR s_cur IS                                                                
 SELECT synonym_name                                                            
 FROM user_synonyms;                                                            
                                                                                
 RetVal  NUMBER;                                                                
 sqlstr  VARCHAR2(200);                                                         
BEGIN                                                                           
  FOR s_rec IN s_cur LOOP                                                       
    sqlstr := 'DROP SYNONYM ' || s_rec.synonym_name;                            
                                                                                
    EXECUTE IMMEDIATE sqlstr;                                                   
    COMMIT;                                                                     
  END LOOP;                                                                     
END dropsyn;                                                                    
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."DATA_EXPORT"                             
AS                                                                              
--Iterate through a cursor of all patient IDs                                   
--Dynamically build a sql statement                                             
--Run the statement returning the results                                       
                                                                                
CURSOR cPatients is                                                             
  select distinct a.patient_num                                                 
    FROM observation_fact a                                                     
  join i2b2 b                                                                   
    on a.concept_cd = b.c_basecode                                              
  where c_fullname like '%BRC Depression Study%'                                
    and c_visualattributes not like '%H%'                                       
  order by patient_num;                                                         
                                                                                
  dynamicSQL varchar2(32767);                                                   
  dynamicSQL2 varchar2(32767);                                                  
                                                                                
BEGIN                                                                           
  dynamicSQL := 'select c_name ,c_fullname ';                                   
  dynamicSQL2 := 'select c_name ,c_fullname ';                                  
                                                                                
  FOR r_cPatients in cPatients Loop                                             
                                                                                
    dynamicSQL  := dynamicSQL  || ',max(decode(patient_num,' || cast(r_cPatients
.patient_num as varchar2) || ',tval_char,null)) "' || cast(r_cPatients.patient_n
um as varchar2) || '"';                                                         
    dynamicSQL2 := dynamicSQL2 || ',max(decode(patient_num,' || cast(r_cPatients
.patient_num as varchar2) || ',cast(nval_num as varchar2(20)),null)) "' || cast(
r_cPatients.patient_num as varchar2) || '"';                                    
                                                                                
  END LOOP;                                                                     
                                                                                
  dynamicSQL := dynamicSQL || ' from observation_fact a join i2b2 b on a.concept
_cd = b.c_basecode where c_fullname like ''%BRC Depression Study%'' and c_column
datatype = ''T'' and c_visualattributes not like ''%H%'' group by c_name, c_full
name';                                                                          
  dynamicSQL2 := dynamicSQL2 || ' from observation_fact a join i2b2 b on a.conce
pt_cd = b.c_basecode where c_fullname like ''%BRC Depression Study%'' and c_colu
mndatatype = ''N'' and c_visualattributes not like ''%H%'' group by c_name, c_fu
llname order by c_fullname';                                                    
                                                                                
  execute immediate(dynamicSQL || ' UNION ALL ' || dynamicsql2);                
                                                                                
  dbms_output.put_line(dynamicSQL);-- || ' UNION ALL ' || dynamicsql2);         
  dbms_output.put_line('UNION ALL');                                            
  dbms_output.put_line(dynamicsql2);                                            
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_WRITE_INFO"                           
(                                                                               
	jobId IN NUMBER,                                                               
	messageID IN NUMBER ,                                                          
	messageLine IN NUMBER,                                                         
	messageProcedure IN VARCHAR2 ,                                                 
	infoMessage IN VARCHAR2                                                        
)                                                                               
AS                                                                              
                                                                                
BEGIN                                                                           
                                                                                
	insert into cz_job_message                                                     
    (                                                                           
      job_id,                                                                   
      message_id,                                                               
      message_line,                                                             
      message_procedure,                                                        
      info_message,                                                             
      seq_id                                                                    
    )                                                                           
	select                                                                         
      jobID,                                                                    
      messageID,                                                                
      messageLine,                                                              
      messageProcedure,                                                         
      infoMessage,                                                              
      max(seq_id)                                                               
  from                                                                          
    cz_job_audit                                                                
  where                                                                         
    job_id = jobID;                                                             
                                                                                
  COMMIT;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_WRITE_ERROR"                          
(                                                                               
	jobId IN NUMBER,                                                               
	errorNumber IN NUMBER ,                                                        
	errorMessage IN VARCHAR2 ,                                                     
	errorStack IN VARCHAR2,                                                        
  errorBackTrace IN VARCHAR2                                                    
)                                                                               
AS                                                                              
                                                                                
BEGIN                                                                           
                                                                                
	insert into cz_job_error(                                                      
		job_id,                                                                       
		error_number,                                                                 
		error_message,                                                                
		error_stack,                                                                  
    error_backtrace,                                                            
		seq_id)                                                                       
	select                                                                         
		jobID,                                                                        
		errorNumber,                                                                  
		errorMessage,                                                                 
		errorStack,                                                                   
    errorBackTrace,                                                             
		max(seq_id)                                                                   
  from                                                                          
    cz_job_audit                                                                
  where                                                                         
    job_id=jobID;                                                               
                                                                                
  COMMIT;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_WRITE_AUDIT"                          
(                                                                               
	jobId IN NUMBER,                                                               
	databaseName IN VARCHAR2 ,                                                     
	procedureName IN VARCHAR2 ,                                                    
	stepDesc IN VARCHAR2 ,                                                         
	recordsManipulated IN NUMBER,                                                  
	stepNumber IN NUMBER,                                                          
	stepStatus IN VARCHAR2                                                         
)                                                                               
AS                                                                              
  lastTime timestamp;                                                           
BEGIN                                                                           
  select max(job_date)                                                          
    into lastTime                                                               
    from cz_job_audit                                                           
    where job_id = jobID;                                                       
                                                                                
	insert 	into cz_job_audit(                                                     
		job_id,                                                                       
		database_name,                                                                
 		procedure_name,                                                              
 		step_desc,                                                                   
		records_manipulated,                                                          
		step_number,                                                                  
		step_status,                                                                  
    job_date,                                                                   
    time_elapsed_secs                                                           
	)                                                                              
	select                                                                         
 		jobId,                                                                       
		databaseName,                                                                 
		procedureName,                                                                
		stepDesc,                                                                     
		recordsManipulated,                                                           
		stepNumber,                                                                   
		stepStatus,                                                                   
    SYSTIMESTAMP,                                                               
      COALESCE(                                                                 
      EXTRACT (DAY    FROM (SYSTIMESTAMP - lastTime))*24*60*60 +                
      EXTRACT (HOUR   FROM (SYSTIMESTAMP - lastTime))*60*60 +                   
      EXTRACT (MINUTE FROM (SYSTIMESTAMP - lastTime))*60 +                      
      EXTRACT (SECOND FROM (SYSTIMESTAMP - lastTime))                           
      ,0)                                                                       
  from dual;                                                                    
                                                                                
  COMMIT;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_START_AUDIT"                          
(                                                                               
  jobName IN VARCHAR2,                                                          
  databaseName IN VARCHAR2,                                                     
  jobID OUT NUMBER                                                              
)                                                                               
AS                                                                              
BEGIN                                                                           
                                                                                
	insert into cz_job_master                                                      
		(start_date,                                                                  
		active,                                                                       
		--username,                                                                   
		--session_id,                                                                 
		database_name,                                                                
		job_name,                                                                     
		job_status)                                                                   
	VALUES(                                                                        
		SYSTIMESTAMP,                                                                 
		'Y',                                                                          
		--suser_name(),                                                               
		--@@SPID,                                                                     
		databaseName,                                                                 
		jobName,                                                                      
		'Running')                                                                    
  RETURNING job_id INTO jobID;                                                  
                                                                                
  COMMIT;                                                                       
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_INFO_HANDLER"                         
(                                                                               
	jobId IN NUMBER,                                                               
	messageID IN NUMBER ,                                                          
	messageLine IN NUMBER,                                                         
	messageProcedure IN VARCHAR2 ,                                                 
	infoMessage IN VARCHAR2,                                                       
  stepNumber IN VARCHAR2                                                        
)                                                                               
AS                                                                              
  databaseName VARCHAR2(100);                                                   
BEGIN                                                                           
                                                                                
	select                                                                         
    database_name INTO databasename                                             
  from                                                                          
    cz_job_master                                                               
	where                                                                          
    job_id=jobID;                                                               
                                                                                
  cz_write_audit( jobID, databaseName, messageProcedure, 'Step contains more det
ails', 0, stepNumber, 'Information' );                                          
                                                                                
  cz_write_info(jobID, messageID, messageLine, messageProcedure, infoMessage ); 
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_ERROR_HANDLER"                        
(                                                                               
  jobID NUMBER,                                                                 
  procedureName NVARCHAR2                                                       
)                                                                               
AS                                                                              
  databaseName NVARCHAR2(100);                                                  
	errorNumber NUMBER(18,0);                                                      
	errorMessage NVARCHAR2(1000);                                                  
  errorStack NVARCHAR2(4000);                                                   
  errorBackTrace NVARCHAR2(4000);                                               
	stepNo NUMBER(18,0);                                                           
                                                                                
BEGIN                                                                           
  --Get DB Name                                                                 
	select database_name INTO databaseName                                         
		from cz_job_master                                                            
		where job_id=jobID;                                                           
  --Get Latest Step                                                             
	select max(step_number) into stepNo from cz_job_audit where job_id = jobID;    
                                                                                
  --Get all error info                                                          
  errorNumber := SQLCODE;                                                       
  errorMessage := SQLERRM;                                                      
  errorStack := dbms_utility.format_error_stack;                                
  errorBackTrace := dbms_utility.format_error_backtrace;                        
                                                                                
  --Update the audit step for the error                                         
  cz_write_audit(jobID, databaseName,procedureName, 'Job Failed: See error log f
or details',SQL%ROWCOUNT, stepNo, 'FAIL');                                      
                                                                                
                                                                                
  --write out the error info                                                    
  cz_write_error(jobID, errorNumber, errorMessage, errorStack, errorBackTrace); 
                                                                                
END;                                                                            
	                                                                               
	                                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_END_AUDIT"                            
(                                                                               
  jobID NUMBER,                                                                 
  jobStatus VARCHAR2                                                            
)                                                                               
AS                                                                              
                                                                                
  endDate timestamp;                                                            
                                                                                
BEGIN                                                                           
                                                                                
  endDate := systimestamp;                                                      
                                                                                
	update cz_job_master                                                           
		set                                                                           
			active='N',                                                                  
			end_date = endDate,                                                          
      time_elapsed_secs =                                                       
      EXTRACT (DAY    FROM (endDate - START_DATE))*24*60*60 +                   
      EXTRACT (HOUR   FROM (endDate - START_DATE))*60*60 +                      
      EXTRACT (MINUTE FROM (endDate - START_DATE))*60 +                         
      EXTRACT (SECOND FROM (endDate - START_DATE)),                             
			job_status = jobStatus		                                                     
		where active='Y'                                                              
		and job_id=jobID;                                                             
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZ_AUDIT_EXAMPLE"                        
(                                                                               
  currentJobID NUMBER                                                           
)                                                                               
AS                                                                              
  --Audit variables                                                             
  newJobFlag INTEGER(1);                                                        
  databaseName VARCHAR(100);                                                    
  procedureName VARCHAR(100);                                                   
  jobID number(18,0);                                                           
BEGIN                                                                           
  --Set Audit Parameters                                                        
  newJobFlag := 0; -- False (Default)                                           
  jobID := currentJobID;                                                        
                                                                                
  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;  
  procedureName := $$PLSQL_UNIT;                                                
                                                                                
  --Audit JOB Initialization                                                    
  --If Job ID does not exist, then this is a single procedure run and we need to
 create it                                                                      
  IF(jobID IS NULL or jobID < 1)                                                
  THEN                                                                          
    newJobFlag := 1; -- True                                                    
    dbms_output.put_line('Here' || to_char(jobID));                             
    cz_start_audit (procedureName, databaseName, jobID);                        
    dbms_output.put_line('Here2' || to_char(jobID));                            
  END IF;                                                                       
                                                                                
  --Step Audit                                                                  
  cz_write_audit (jobID, databaseName, procedureName, 'Start loading some data',
 SQL%ROWCOUNT, 1, 'PASS');                                                      
                                                                                
  update cz_job_master set job_name = job_name;                                 
                                                                                
  --Step Audit                                                                  
  cz_write_audit (jobID, databaseName, procedureName, '# of rows on the cz_job_m
aster table', SQL%ROWCOUNT, 2, 'PASS');                                         
                                                                                
                                                                                
  cz_write_info (jobID, 1, 39, procedureName, 'Writing a message');             
                                                                                
                                                                                
                                                                                
  --invalid statement                                                           
  insert into az_test_run(dw_version_id)                                        
    values('a');                                                                
                                                                                
                                                                                
  --Step Audit                                                                  
  cz_write_audit (jobID, databaseName, procedureName, 'Should have caused an err
or!', SQL%ROWCOUNT, 3, 'PASS');                                                 
                                                                                
                                                                                
  ---Cleanup OVERALL JOB if this proc is being run standalone                   
  IF newJobFlag = 1                                                             
  THEN                                                                          
    cz_end_audit (jobID, 'SUCCESS');                                            
  END IF;                                                                       
                                                                                
  EXCEPTION                                                                     
  WHEN OTHERS THEN                                                              
    --Handle errors.                                                            
    cz_error_handler (jobID, procedureName);                                    
    --End Proc                                                                  
    cz_end_audit (jobID, 'FAIL');                                               
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_WRITE_INFO"                          
(                                                                               
  v_job_id IN NUMBER DEFAULT NULL ,                                             
  v_message_id IN NUMBER DEFAULT NULL ,                                         
  v_message_line IN NUMBER DEFAULT NULL ,                                       
  v_message_procedure IN VARCHAR2 DEFAULT NULL ,                                
  v_info_message IN VARCHAR2 DEFAULT NULL                                       
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_WRITE_INFO                                                         
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
BEGIN                                                                           
                                                                                
   INSERT INTO cz_job_message                                                   
     ( job_id, message_id, message_line, message_procedure, info_message )      
     VALUES ( v_job_id, v_message_id, v_message_line, v_message_procedure, v_inf
o_message );                                                                    
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_WRITE_ERROR" (JOBID IN NUMBER,       
	ERRORNUMBER IN NUMBER ,                                                        
	ERRORMESSAGE IN VARCHAR2 ,                                                     
	ERRORSTACK IN VARCHAR2,                                                        
  ERRORBACKTRACE IN VARCHAR2)                                                   
  AUTHID CURRENT_USER                                                           
AS                                                                              
 PRAGMA AUTONOMOUS_TRANSACTION;                                                 
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_WRITE_ERROR                                                        
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
BEGIN                                                                           
                                                                                
	INSERT INTO CZ_JOB_ERROR(                                                      
		JOB_ID,                                                                       
		ERROR_NUMBER,                                                                 
		ERROR_MESSAGE,                                                                
		ERROR_STACK,                                                                  
    ERROR_BACKTRACE,                                                            
		SEQ_ID)                                                                       
	SELECT                                                                         
		JOBID,                                                                        
		ERRORNUMBER,                                                                  
		ERRORMESSAGE,                                                                 
		ERRORSTACK,                                                                   
    ERRORBACKTRACE,                                                             
		MAX(SEQ_ID)                                                                   
  FROM                                                                          
    CZ_JOB_AUDIT                                                                
  WHERE                                                                         
    JOB_ID=JOBID;                                                               
                                                                                
  COMMIT;                                                                       
                                                                                
EXCEPTION                                                                       
    WHEN OTHERS THEN ROLLBACK;                                                  
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_WRITE_AUDIT" (JOBID IN NUMBER,       
	DATABASENAME IN VARCHAR2 ,                                                     
	PROCEDURENAME IN VARCHAR2 ,                                                    
	STEPDESC IN VARCHAR2 ,                                                         
	RECORDSMANIPULATED IN NUMBER,                                                  
	STEPNUMBER IN NUMBER,                                                          
	STEPSTATUS IN VARCHAR2)                                                        
  AUTHID CURRENT_USER                                                           
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_WRITE_AUDIT                                                        
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
 PRAGMA AUTONOMOUS_TRANSACTION;                                                 
                                                                                
  LASTTIME TIMESTAMP;                                                           
  v_version_id NUMBER;                                                          
                                                                                
BEGIN                                                                           
  SELECT MAX(JOB_DATE)                                                          
    INTO LASTTIME                                                               
    FROM CZ_JOB_AUDIT                                                           
    WHERE JOB_ID = JOBID;                                                       
                                                                                
	INSERT 	INTO CZ_JOB_AUDIT(                                                     
		JOB_ID,                                                                       
		DATABASE_NAME,                                                                
 		PROCEDURE_NAME,                                                              
 		STEP_DESC,                                                                   
		RECORDS_MANIPULATED,                                                          
		STEP_NUMBER,                                                                  
		STEP_STATUS,                                                                  
    JOB_DATE,                                                                   
    TIME_ELAPSED_SECS                                                           
	)                                                                              
	SELECT                                                                         
 		JOBID,                                                                       
		DATABASENAME,                                                                 
		PROCEDURENAME,                                                                
		STEPDESC,                                                                     
		RECORDSMANIPULATED,                                                           
		STEPNUMBER,                                                                   
		STEPSTATUS,                                                                   
    SYSTIMESTAMP,                                                               
      COALESCE(                                                                 
      EXTRACT (DAY    FROM (SYSTIMESTAMP - LASTTIME))*24*60*60 +                
      EXTRACT (HOUR   FROM (SYSTIMESTAMP - LASTTIME))*60*60 +                   
      EXTRACT (MINUTE FROM (SYSTIMESTAMP - LASTTIME))*60 +                      
      EXTRACT (SECOND FROM (SYSTIMESTAMP - LASTTIME))                           
      ,0)                                                                       
  FROM DUAL;                                                                    
                                                                                
  COMMIT;                                                                       
                                                                                
EXCEPTION                                                                       
    WHEN OTHERS THEN ROLLBACK;                                                  
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_TABLE_PROFILER"                      
(                                                                               
  V_TABLE in varchar2 default null ,                                            
  NBRROWS IN NUMBER DEFAULT 100                                                 
)                                                                               
AS                                                                              
   /*                                                                           
   	file: czx_table_profiler.sql                                                
   	desc: Profiles the data and structure of a specific table.                  
   	KCR@20100614 - Created Script                                               
   	Copyright Ac 2010 Recombinant Data Corp                                     
   	*/                                                                          
   v_columnName VARCHAR2(250);                                                  
   v_dataType VARCHAR2(250);                                                    
   v_maxLength VARCHAR2(250);                                                   
   v_precision VARCHAR2(250);                                                   
   v_scale VARCHAR2(250);                                                       
   v_dynamicSQL VARCHAR2(8000);                                                 
   v_dynamicCursor VARCHAR2(8000);                                              
   V_VIEWNAME varchar2(250);                                                    
   RCOUNT integer ;                                                             
                                                                                
                                                                                
                                                                                
   -- Converting data to varchar for dynamic scripts                            
   v_v_record_sample_percent VARCHAR2(3);                                       
                                                                                
   cursor ProfileTable is                                                       
      select COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE    
      from user_tab_columns                                                     
      where table_name = v_table and column_name not in                         
            (select column_name from cz_data_profile_column_exclusi where table_
name = v_table )                                                                
      order by column_name;                                                     
                                                                                
-- Can be 1 to 100% (Default is 100)                                            
begin                                                                           
                                                                                
  v_viewName := 'xxx_' || v_table || '_view' ;                                  
                                                                                
   --Building a View to use a sample of data                                    
   v_dynamicSQL := 'create or replace view ' || v_viewName || ' as' ||          
                  ' select  *   from ' || V_TABLE || ' WHERE ROWNUM < ' || NBRRO
WS ;                                                                            
   dbms_output.put_line(v_dynamicSQL);                                          
   EXECUTE IMMEDIATE(v_dynamicSQL);                                             
                                                                                
                                                                                
   --Delete the existing stats on the tables                                    
   DELETE CZ_DATA_PROFILE_STATS WHERE table_name = v_table;                     
                                                                                
   --Delete the existing stats for this table                                   
   DELETE CZ_DATA_PROFILE_COLUMN_SAMPLE  WHERE table_name = v_table;            
                                                                                
   OPEN ProfileTable;                                                           
   FETCH ProfileTable INTO v_columnName,v_dataType,v_maxLength,v_precision,v_sca
le;                                                                             
   WHILE ProfileTable%FOUND                                                     
   LOOP                                                                         
                                                                                
      BEGIN                                                                     
         --Get a count of Null values or blank values                           
         v_dynamicSQL := 'INSERT INTO CZ_DATA_PROFILE_STATS' || ' (table_name, c
olumn_name, data_type, column_length, column_precision, column_scale, null_count
)' || ' select ''' || v_table || ''', ''' || v_columnName || ''', ''' || v_dataT
ype || ''', ' || v_maxLength || ', ' || v_precision || ', ' || v_scale || ', cou
nt(*)' || ' from ' || v_viewName || ' where ' || v_columnName || ' is null or lt
rim(rtrim(' || v_columnName || ')) = ''''' ;                                    
         DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                    
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --Get a count of Non Null values                                       
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set non_null_count 
= (' || ' select count(*)' || ' from ' || v_viewName || ' where ' || v_columnNam
e || ' is not null AND ltrim(rtrim(' || v_columnName || ')) != '''')' || ' where
 table_name = ''' || v_table || '''' || ' and column_name = ''' || v_columnName 
|| '''' ;                                                                       
         DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                    
                                                                                
         EXECUTE IMMEDIATE (v_dynamicSQL);                                      
                                                                                
         --get a count of Distinct Values                                       
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set distinct_count 
= (' || ' select count(distinct ' || v_columnName || ')' || ' from ' || v_viewNa
me || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_columnNa
me || ')) != '''')' || ' where table_name = ''' || v_table || '''' || ' and colu
mn_name = ''' || v_columnName || '''' ;                                         
          DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                   
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --get max length                                                       
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set max_length = ('
 || ' select max(len(ltrim(rtrim(' || v_columnName || '))))' || ' from ' || v_vi
ewName || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_colu
mnName || ')) != '''')' || ' where table_name = ''' || v_table || '''' || ' and 
column_name = ''' || v_columnName || '''' ;                                     
         EXECUTE IMMEDIATE (v_dynamicSQL);                                      
                                                                                
         --get min length                                                       
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set min_length = ('
 || ' select min(len(ltrim(rtrim(' || v_columnName || '))))' || ' from ' || v_vi
ewName || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_colu
mnName || ')) != '''')' || ' where table_name = ''' || v_table || '''' || ' and 
column_name = ''' || v_columnName || '''' ;                                     
         DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                    
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --get max length value                                                 
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set max_length_valu
e = (' || ' select top 1 ltrim(rtrim(' || v_columnName || '))' || ' from ' || v_
viewName || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_co
lumnName || ')) != ''''' || ' and len(ltrim(rtrim(' || v_columnName || '))) = CZ
_DATA_PROFILE_STATS.max_length)' || ' where table_name = ''' || v_table || '''' 
|| ' and column_name = ''' || v_columnName || '''' ;                            
         DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                    
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --get min length value                                                 
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set min_length_valu
e = (' || ' select top 1 ltrim(rtrim(' || v_columnName || '))' || ' from ' || v_
viewName || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_co
lumnName || ')) != ''''' || ' and len(ltrim(rtrim(' || v_columnName || '))) = CZ
_DATA_PROFILE_STATS.min_length)' || ' where table_name = ''' || v_table || '''' 
|| ' and column_name = ''' || v_columnName || '''' ;                            
          DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                   
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --get First value when sorted                                          
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set first_value = (
' || ' select top 1 ltrim(rtrim(' || v_columnName || '))' || ' from ' || v_viewN
ame || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_columnN
ame || ')) != ''''' || ' order by ltrim(rtrim(' || v_columnName || ')))' || ' wh
ere table_name = ''' || v_table || '''' || ' and column_name = ''' || v_columnNa
me || '''' ;                                                                    
          DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                   
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         --get last values when sorted                                          
         v_dynamicSQL := 'UPDATE CZ_DATA_PROFILE_STATS' || ' set last_value = ('
 || ' select top 1 ltrim(rtrim(' || v_columnName || '))' || ' from ' || v_viewNa
me || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' || v_columnNa
me || ')) != ''''' || ' order by ltrim(rtrim(' || v_columnName || '))' || ' desc
)' || ' where table_name = ''' || v_table || '''' || ' and column_name = ''' || 
v_columnName || '''' ;                                                          
          DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                   
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         -- Get the top 250 values and the count for each column                
         v_dynamicSQL := 'INSERT INTO CZ_DATA_PROFILE_COLUMN_SAMPLE' || ' (table
_name, column_name, value, count)' || ' select * ''' || v_table || ''', ''' || v
_columnName || ''', ltrim(rtrim(' || v_columnName || ')),  count(*)' || ' from '
 || v_viewName || ' where ' || v_columnName || ' is not null and ltrim(rtrim(' |
| v_columnName || ')) != ''''' || ' and ' || v_columnName || ' not like ''%times
tamp%''' || ' and ' || v_columnName || ' not like ''%_by%''' || ' group by ltrim
(rtrim(' || v_columnName || '))' ;                                              
          DBMS_OUTPUT.PUT_LINE(V_DYNAMICSQL);                                   
          EXECUTE IMMEDIATE (v_dynamicSQL);                                     
                                                                                
         FETCH ProfileTable INTO v_columnName,v_dataType,v_maxLength,v_precision
,v_scale;                                                                       
      END;                                                                      
   END LOOP;                                                                    
   CLOSE ProfileTable;                                                          
                                                                                
   --drop temporary view                                                        
   v_dynamicSQL := 'drop view ' || v_viewName ;                                 
   EXECUTE IMMEDIATE (v_dynamicSQL);                                            
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_START_AUDIT"                         
(V_JOB_NAME IN VARCHAR2 DEFAULT NULL ,                                          
  V_DATABASE_NAME IN VARCHAR2 DEFAULT NULL ,                                    
  V_JOB_ID OUT NUMBER)                                                          
  AUTHID CURRENT_USER                                                           
IS                                                                              
  PRAGMA AUTONOMOUS_TRANSACTION;                                                
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_START_AUDIT                                                        
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------                                                                          
                                                                                
BEGIN                                                                           
   INSERT INTO CZ_JOB_MASTER                                                    
     ( START_DATE,                                                              
		ACTIVE,                                                                       
		USERNAME,                                                                     
		SESSION_ID,                                                                   
		DATABASE_NAME,                                                                
		JOB_NAME,                                                                     
		JOB_STATUS )                                                                  
     VALUES (                                                                   
		SYSDATE,                                                                      
		'Y',                                                                          
		USER,                                                                         
		UID,                                                                          
		V_DATABASE_NAME,                                                              
		V_JOB_NAME,                                                                   
		'Running' )                                                                   
                                                                                
	RETURNING JOB_ID INTO V_JOB_ID;                                                
	                                                                               
	COMMIT;                                                                        
                                                                                
EXCEPTION                                                                       
    WHEN OTHERS THEN ROLLBACK;                                                  
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_RUN_TEST_CATEGORY"                   
(                                                                               
  V_TEST_CATEGORY_ID	number                                                     
  ,study_id varchar2                                                            
)                                                                               
AS                                                                              
	--	Procedure to run one test in CZ_TEST	                                       
	--	JEA@20111019	New                                                            
	--	Define the abstract result set record                                       
	                                                                               
	runID			number(18,0);                                                          
	RUNDATE			date;                                                                
  V_NAMEID    number(18,0);                                                     
  currentRunID 			NUMBER;                                                       
	                                                                               
                                                                                
  CURSOR C_TEST IS                                                              
  select distinct                                                               
         TEST_ID                                                                
   from  CZ_TEST a                                                              
   where TEST_CATEGORY_ID = V_TEST_CATEGORY_ID;                                 
                                                                                
BEGIN                                                                           
     select sysdate into runDate from dual;                                     
		                                                                              
		--	Initialize runId if not passed as parameter                                
		                                                                              
		runId := currentRunId;                                                        
		                                                                              
		if (runId is null or runId < 0) then                                          
			select seq_cz.nextval into runId from dual;                                  
		end if;                                                                       
                                                                                
                                                                                
    OPEN C_TEST;                                                                
    FETCH C_TEST INTO V_NameID;                                                 
                                                                                
    WHILE C_TEST%FOUND                                                          
			LOOP                                                                         
        begin                                                                   
        CZX_RUN_ONE_TEST(V_TEST_CATEGORY_ID,V_NameID,Runid);                    
        END;                                                                    
                                                                                
       --DBMS_OUTPUT.PUT_LINE(;                                                 
       FETCH C_TEST INTO V_NAMEID;                                              
       END LOOP;                                                                
       CLOSE C_TEST;                                                            
                                                                                
                                                                                
		                                                                              
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_RUN_ONE_TEST"                        
(                                                                               
  v_test_category_id	number                                                     
 ,v_test_id				number                                                           
 ,currentRunID 			NUMBER := null                                                
)                                                                               
AS                                                                              
	--	Procedure to run one test in CZ_TEST                                        
	                                                                               
	--	JEA@20111019	New                                                            
                                                                                
	--	Define the abstract result set record                                       
	                                                                               
	TYPE r_type IS RECORD (                                                        
		rtn_text          VARCHAR2 (2000),                                            
		rtn_nbr           integer                                                     
	);                                                                             
	                                                                               
	--	Define the abstract result set table                                        
	TYPE tr_type IS TABLE OF r_type;                                               
                                                                                
	--	Define the result set                                                       
	                                                                               
	rtn_array tr_type;                                                             
                                                                                
	--	Variables                                                                   
	                                                                               
	testTable		varchar2(2000);                                                     
	testSQL   		varchar2(2000);                                                    
	tableType		varchar2(2000);                                                     
	extrnlLocation	varchar2(2000);                                                 
	runID			number(18,0);                                                          
	runDate			date;                                                                
	                                                                               
	BEGIN	                                                                         
	                                                                               
		--	Initialize runDate                                                         
		                                                                              
		select sysdate into runDate from dual;                                        
		                                                                              
		--	Initialize runId if not passed as parameter                                
		                                                                              
		runId := currentRunId;                                                        
		                                                                              
		if (runId is null or runId < 0) then                                          
			select seq_cz.nextval into runId from dual;                                  
		end if;                                                                       
		                                                                              
		--	Get information on test from CZ_TEST                                       
		                                                                              
		select test_table                                                             
			  ,test_sql                                                                  
			  ,nvl(table_type,'REGULAR') as table_type                                   
		into testTable                                                                
			,testSQL                                                                     
			,tableType                                                                   
		from cz_test                                                                  
		where test_id = v_test_id;                                                    
		                                                                              
		if upper(tableType) = 'EXTERNAL' then                                         
			select location into extrnlLocation                                          
			from all_external_locations                                                  
			where table_name = testTable;                                                
		else                                                                          
			extrnlLocation := '';                                                        
		end if;                                                                       
                                                                                
	--	testSQL := 'Select  ' || '''' || 'x' || '''' || ' as rtn_value, count(distin
ct site_id || subject_id) from clinical_data_extrnl';                           
                                                                                
		execute immediate(testSQL) BULK COLLECT INTO rtn_array;                       
                                                                                
		for i in rtn_array.first .. rtn_array.last                                    
		loop                                                                          
		--	dbms_output.put_line(rtn_array(i).rtn_text || ' ' || to_char(rtn_array(i).r
tn_nbr));                                                                       
			                                                                             
			if (rtn_array(i).rtn_text is not null) then                                  
				insert into cz_test_result                                                  
				(test_id, test_result_text, test_result_nbr, test_run_id, external_location,
 run_date)                                                                      
				select v_test_id                                                            
					  ,nullif(upper(rtn_array(i).rtn_text),'X')                                
					  ,rtn_array(i).rtn_nbr                                                    
					  ,runId                                                                   
					  ,extrnlLocation                                                          
					  ,runDate                                                                 
				from dual;                                                                  
			end if;                                                                      
			                                                                             
		end loop;                                                                     
	                                                                               
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_INFO_HANDLER"                        
(                                                                               
  jobId IN NUMBER,                                                              
  messageID IN NUMBER ,                                                         
  messageLine IN NUMBER,                                                        
  messageProcedure IN VARCHAR2 ,                                                
  infoMessage IN VARCHAR2,                                                      
  stepNumber IN VARCHAR2                                                        
)                                                                               
AUTHID CURRENT_USER                                                             
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_INFO_HANDLER                                                       
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------	                                                                         
  databaseName VARCHAR2(100);                                                   
BEGIN                                                                           
                                                                                
  select                                                                        
    database_name INTO databasename                                             
  from                                                                          
    cz_job_master                                                               
  where                                                                         
    job_id=jobID;                                                               
                                                                                
  czx_write_audit( jobID, databaseName, messageProcedure, 'Step contains more de
tails', 0, stepNumber, 'Information' );                                         
                                                                                
  czx_write_info(jobID, messageID, messageLine, messageProcedure, infoMessage );
                                                                                
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_ERROR_HANDLER" (JOBID NUMBER,        
	PROCEDURENAME NVARCHAR2)                                                       
  AUTHID CURRENT_USER                                                           
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_ERROR_HANDLER                                                      
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------	                                                                         
	DATABASENAME NVARCHAR2(100);                                                   
	ERRORNUMBER NUMBER(18,0);                                                      
	ERRORMESSAGE NVARCHAR2(1000);                                                  
	ERRORSTACK NVARCHAR2(4000);                                                    
	ERRORBACKTRACE NVARCHAR2(4000);                                                
	STEPNO NUMBER(18,0);                                                           
                                                                                
BEGIN                                                                           
	 --GET DB NAME                                                                 
	SELECT DATABASE_NAME                                                           
		INTO DATABASENAME                                                             
	FROM CZ_JOB_MASTER                                                             
		WHERE JOB_ID=JOBID;                                                           
                                                                                
	--GET LATEST STEP                                                              
	SELECT MAX(STEP_NUMBER)                                                        
		INTO STEPNO                                                                   
	FROM CZ_JOB_AUDIT                                                              
		WHERE JOB_ID = JOBID;                                                         
                                                                                
	--GET ALL ERROR INFO                                                           
	ERRORNUMBER := SQLCODE;                                                        
	ERRORMESSAGE := SQLERRM;                                                       
	ERRORSTACK := DBMS_UTILITY.FORMAT_ERROR_STACK;                                 
	ERRORBACKTRACE := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;                         
                                                                                
	--UPDATE THE AUDIT STEP FOR THE ERROR                                          
	CZX_WRITE_AUDIT(JOBID, DATABASENAME,PROCEDURENAME, 'Job Failed: See error log f
or details',SQL%ROWCOUNT, STEPNO, 'FAIL');                                      
                                                                                
	--WRITE OUT THE ERROR INFO                                                     
	CZX_WRITE_ERROR(JOBID, ERRORNUMBER, ERRORMESSAGE, ERRORSTACK, ERRORBACKTRACE); 
                                                                                
	--COMPLETE THE JOB WITH FAILURE                                                
	CZX_END_AUDIT (JOBID, 'FAIL');                                                 
                                                                                
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE PROCEDURE "TM_CZ"."CZX_END_AUDIT" (V_JOB_ID IN NUMBER DEFAUL
T NULL ,                                                                        
  V_JOB_STATUS IN VARCHAR2 DEFAULT 'Success')                                   
  AUTHID CURRENT_USER                                                           
AS                                                                              
--------------------------------------------------------------------------------
-----                                                                           
-- NAME: CZX_END_AUDIT                                                          
--                                                                              
-- Copyright c 2011 Recombinant Data Corp.                                      
--                                                                              
                                                                                
--------------------------------------------------------------------------------
------	                                                                         
 PRAGMA AUTONOMOUS_TRANSACTION;                                                 
                                                                                
  ENDDATE TIMESTAMP;                                                            
                                                                                
BEGIN                                                                           
  DBMS_OUTPUT.PUT_LINE('Job ID = ' || V_JOB_ID || ',' || V_JOB_STATUS);         
                                                                                
  ENDDATE := SYSTIMESTAMP;                                                      
                                                                                
	UPDATE CZ_JOB_MASTER                                                           
		SET                                                                           
			ACTIVE='N',                                                                  
			END_DATE = ENDDATE,                                                          
      TIME_ELAPSED_SECS =                                                       
      EXTRACT (DAY    FROM (ENDDATE - START_DATE))*24*60*60 +                   
      EXTRACT (HOUR   FROM (ENDDATE - START_DATE))*60*60 +                      
      EXTRACT (MINUTE FROM (ENDDATE - START_DATE))*60 +                         
      EXTRACT (SECOND FROM (ENDDATE - START_DATE)),                             
			JOB_STATUS = V_JOB_STATUS                                                    
		WHERE ACTIVE='Y'                                                              
		AND JOB_ID=V_JOB_ID;                                                          
                                                                                
COMMIT;                                                                         
                                                                                
	IF V_JOB_STATUS = 'FAIL'                                                       
	THEN                                                                           
		DBMS_OUTPUT.PUT_LINE('Job Failed - See cz_job_error for details');            
	END IF;                                                                        
                                                                                
--EXCEPTION                                                                     
--	WHEN OTHERS THEN                                                             
--	DBMS_OUTPUT.PUT_LINE('ERROR HERE!');                                         
--    ROLLBACK;                                                                 
END;                                                                            
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."EMT_TEMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999
99999999999 INCREMENT BY 1 START WITH 11621 CACHE 20 NOORDER  NOCYCLE           
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_REQUIRED_UPLOAD_FIELD_ID"  MINVALUE 1 MAXVALUE 
999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYC
LE                                                                              
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_PROBESET_ID"  MINVALUE 1 MAXVALUE 99999999 INCR
EMENT BY 1 START WITH 90676 CACHE 20 NOORDER  NOCYCLE                           
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_FORM_LAYOUT_ID"  MINVALUE 1 MAXVALUE 9999999999
99999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE        
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_TEST_CATEGORY"  MINVALUE 1 MAXVALUE 99999999
9999999999999999 INCREMENT BY 1 START WITH 5 CACHE 2 NOORDER  NOCYCLE           
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_TEST"  MINVALUE 1 MAXVALUE 99999999999999999
9999999 INCREMENT BY 1 START WITH 8259 CACHE 2 NOORDER  NOCYCLE                 
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_PERSON_ID"  MINVALUE 1 MAXVALUE 999999999999
999999999999 INCREMENT BY 1 START WITH 41 CACHE 2 NOORDER  NOCYCLE              
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_JOB_MESSAGE"  MINVALUE 1 MAXVALUE 9999999999
99999999999999 INCREMENT BY 1 START WITH 1 CACHE 2 NOORDER  NOCYCLE             
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_JOB_MASTER"  MINVALUE 1 MAXVALUE 99999999999
9999999999999 INCREMENT BY 1 START WITH 596 CACHE 2 NOORDER  NOCYCLE            
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_JOB_ID"  MINVALUE 1 MAXVALUE 999999999999999
999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE                 
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_JOB_AUDIT"  MINVALUE 1 MAXVALUE 999999999999
999999999999 INCREMENT BY 1 START WITH 128963 CACHE 2 NOORDER  NOCYCLE          
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_DW_VERSION_ID"  MINVALUE 1 MAXVALUE 99999999
9999999999999999 INCREMENT BY 1 START WITH 41 CACHE 2 NOORDER  NOCYCLE          
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_DATA_FILE"  MINVALUE 1 MAXVALUE 999999999999
999999999999 INCREMENT BY 1 START WITH 6 CACHE 2 NOORDER  NOCYCLE               
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ_DATA"  MINVALUE 1 MAXVALUE 99999999999999999
9999999 INCREMENT BY 1 START WITH 5 CACHE 2 NOORDER  NOCYCLE                    
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CZ"  MINVALUE 1 MAXVALUE 9999999999 INCREMENT B
Y 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE                                    
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."SEQ_CHILD_ROLLUP_ID"  MINVALUE 1 MAXVALUE 999999999
999999999999999999 INCREMENT BY 1 START WITH 1681 CACHE 20 NOORDER  NOCYCLE     
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."RTQASTATSLIST_TESTID_SEQ"  MINVALUE 1 MAXVALUE 9999
99999999999999999999999 INCREMENT BY 1 START WITH 80000 CACHE 20 NOORDER  NOCYCL
E                                                                               
                                                                                
                                                                                
                                                                                
   CREATE SEQUENCE  "TM_CZ"."RTQALIMITS_TESTID_SEQ"  MINVALUE 1 MAXVALUE 9999999
99999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ADD_ONTOLOGY_NODE" FOR "I2B2METADATA"."ADD_
ONTOLOGY_NODE"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_XTRIAL_NODES" FOR "TM_WZ"."WT_XTRIAL_NOD
ES"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_TRIAL_NODES" FOR "TM_WZ"."WT_TRIAL_NODES
"                                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_MRNA_PROBESET" FOR "TM_WZ"."WT_S
UBJECT_MRNA_PROBESET"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_MRNA_DATA" FOR "TM_WZ"."WT_SUBJE
CT_MRNA_DATA"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_MICROARRAY_MED" FOR "TM_WZ"."WT_
SUBJECT_MICROARRAY_MED"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_MICROARRAY_LOGS" FOR "TM_WZ"."WT
_SUBJECT_MICROARRAY_LOGS"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_MICROARRAY_CALCS" FOR "TM_WZ"."W
T_SUBJECT_MICROARRAY_CALCS"                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SUBJECT_INFO" FOR "TM_WZ"."WT_SUBJECT_IN
FO"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SNP_NODE_VALUES" FOR "TM_LZ"."WT_SNP_NOD
E_VALUES"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_SNP_NODES" FOR "TM_LZ"."WT_SNP_NODES"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_NUM_DATA_TYPES" FOR "TM_WZ"."WT_NUM_DATA
_TYPES"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_MRNA_SUBJ_SAMPLE_MAP" FOR "TM_WZ"."WT_MR
NA_SUBJ_SAMPLE_MAP"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_MRNA_NODE_VALUES" FOR "TM_WZ"."WT_MRNA_N
ODE_VALUES"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_MRNA_NODES" FOR "TM_WZ"."WT_MRNA_NODES" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_MRNA_DATA" FOR "TM_WZ"."WT_MRNA_DATA"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WT_CLINICAL_DATA_DUPS" FOR "TM_WZ"."WT_CLIN
ICAL_DATA_DUPS"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WRK_MRNA_DATA" FOR "TM_WZ"."WRK_MRNA_DATA" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."WRK_CLINICAL_DATA" FOR "TM_WZ"."WRK_CLINICA
L_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."VISIT_DIMENSION" FOR "I2B2DEMODATA"."VISIT_
DIMENSION"                                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."VCF19_GENE" FOR "TM_LZ"."VCF19_GENE"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."VCF19" FOR "TM_LZ"."VCF19"                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."VCF18_GENE" FOR "TM_LZ"."VCF18_GENE"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."VCF18" FOR "TM_LZ"."VCF18"                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."UPLOAD_STATUS" FOR "I2B2DEMODATA"."UPLOAD_S
TATUS"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."UPDATE_OBSERVATION_FACT" FOR "I2B2DEMODATA"
."UPDATE_OBSERVATION_FACT"                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_PROJECT_DISEASE" FOR "BIOMART"."TMP_PRO
JECT_DISEASE"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_PROJECT_COMPOUND" FOR "BIOMART"."TMP_PR
OJECT_COMPOUND"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_PROJECT_CATEGORY" FOR "BIOMART"."TMP_PR
OJECT_CATEGORY"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_OMICSOFT_DISEASE_M1" FOR "BIOMART"."TMP
_OMICSOFT_DISEASE_M1"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_OMICSOFT_COMPOUND" FOR "BIOMART"."TMP_O
MICSOFT_COMPOUND"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_BIO_MARKER" FOR "BIOMART"."TMP_BIO_MARK
ER"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TMP_ANALYSIS_DATA_TEA_RANK" FOR "BIOMART"."
TMP_ANALYSIS_DATA_TEA_RANK"                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TJEA_MRNA_DATA_20111020" FOR "DEAPP"."TJEA_
MRNA_DATA_20111020"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TIMERS" FOR "I2B2DEMODATA"."TIMERS"        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TESTS" FOR "BIOMART"."TESTS"               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."TABLE_ACCESS" FOR "I2B2METADATA"."TABLE_ACC
ESS"                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SYS_TEMP_FBT" FOR "BIOMART"."SYS_TEMP_FBT" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SP_XTAB" FOR "I2B2DEMODATA"."SP_XTAB"      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SOURCE_MASTER" FOR "I2B2DEMODATA"."SOURCE_M
ASTER"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SF_XTAB" FOR "I2B2DEMODATA"."SF_XTAB"      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SET_UPLOAD_STATUS" FOR "I2B2DEMODATA"."SET_
UPLOAD_STATUS"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SET_TYPE" FOR "I2B2DEMODATA"."SET_TYPE"    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SEQ_PATIENT_NUM" FOR "I2B2DEMODATA"."SEQ_PA
TIENT_NUM"                                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SCHEMES" FOR "I2B2METADATA"."SCHEMES"      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SAMPLE_CATEGORIES_EXTRNL" FOR "TM_LZ"."SAMP
LE_CATEGORIES_EXTRNL"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."SAMPLE_CATEGORIES" FOR "I2B2DEMODATA"."SAMP
LE_CATEGORIES"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."REMOVE_TEMP_TABLE" FOR "I2B2DEMODATA"."REMO
VE_TEMP_TABLE"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."RBM_DBL_COMP_QRY" FOR "DEAPP"."RBM_DBL_COMP
_QRY"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."RBM_COMPARISON_QRY" FOR "DEAPP"."RBM_COMPAR
ISON_QRY"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QUERY_GLOBAL_TEMP" FOR "I2B2DEMODATA"."QUER
Y_GLOBAL_TEMP"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QUERY1" FOR "I2B2METADATA"."QUERY1"        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_XML_RESULT" FOR "I2B2DEMODATA"."QT_XML_R
ESULT"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_QUERY_STATUS_TYPE" FOR "I2B2DEMODATA"."Q
T_QUERY_STATUS_TYPE"                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_QUERY_RESULT_TYPE" FOR "I2B2DEMODATA"."Q
T_QUERY_RESULT_TYPE"                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_QUERY_RESULT_INSTANCE" FOR "I2B2DEMODATA
"."QT_QUERY_RESULT_INSTANCE"                                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_QUERY_MASTER" FOR "I2B2DEMODATA"."QT_QUE
RY_MASTER"                                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_QUERY_INSTANCE" FOR "I2B2DEMODATA"."QT_Q
UERY_INSTANCE"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_PATIENT_SET_COLLECTION" FOR "I2B2DEMODAT
A"."QT_PATIENT_SET_COLLECTION"                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."QT_PATIENT_ENC_COLLECTION" FOR "I2B2DEMODAT
A"."QT_PATIENT_ENC_COLLECTION"                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PROVIDER_DIMENSION" FOR "I2B2DEMODATA"."PRO
VIDER_DIMENSION"                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PROTEIN_DBL_COMP_QRY" FOR "DEAPP"."PROTEIN_
DBL_COMP_QRY"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PROTEIN_COMPARISON_QRY" FOR "DEAPP"."PROTEI
N_COMPARISON_QRY"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PROJECT_INFO" FOR "BIOMART"."PROJECT_INFO" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PFIZER_SNP" FOR "TM_LZ"."PFIZER_SNP"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PATIENT_TRIAL" FOR "I2B2DEMODATA"."PATIENT_
TRIAL"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PATIENT_MAPPING" FOR "I2B2DEMODATA"."PATIEN
T_MAPPING"                                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PATIENT_DIMENSION_BKP" FOR "I2B2DEMODATA"."
PATIENT_DIMENSION_BKP"                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."PATIENT_DIMENSION" FOR "I2B2DEMODATA"."PATI
ENT_DIMENSION"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ONT_DB_LOOKUP" FOR "I2B2METADATA"."ONT_DB_L
OOKUP"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."OBSERVATION_FACT_BKP" FOR "I2B2DEMODATA"."O
BSERVATION_FACT_BKP"                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."OBSERVATION_FACT" FOR "I2B2DEMODATA"."OBSER
VATION_FACT"                                                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."NEWS_UPDATES" FOR "I2B2DEMODATA"."NEWS_UPDA
TES"                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MRNA_SUBJ_SAMPLE_MAP_EXTRNL" FOR "TM_LZ"."M
RNA_SUBJ_SAMPLE_MAP_EXTRNL"                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MRNA_DATA_EXTRNL" FOR "TM_LZ"."MRNA_DATA_EX
TRNL"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MESH_ENTRY_ALL" FOR "BIOMART"."MESH_ENTRY_A
LL"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MESH_ENTRY" FOR "BIOMART"."MESH_ENTRY"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MESH_DESCRIPTOR" FOR "BIOMART"."MESH_DESCRI
PTOR"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MESH_ALL" FOR "BIOMART"."MESH_ALL"         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."MESH" FOR "BIOMART"."MESH"                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_STUDY_METADATA_AD_HOC" FOR "TM_LZ"."
LZ_SRC_STUDY_METADATA_AD_HOC"                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_STUDY_METADATA" FOR "TM_LZ"."LZ_SRC_
STUDY_METADATA"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_SAMPLE_CATEGORIES_BKUP" FOR "TM_LZ".
"LZ_SRC_SAMPLE_CATEGORIES_BKUP"                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_SAMPLE_CATEGORIES" FOR "TM_LZ"."LZ_S
RC_SAMPLE_CATEGORIES"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_MRNA_SUBJ_SAMP_MAP" FOR "TM_LZ"."LZ_
SRC_MRNA_SUBJ_SAMP_MAP"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_MRNA_DATA" FOR "TM_LZ"."LZ_SRC_MRNA_
DATA"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_CLINICAL_DATA" FOR "TM_LZ"."LZ_SRC_C
LINICAL_DATA"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LZ_SRC_ANALYSIS_METADATA" FOR "TM_LZ"."LZ_S
RC_ANALYSIS_METADATA"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_STUDY_METADATA_AD_HOC" FOR "TM_LZ"."
LT_SRC_STUDY_METADATA_AD_HOC"                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_STUDY_METADATA" FOR "TM_LZ"."LT_SRC_
STUDY_METADATA"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_SAMPLE_CATEGORIES" FOR "TM_LZ"."LT_S
RC_SAMPLE_CATEGORIES"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_MRNA_SUBJ_SAMP_MAP" FOR "TM_LZ"."LT_
SRC_MRNA_SUBJ_SAMP_MAP"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_MRNA_DATA" FOR "TM_LZ"."LT_SRC_MRNA_
DATA"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_DEAPP_ANNOT" FOR "TM_LZ"."LT_SRC_DEA
PP_ANNOT"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."LT_SRC_CLINICAL_DATA" FOR "TM_LZ"."LT_SRC_C
LINICAL_DATA"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."JMS_USERS" FOR "I2B2DEMODATA"."JMS_USERS"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."JMS_TRANSACTIONS" FOR "I2B2DEMODATA"."JMS_T
RANSACTIONS"                                                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."JMS_SUBSCRIPTIONS" FOR "I2B2DEMODATA"."JMS_
SUBSCRIPTIONS"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."JMS_ROLES" FOR "I2B2DEMODATA"."JMS_ROLES"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."JMS_MESSAGES" FOR "I2B2DEMODATA"."JMS_MESSA
GES"                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ISNUMERIC" FOR "I2B2DEMODATA"."ISNUMERIC"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_PROVIDER_FROMTEMP" FOR "I2B2DEMODATA
"."INSERT_PROVIDER_FROMTEMP"                                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_PID_MAP_FROMTEMP" FOR "I2B2DEMODATA"
."INSERT_PID_MAP_FROMTEMP"                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_PATIENT_MAP_FROMTEMP" FOR "I2B2DEMOD
ATA"."INSERT_PATIENT_MAP_FROMTEMP"                                              
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_ENCOUNTERVISIT_FROMTEMP" FOR "I2B2DE
MODATA"."INSERT_ENCOUNTERVISIT_FROMTEMP"                                        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_EID_MAP_FROMTEMP" FOR "I2B2DEMODATA"
."INSERT_EID_MAP_FROMTEMP"                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."INSERT_CONCEPT_FROMTEMP" FOR "I2B2DEMODATA"
."INSERT_CONCEPT_FROMTEMP"                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_TAGS" FOR "I2B2METADATA"."I2B2_TAGS"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_SECURE_BK" FOR "I2B2METADATA"."I2B2_SE
CURE_BK"                                                                        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_SECURE" FOR "I2B2METADATA"."I2B2_SECUR
E"                                                                              
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_ID_SEQ" FOR "I2B2METADATA"."I2B2_ID_SE
Q"                                                                              
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_BKP" FOR "I2B2METADATA"."I2B2_BKP"    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2_BK" FOR "I2B2METADATA"."I2B2_BK"      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."I2B2" FOR "I2B2METADATA"."I2B2"            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."HILOSEQUENCES" FOR "I2B2DEMODATA"."HILOSEQU
ENCES"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."HAPLOVIEW_DATA" FOR "DEAPP"."HAPLOVIEW_DATA
"                                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."GSE_PROBESET" FOR "BIOMART"."GSE_PROBESET" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."GSE_ANALYSIS" FOR "BIOMART"."GSE_ANALYSIS" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."GENEGO_GENE_MAP" FOR "BIOMART"."GENEGO_GENE
_MAP"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ENCOUNTER_MAPPING" FOR "I2B2DEMODATA"."ENCO
UNTER_MAPPING"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DX" FOR "I2B2DEMODATA"."DX"                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DUMP_TABLE_TO_CSV" FOR "DEAPP"."DUMP_TABLE_
TO_CSV"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DIMLOADER" FOR "I2B2DEMODATA"."DIMLOADER"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_XTRIAL_PARENT_NAMES" FOR "DEAPP"."DE_XTR
IAL_PARENT_NAMES"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_XTRIAL_CHILD_MAP" FOR "DEAPP"."DE_XTRIAL
_CHILD_MAP"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_SNP_DATASET" FOR "DEAPP"."DE_SUB
JECT_SNP_DATASET"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_SAMPLE_MAPPING" FOR "DEAPP"."DE_
SUBJECT_SAMPLE_MAPPING"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_RBM_DATA" FOR "DEAPP"."DE_SUBJEC
T_RBM_DATA"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_PROTEIN_DATA" FOR "DEAPP"."DE_SU
BJECT_PROTEIN_DATA"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_MICROARRAY_MED" FOR "DEAPP"."DE_
SUBJECT_MICROARRAY_MED"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_MICROARRAY_LOGS" FOR "DEAPP"."DE
_SUBJECT_MICROARRAY_LOGS"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SUBJECT_MICROARRAY_DATA" FOR "DEAPP"."DE
_SUBJECT_MICROARRAY_DATA"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_PROBE_SORTED_DEF" FOR "DEAPP"."DE_SN
P_PROBE_SORTED_DEF"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_PROBE" FOR "DEAPP"."DE_SNP_PROBE"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_INFO" FOR "DEAPP"."DE_SNP_INFO"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_GENE_MAP" FOR "DEAPP"."DE_SNP_GENE_M
AP"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_DATA_DATASET_LOC" FOR "DEAPP"."DE_SN
P_DATA_DATASET_LOC"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_DATA_BY_PROBE" FOR "DEAPP"."DE_SNP_D
ATA_BY_PROBE"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SNP_DATA_BY_PATIENT" FOR "DEAPP"."DE_SNP
_DATA_BY_PATIENT"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_SAVED_COMPARISON" FOR "DEAPP"."DE_SAVED_
COMPARISON"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_PATHWAY_GENE" FOR "DEAPP"."DE_PATHWAY_GE
NE"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_PATHWAY" FOR "DEAPP"."DE_PATHWAY"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_MRNA_ANNOTATION" FOR "DEAPP"."DE_MRNA_AN
NOTATION"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DE_GPL_INFO" FOR "DEAPP"."DE_GPL_INFO"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DEAPP_ANNOT_EXTRNL" FOR "TM_LZ"."DEAPP_ANNO
T_EXTRNL"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DEAPP_ANNOTATION" FOR "DEAPP"."DEAPP_ANNOTA
TION"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."DATAMART_REPORT" FOR "I2B2DEMODATA"."DATAMA
RT_REPORT"                                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TREATMENT_PHASES_VIEW" FOR "BIOMART"."C
TD_TREATMENT_PHASES_VIEW"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_STATUS_VIEW" FOR "BIOMART"."CTD_TD_S
TATUS_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_SPONSOR_VIEW" FOR "BIOMART"."CTD_TD_
SPONSOR_VIEW"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_SMOKER_VIEW" FOR "BIOMART"."CTD_TD_S
MOKER_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_INCLUSION_VIEW" FOR "BIOMART"."CTD_T
D_INCLUSION_VIEW"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_EXCL_VIEW" FOR "BIOMART"."CTD_TD_EXC
L_VIEW"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_TD_DESIGN_VIEW" FOR "BIOMART"."CTD_TD_D
ESIGN_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_STUDY_DETAILS_VIEW" FOR "BIOMART"."CTD_
STUDY_DETAILS_VIEW"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_STUDY" FOR "BIOMART"."CTD_STUDY"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_STATS_VIEW" FOR "BIOMART"."CTD_STATS_VI
EW"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_SEC_ENDPTS" FOR "BIOMART"."CTD_SEC_ENDP
TS"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_SECONDARY_ENDPTS_VIEW" FOR "BIOMART"."C
TD_SECONDARY_ENDPTS_VIEW"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_RUNIN_THERAPIES_VIEW" FOR "BIOMART"."CT
D_RUNIN_THERAPIES_VIEW"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_REFERENCE_VIEW" FOR "BIOMART"."CTD_REFE
RENCE_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_QUANT_PARAMS_VIEW" FOR "BIOMART"."CTD_Q
UANT_PARAMS_VIEW"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_PULMONARY_PATH_VIEW" FOR "BIOMART"."CTD
_PULMONARY_PATH_VIEW"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_PRIOR_MED_USE_VIEW" FOR "BIOMART"."CTD_
PRIOR_MED_USE_VIEW"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_PRIMARY_ENDPTS_VIEW" FOR "BIOMART"."CTD
_PRIMARY_ENDPTS_VIEW"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_PRIMARY_ENDPTS" FOR "BIOMART"."CTD_PRIM
ARY_ENDPTS"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_INCLUSION_CRITERIA" FOR "BIOMART"."CTD_
INCLUSION_CRITERIA"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_FULL_SEARCH_VIEW" FOR "BIOMART"."CTD_FU
LL_SEARCH_VIEW"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_FULL_CLINICAL_ENDPTS_VIEW" FOR "BIOMART
"."CTD_FULL_CLINICAL_ENDPTS_VIEW"                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_FULL" FOR "BIOMART"."CTD_FULL"         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EXPR_SOURCE_VIEW" FOR "BIOMART"."CTD_EX
PR_SOURCE_VIEW"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EXPR_BIO_VIEW" FOR "BIOMART"."CTD_EXPR_
BIO_VIEW"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EXPR_BASELINE_VIEW" FOR "BIOMART"."CTD_
EXPR_BASELINE_VIEW"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EXPR_AFTER_VIEW" FOR "BIOMART"."CTD_EXP
R_AFTER_VIEW"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EXPERIMENTS_VIEW" FOR "BIOMART"."CTD_EX
PERIMENTS_VIEW"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_EVENTS_VIEW" FOR "BIOMART"."CTD_EVENTS_
VIEW"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_DRUG_INHIBITOR_VIEW" FOR "BIOMART"."CTD
_DRUG_INHIBITOR_VIEW"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_DRUG_INHIB" FOR "BIOMART"."CTD_DRUG_INH
IB"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_DRUG_EFFECTS_VIEW" FOR "BIOMART"."CTD_D
RUG_EFFECTS_VIEW"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_DISEASE" FOR "BIOMART"."CTD_DISEASE"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_CLINICAL_CHARS_VIEW" FOR "BIOMART"."CTD
_CLINICAL_CHARS_VIEW"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_CELL_INFO_VIEW" FOR "BIOMART"."CTD_CELL
_INFO_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_BIOMARKER_VIEW" FOR "BIOMART"."CTD_BIOM
ARKER_VIEW"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_BIOMARKER" FOR "BIOMART"."CTD_BIOMARKER
"                                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_ARM_VIEW" FOR "BIOMART"."CTD_ARM_VIEW" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD_ALLOWED_MEDS_TREATMENT" FOR "BIOMART"."
CTD_ALLOWED_MEDS_TREATMENT"                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD2_TRIAL_DETAILS" FOR "BIOMART"."CTD2_TRI
AL_DETAILS"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD2_STUDY" FOR "BIOMART"."CTD2_STUDY"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD2_INHIB_DETAILS" FOR "BIOMART"."CTD2_INH
IB_DETAILS"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD2_DISEASE" FOR "BIOMART"."CTD2_DISEASE" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CTD2_CLIN_INHIB_EFFECT" FOR "BIOMART"."CTD2
_CLIN_INHIB_EFFECT"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_VISIT_TABLE" FOR "I2B2DEMODATA"
."CREATE_TEMP_VISIT_TABLE"                                                      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_TABLE" FOR "I2B2DEMODATA"."CREA
TE_TEMP_TABLE"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_PROVIDER_TABLE" FOR "I2B2DEMODA
TA"."CREATE_TEMP_PROVIDER_TABLE"                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_PID_TABLE" FOR "I2B2DEMODATA"."
CREATE_TEMP_PID_TABLE"                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_PATIENT_TABLE" FOR "I2B2DEMODAT
A"."CREATE_TEMP_PATIENT_TABLE"                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_EID_TABLE" FOR "I2B2DEMODATA"."
CREATE_TEMP_EID_TABLE"                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CREATE_TEMP_CONCEPT_TABLE" FOR "I2B2DEMODAT
A"."CREATE_TEMP_CONCEPT_TABLE"                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CRC_DB_LOOKUP" FOR "I2B2DEMODATA"."CRC_DB_L
OOKUP"                                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."COUNTER" FOR "I2B2DEMODATA"."COUNTER"      
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_ID" FOR "I2B2DEMODATA"."CONCEPT_ID"
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_DIMENSION_BKP" FOR "I2B2DEMODATA"."
CONCEPT_DIMENSION_BKP"                                                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_DIMENSION_BK" FOR "I2B2DEMODATA"."C
ONCEPT_DIMENSION_BK"                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_DIMENSION" FOR "I2B2DEMODATA"."CONC
EPT_DIMENSION"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_COUNTS_BKP" FOR "I2B2DEMODATA"."CON
CEPT_COUNTS_BKP"                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_COUNTS_BK" FOR "I2B2DEMODATA"."CONC
EPT_COUNTS_BK"                                                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CONCEPT_COUNTS" FOR "I2B2DEMODATA"."CONCEPT
_COUNTS"                                                                        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CODE_LOOKUP" FOR "I2B2DEMODATA"."CODE_LOOKU
P"                                                                              
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."CLINICAL_DATA_EXTRNL" FOR "TM_LZ"."CLINICAL
_DATA_EXTRNL"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_TAXONOMY" FOR "BIOMART"."BIO_TAXONOMY" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_SUBJECT" FOR "BIOMART"."BIO_SUBJECT"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_STATS_EXP_MARKER" FOR "BIOMART"."BIO_ST
ATS_EXP_MARKER"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_SAMPLE" FOR "BIOMART"."BIO_SAMPLE"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_PATIENT_EVENT_ATTR" FOR "BIOMART"."BIO_
PATIENT_EVENT_ATTR"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_PATIENT_EVENT" FOR "BIOMART"."BIO_PATIE
NT_EVENT"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_PATIENT" FOR "BIOMART"."BIO_PATIENT"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_OBSERVATION" FOR "BIOMART"."BIO_OBSERVA
TION"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_MARKER_EXP_ANALYSIS_MV" FOR "BIOMART"."
BIO_MARKER_EXP_ANALYSIS_MV"                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_MARKER_CORREL_MV" FOR "BIOMART"."BIO_MA
RKER_CORREL_MV"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_MARKER" FOR "BIOMART"."BIO_MARKER"     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_MAKRER_BK" FOR "BIOMART"."BIO_MAKRER_BK
"                                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_SUM_DATA" FOR "BIOMART"."BIO_LIT_SU
M_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_REF_DATA" FOR "BIOMART"."BIO_LIT_RE
F_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_PE_DATA" FOR "BIOMART"."BIO_LIT_PE_
DATA"                                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_MODEL_DATA" FOR "BIOMART"."BIO_LIT_
MODEL_DATA"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_INT_MODEL_MV" FOR "BIOMART"."BIO_LI
T_INT_MODEL_MV"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_INT_DATA" FOR "BIOMART"."BIO_LIT_IN
T_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_INH_DATA" FOR "BIOMART"."BIO_LIT_IN
H_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_AMD_DATA" FOR "BIOMART"."BIO_LIT_AM
D_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_LIT_ALT_DATA" FOR "BIOMART"."BIO_LIT_AL
T_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_EXPERIMENT" FOR "BIOMART"."BIO_EXPERIME
NT"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DISEASE1" FOR "BIOMART"."BIO_DISEASE1" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DISEASE" FOR "BIOMART"."BIO_DISEASE"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_UID" FOR "BIOMART"."BIO_DATA_UID" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_TAXONOMY" FOR "BIOMART"."BIO_DATA_
TAXONOMY"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_PLATFORM" FOR "BIOMART"."BIO_DATA_
PLATFORM"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_OMIC_MARKER" FOR "BIOMART"."BIO_DA
TA_OMIC_MARKER"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_OBSERVATION" FOR "BIOMART"."BIO_DA
TA_OBSERVATION"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_LITERATURE" FOR "BIOMART"."BIO_DAT
A_LITERATURE"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_EXT_CODE" FOR "BIOMART"."BIO_DATA_
EXT_CODE"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_DISEASE" FOR "BIOMART"."BIO_DATA_D
ISEASE"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_CORREL_DESCR" FOR "BIOMART"."BIO_D
ATA_CORREL_DESCR"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_CORRELATION" FOR "BIOMART"."BIO_DA
TA_CORRELATION"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_COMPOUND" FOR "BIOMART"."BIO_DATA_
COMPOUND"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_DATA_ATTRIBUTE" FOR "BIOMART"."BIO_DATA
_ATTRIBUTE"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CURATION_DATASET" FOR "BIOMART"."BIO_CU
RATION_DATASET"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CURATED_DATA" FOR "BIOMART"."BIO_CURATE
D_DATA"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CONTENT_REPOSITORY" FOR "BIOMART"."BIO_
CONTENT_REPOSITORY"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CONTENT_REFERENCE" FOR "BIOMART"."BIO_C
ONTENT_REFERENCE"                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CONTENT" FOR "BIOMART"."BIO_CONTENT"   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CONCEPT_CODE" FOR "BIOMART"."BIO_CONCEP
T_CODE"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_COMPOUND" FOR "BIOMART"."BIO_COMPOUND" 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CLINICAL_TRIAL_DESIGN" FOR "BIOMART"."B
IO_CLINICAL_TRIAL_DESIGN"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CLINICAL_TRIAL" FOR "BIOMART"."BIO_CLIN
ICAL_TRIAL"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CLINC_TRIAL_TIME_PT" FOR "BIOMART"."BIO
_CLINC_TRIAL_TIME_PT"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CLINC_TRIAL_PT_GROUP" FOR "BIOMART"."BI
O_CLINC_TRIAL_PT_GROUP"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CLINC_TRIAL_ATTR" FOR "BIOMART"."BIO_CL
INC_TRIAL_ATTR"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CGDCP_DATA" FOR "BIOMART"."BIO_CGDCP_DA
TA"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_CELL_LINE" FOR "BIOMART"."BIO_CELL_LINE
"                                                                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASY_DATA_STATS_ALL" FOR "BIOMART"."BIO_
ASY_DATA_STATS_ALL"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASY_ANALYSIS_PLTFM" FOR "BIOMART"."BIO_
ASY_ANALYSIS_PLTFM"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASY_ANALYSIS_DATA_IDX" FOR "BIOMART"."B
IO_ASY_ANALYSIS_DATA_IDX"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASY_ANALYSIS_DATASET" FOR "BIOMART"."BI
O_ASY_ANALYSIS_DATASET"                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_SAMPLE" FOR "BIOMART"."BIO_ASSAY_
SAMPLE"                                                                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_PLATFORM" FOR "BIOMART"."BIO_ASSA
Y_PLATFORM"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_FEATURE_GROUP" FOR "BIOMART"."BIO
_ASSAY_FEATURE_GROUP"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_DATA_STATS" FOR "BIOMART"."BIO_AS
SAY_DATA_STATS"                                                                 
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_DATA_ANNOTATION" FOR "BIOMART"."B
IO_ASSAY_DATA_ANNOTATION"                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_DATASET" FOR "BIOMART"."BIO_ASSAY
_DATASET"                                                                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_DATA" FOR "BIOMART"."BIO_ASSAY_DA
TA"                                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS_GWAS" FOR "BIOMART"."BIO
_ASSAY_ANALYSIS_GWAS"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS_EXT" FOR "BIOMART"."BIO_
ASSAY_ANALYSIS_EXT"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS_EQTL" FOR "BIOMART"."BIO
_ASSAY_ANALYSIS_EQTL"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS_DATA_TEA" FOR "BIOMART".
"BIO_ASSAY_ANALYSIS_DATA_TEA"                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS_DATA" FOR "BIOMART"."BIO
_ASSAY_ANALYSIS_DATA"                                                           
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY_ANALYSIS" FOR "BIOMART"."BIO_ASSA
Y_ANALYSIS"                                                                     
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ASSAY" FOR "BIOMART"."BIO_ASSAY"       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ANALYSIS_ATTRIBUTE_LINEAGE" FOR "BIOMAR
T"."BIO_ANALYSIS_ATTRIBUTE_LINEAGE"                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_ANALYSIS_ATTRIBUTE" FOR "BIOMART"."BIO_
ANALYSIS_ATTRIBUTE"                                                             
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."BIO_AD_HOC_PROPERTY" FOR "BIOMART"."BIO_AD_
HOC_PROPERTY"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ASYNC_JOB" FOR "I2B2DEMODATA"."ASYNC_JOB"  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ASSAY_ANALYSIS_DATA" FOR "BIOMART"."ASSAY_A
NALYSIS_DATA"                                                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE SYNONYM "TM_CZ"."ANNOTATION" FOR "BIOMART"."ANNOTATION"     
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."ANNOTATION_DEAPP"                                       
   (	"GPL_ID" VARCHAR2(100),                                                    
	"PROBE_ID" VARCHAR2(100),                                                      
	"GENE_SYMBOL" VARCHAR2(100),                                                   
	"GENE_ID" VARCHAR2(100),                                                       
	"PROBESET_ID" NUMBER(38,0),                                                    
	"ORGANISM" VARCHAR2(200)                                                       
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 11534336 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645      
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."TMP_TRIAL_NODES"                                        
   (	"LEAF_NODE" VARCHAR2(4000),                                                
	"CATEGORY_CD" VARCHAR2(200),                                                   
	"VISIT_NAME" VARCHAR2(100),                                                    
	"SAMPLE_TYPE" VARCHAR2(100),                                                   
	"PERIOD" VARCHAR2(100),                                                        
	"DATA_LABEL" VARCHAR2(500),                                                    
	"NODE_NAME" VARCHAR2(500),                                                     
	"DATA_VALUE" VARCHAR2(500)                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."TMP_TRIAL_DATA"                                         
   (	"USUBJID" VARCHAR2(50),                                                    
	"STUDY_ID" VARCHAR2(25),                                                       
	"DATA_TYPE" CHAR(1),                                                           
	"VISIT_NAME" VARCHAR2(100),                                                    
	"DATA_LABEL" VARCHAR2(500),                                                    
	"DATA_VALUE" VARCHAR2(500),                                                    
	"UNIT_CD" VARCHAR2(50),                                                        
	"CATEGORY_PATH" VARCHAR2(250),                                                 
	"SUB_CATEGORY_PATH_1" VARCHAR2(250),                                           
	"SUB_CATEGORY_PATH_2" VARCHAR2(250),                                           
	"PATIENT_NUM" NUMBER(38,0),                                                    
	"SOURCESYSTEM_CD" VARCHAR2(50),                                                
	"BASE_PATH" VARCHAR2(1250)                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."TMP_SUBJECT_INFO"                                       
   (	"USUBJID" VARCHAR2(100),                                                   
	"AGE_IN_YEARS_NUM" NUMBER(3,0),                                                
	"SEX_CD" VARCHAR2(50),                                                         
	"RACE_CD" VARCHAR2(50)                                                         
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."TMP_NUM_DATA_TYPES"                                     
   (	"CATEGORY_CD" VARCHAR2(200),                                               
	"DATA_LABEL" VARCHAR2(500),                                                    
	"PERIOD" VARCHAR2(100),                                                        
	"SAMPLE_TYPE" VARCHAR2(100),                                                   
	"VISIT_NAME" VARCHAR2(100)                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."TJEA_JUNK"                                              
   (	"ANALYSIS_NAME" VARCHAR2(500),                                             
	"MODEL_DESC" VARCHAR2(4000)                                                    
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."SEARCH_SECURE_OBJECT_RELEASE"                           
   (	"SEARCH_SECURE_OBJECT_ID" NUMBER(18,0),                                    
	"BIO_DATA_ID" NUMBER(18,0),                                                    
	"DISPLAY_NAME" NVARCHAR2(100),                                                 
	"DATA_TYPE" NVARCHAR2(200),                                                    
	"BIO_DATA_UNIQUE_ID" NVARCHAR2(200),                                           
	"RELEASE_STUDY" NVARCHAR2(100)                                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."SAMPLE_CATEGORIES_RELEASE"                              
   (	"TRIAL_CD" VARCHAR2(200),                                                  
	"SITE_CD" VARCHAR2(200),                                                       
	"SUBJECT_CD" VARCHAR2(200),                                                    
	"SAMPLE_CD" VARCHAR2(200),                                                     
	"CATEGORY_CD" VARCHAR2(200),                                                   
	"CATEGORY_VALUE" VARCHAR2(200),                                                
	"RELEASE_STUDY" VARCHAR2(50)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."PROBESET_DEAPP_20120206"                                
   (	"PROBESET_ID" NUMBER(38,0) NOT NULL ENABLE,                                
	"PROBESET" VARCHAR2(100) NOT NULL ENABLE,                                      
	"PLATFORM" VARCHAR2(100) NOT NULL ENABLE                                       
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."PROBESET_DEAPP"                                         
   (	"PROBESET_ID" NUMBER(38,0) NOT NULL ENABLE,                                
	"PROBESET" VARCHAR2(100) NOT NULL ENABLE,                                      
	"PLATFORM" VARCHAR2(100) NOT NULL ENABLE,                                      
	"ORGANISM" VARCHAR2(200)                                                       
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 9437184 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."PATIENT_DIMENSION_RELEASE"                              
   (	"PATIENT_NUM" NUMBER(38,0),                                                
	"VITAL_STATUS_CD" VARCHAR2(50),                                                
	"BIRTH_DATE" DATE,                                                             
	"DEATH_DATE" DATE,                                                             
	"SEX_CD" VARCHAR2(50),                                                         
	"AGE_IN_YEARS_NUM" NUMBER(38,0),                                               
	"LANGUAGE_CD" VARCHAR2(50),                                                    
	"RACE_CD" VARCHAR2(50),                                                        
	"MARITAL_STATUS_CD" VARCHAR2(50),                                              
	"RELIGION_CD" VARCHAR2(50),                                                    
	"ZIP_CD" VARCHAR2(50),                                                         
	"STATECITYZIP_PATH" VARCHAR2(700),                                             
	"UPDATE_DATE" DATE,                                                            
	"DOWNLOAD_DATE" DATE,                                                          
	"IMPORT_DATE" DATE,                                                            
	"SOURCESYSTEM_CD" VARCHAR2(50),                                                
	"UPLOAD_ID" NUMBER(38,0),                                                      
	"PATIENT_BLOB" CLOB,                                                           
	"RELEASE_STUDY" VARCHAR2(50)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("PATIENT_BLOB") STORE AS BASICFILE (                                      
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."OBSERVATION_FACT_RELEASE"                               
   (	"ENCOUNTER_NUM" NUMBER(38,0),                                              
	"PATIENT_NUM" NUMBER(38,0),                                                    
	"CONCEPT_CD" VARCHAR2(50) NOT NULL ENABLE,                                     
	"PROVIDER_ID" VARCHAR2(50) NOT NULL ENABLE,                                    
	"START_DATE" DATE,                                                             
	"MODIFIER_CD" VARCHAR2(100),                                                   
	"VALTYPE_CD" VARCHAR2(50),                                                     
	"TVAL_CHAR" VARCHAR2(255),                                                     
	"NVAL_NUM" NUMBER(18,5),                                                       
	"VALUEFLAG_CD" VARCHAR2(50),                                                   
	"QUANTITY_NUM" NUMBER(18,5),                                                   
	"UNITS_CD" VARCHAR2(50),                                                       
	"END_DATE" DATE,                                                               
	"LOCATION_CD" VARCHAR2(50) NOT NULL ENABLE,                                    
	"CONFIDENCE_NUM" NUMBER(18,0),                                                 
	"UPDATE_DATE" DATE,                                                            
	"DOWNLOAD_DATE" DATE,                                                          
	"IMPORT_DATE" DATE,                                                            
	"SOURCESYSTEM_CD" VARCHAR2(50),                                                
	"UPLOAD_ID" NUMBER(38,0),                                                      
	"OBSERVATION_BLOB" CLOB,                                                       
	"RELEASE_STUDY" VARCHAR2(100)                                                  
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("OBSERVATION_BLOB") STORE AS BASICFILE (                                  
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."NODE_CURATION"                                          
   (	"NODE_TYPE" VARCHAR2(25),                                                  
	"NODE_NAME" VARCHAR2(250),                                                     
	"DISPLAY_NAME" VARCHAR2(250),                                                  
	"DISPLAY_IN_UI" CHAR(1),                                                       
	"DATA_TYPE" CHAR(1),                                                           
	"GLOBAL_FLAG" CHAR(1),                                                         
	"STUDY_ID" VARCHAR2(30),                                                       
	"CURATOR_NAME" VARCHAR2(250),                                                  
	"CURATION_DATE" DATE,                                                          
	"ACTIVE_FLAG" CHAR(1)                                                          
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."I2B2_TAGS_RELEASE"                                      
   (	"TAG_ID" NUMBER(18,0) NOT NULL ENABLE,                                     
	"PATH" NVARCHAR2(200),                                                         
	"TAG" NVARCHAR2(200),                                                          
	"TAG_TYPE" NVARCHAR2(200),                                                     
	"RELEASE_STUDY" NVARCHAR2(200)                                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."I2B2_RELEASE"                                           
   (	"C_HLEVEL" NUMBER(22,0),                                                   
	"C_FULLNAME" VARCHAR2(900) NOT NULL ENABLE,                                    
	"C_NAME" VARCHAR2(2000),                                                       
	"C_SYNONYM_CD" CHAR(1),                                                        
	"C_VISUALATTRIBUTES" CHAR(3),                                                  
	"C_TOTALNUM" NUMBER(22,0),                                                     
	"C_BASECODE" VARCHAR2(450),                                                    
	"C_METADATAXML" CLOB,                                                          
	"C_FACTTABLECOLUMN" VARCHAR2(50),                                              
	"C_TABLENAME" VARCHAR2(50),                                                    
	"C_COLUMNNAME" VARCHAR2(50),                                                   
	"C_COLUMNDATATYPE" VARCHAR2(50),                                               
	"C_OPERATOR" VARCHAR2(10),                                                     
	"C_DIMCODE" VARCHAR2(900),                                                     
	"C_COMMENT" CLOB,                                                              
	"C_TOOLTIP" VARCHAR2(900),                                                     
	"UPDATE_DATE" DATE,                                                            
	"DOWNLOAD_DATE" DATE,                                                          
	"IMPORT_DATE" DATE,                                                            
	"SOURCESYSTEM_CD" VARCHAR2(50),                                                
	"VALUETYPE_CD" VARCHAR2(50),                                                   
	"I2B2_ID" NUMBER(22,0),                                                        
	"RELEASE_STUDY" VARCHAR2(50)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("C_METADATAXML") STORE AS BASICFILE (                                     
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
 LOB ("C_COMMENT") STORE AS BASICFILE (                                         
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."HAPLOVIEW_DATA_RELEASE"                                 
   (	"I2B2_ID" NUMBER(20,0),                                                    
	"JNJ_ID" VARCHAR2(30),                                                         
	"FATHER_ID" NUMBER(5,0),                                                       
	"MOTHER_ID" NUMBER(5,0),                                                       
	"SEX" NUMBER(1,0),                                                             
	"AFFECTION_STATUS" NUMBER(1,0),                                                
	"CHROMOSOME" VARCHAR2(10),                                                     
	"GENE" VARCHAR2(50),                                                           
	"RELEASE" NUMBER(4,0),                                                         
	"RELEASE_DATE" DATE,                                                           
	"TRIAL_NAME" VARCHAR2(50),                                                     
	"SNP_DATA" CLOB,                                                               
	"RELEASE_STUDY" VARCHAR2(30)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("SNP_DATA") STORE AS BASICFILE (                                          
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SUBJ_SAMPLE_MAP_RELEASE"                             
   (	"PATIENT_ID" NUMBER(18,0),                                                 
	"SITE_ID" NVARCHAR2(100),                                                      
	"SUBJECT_ID" NVARCHAR2(100),                                                   
	"SUBJECT_TYPE" NVARCHAR2(100),                                                 
	"CONCEPT_CODE" VARCHAR2(1000 CHAR),                                            
	"ASSAY_ID" NUMBER(18,0),                                                       
	"PATIENT_UID" VARCHAR2(50),                                                    
	"SAMPLE_TYPE" VARCHAR2(100),                                                   
	"ASSAY_UID" NVARCHAR2(100),                                                    
	"TRIAL_NAME" VARCHAR2(30),                                                     
	"TIMEPOINT" VARCHAR2(100),                                                     
	"TIMEPOINT_CD" VARCHAR2(50),                                                   
	"SAMPLE_TYPE_CD" VARCHAR2(50),                                                 
	"TISSUE_TYPE_CD" VARCHAR2(50),                                                 
	"PLATFORM" VARCHAR2(50),                                                       
	"PLATFORM_CD" VARCHAR2(50),                                                    
	"TISSUE_TYPE" VARCHAR2(100),                                                   
	"DATA_UID" VARCHAR2(100),                                                      
	"GPL_ID" VARCHAR2(20),                                                         
	"RBM_PANEL" VARCHAR2(50),                                                      
	"SAMPLE_ID" NUMBER(22,0),                                                      
	"SAMPLE_CD" VARCHAR2(200),                                                     
	"CATEGORY_CD" VARCHAR2(1000),                                                  
	"RELEASE_STUDY" VARCHAR2(30)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SUBJ_PROTEIN_DATA_RELEASE"                           
   (	"TRIAL_NAME" VARCHAR2(15),                                                 
	"COMPONENT" VARCHAR2(15),                                                      
	"INTENSITY" NUMBER,                                                            
	"PATIENT_ID" NUMBER(38,0),                                                     
	"SUBJECT_ID" VARCHAR2(10),                                                     
	"GENE_SYMBOL" VARCHAR2(100),                                                   
	"GENE_ID" NUMBER(10,0),                                                        
	"ASSAY_ID" NUMBER,                                                             
	"TIMEPOINT" VARCHAR2(20),                                                      
	"N_VALUE" NUMBER,                                                              
	"MEAN_INTENSITY" NUMBER,                                                       
	"STDDEV_INTENSITY" NUMBER,                                                     
	"MEDIAN_INTENSITY" NUMBER,                                                     
	"ZSCORE" NUMBER,                                                               
	"RELEASE_STUDY" VARCHAR2(15)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SUBJECT_RBM_DATA_RELEASE"                            
   (	"TRIAL_NAME" VARCHAR2(15),                                                 
	"ANTIGEN_NAME" VARCHAR2(100),                                                  
	"N_VALUE" NUMBER,                                                              
	"PATIENT_ID" NUMBER(38,0),                                                     
	"GENE_SYMBOL" VARCHAR2(100),                                                   
	"GENE_ID" NUMBER(10,0),                                                        
	"ASSAY_ID" NUMBER,                                                             
	"NORMALIZED_VALUE" NUMBER(18,5),                                               
	"CONCEPT_CD" NVARCHAR2(100),                                                   
	"TIMEPOINT" VARCHAR2(100),                                                     
	"DATA_UID" VARCHAR2(100),                                                      
	"VALUE" NUMBER,                                                                
	"LOG_INTENSITY" NUMBER,                                                        
	"MEAN_INTENSITY" NUMBER,                                                       
	"STDDEV_INTENSITY" NUMBER,                                                     
	"MEDIAN_INTENSITY" NUMBER,                                                     
	"ZSCORE" NUMBER,                                                               
	"RBM_PANEL" VARCHAR2(50),                                                      
	"RELEASE_STUDY" VARCHAR2(15)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SUBJECT_MRNA_DATA_RELEASE"                           
   (	"TRIAL_NAME" VARCHAR2(50),                                                 
	"PROBESET_ID" NUMBER(22,0),                                                    
	"ASSAY_ID" NUMBER(18,0),                                                       
	"PATIENT_ID" NUMBER(18,0),                                                     
	"TIMEPOINT" VARCHAR2(100),                                                     
	"PVALUE" FLOAT(126),                                                           
	"REFSEQ" VARCHAR2(50),                                                         
	"SUBJECT_ID" VARCHAR2(50),                                                     
	"RAW_INTENSITY" NUMBER,                                                        
	"MEAN_INTENSITY" NUMBER(18,4),                                                 
	"STDDEV_INTENSITY" NUMBER(18,4),                                               
	"MEDIAN_INTENSITY" NUMBER(18,4),                                               
	"LOG_INTENSITY" NUMBER(18,4),                                                  
	"ZSCORE" NUMBER(18,4),                                                         
	"SAMPLE_ID" NUMBER(22,0),                                                      
	"RELEASE_STUDY" VARCHAR2(50)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_PROBE_SORT_DEF_RELEASE"                          
   (	"SNP_PROBE_SORTED_DEF_ID" NUMBER(22,0),                                    
	"PLATFORM_NAME" VARCHAR2(255),                                                 
	"NUM_PROBE" NUMBER,                                                            
	"CHROM" VARCHAR2(16),                                                          
	"PROBE_DEF" CLOB,                                                              
	"SNP_ID_DEF" CLOB                                                              
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("PROBE_DEF") STORE AS BASICFILE (                                         
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE NOLOGGING                                                             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
 LOB ("SNP_ID_DEF") STORE AS BASICFILE (                                        
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE NOLOGGING                                                             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_PROBE_RELEASE"                                   
   (	"SNP_PROBE_ID" NUMBER(22,0),                                               
	"PROBE_NAME" VARCHAR2(255),                                                    
	"SNP_ID" NUMBER(22,0),                                                         
	"SNP_NAME" VARCHAR2(255),                                                      
	"VENDOR_NAME" VARCHAR2(255)                                                    
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_INFO_RELEASE"                                    
   (	"SNP_INFO_ID" NUMBER(22,0),                                                
	"NAME" VARCHAR2(255),                                                          
	"CHROM" VARCHAR2(16),                                                          
	"CHROM_POS" NUMBER                                                             
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_GENE_MAP_RELEASE"                                
   (	"SNP_ID" NUMBER(22,0),                                                     
	"SNP_NAME" VARCHAR2(255),                                                      
	"ENTREZ_GENE_ID" NUMBER                                                        
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_DATA_DS_LOC_RELEASE"                             
   (	"SNP_DATA_DATASET_LOC_ID" NUMBER(22,0),                                    
	"TRIAL_NAME" VARCHAR2(255),                                                    
	"SNP_DATASET_ID" NUMBER(22,0),                                                 
	"LOCATION" NUMBER,                                                             
	"RELEASE_STUDY" VARCHAR2(200)                                                  
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_DATA_BY_PROBE_RELEASE"                           
   (	"SNP_DATA_BY_PROBE_ID" NUMBER(22,0),                                       
	"PROBE_ID" NUMBER(22,0),                                                       
	"PROBE_NAME" VARCHAR2(255),                                                    
	"SNP_ID" NUMBER(22,0),                                                         
	"SNP_NAME" VARCHAR2(255),                                                      
	"TRIAL_NAME" VARCHAR2(255),                                                    
	"DATA_BY_PROBE" CLOB,                                                          
	"RELEASE_STUDY" VARCHAR2(200)                                                  
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("DATA_BY_PROBE") STORE AS BASICFILE (                                     
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE NOLOGGING                                                             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_SNP_DATA_BY_PATIENT_RELEASE"                         
   (	"SNP_DATA_BY_PATIENT_ID" NUMBER(22,0),                                     
	"SNP_DATASET_ID" NUMBER(22,0),                                                 
	"TRIAL_NAME" VARCHAR2(255),                                                    
	"PATIENT_NUM" NUMBER,                                                          
	"CHROM" VARCHAR2(16),                                                          
	"DATA_BY_PATIENT_CHR" CLOB,                                                    
	"PED_BY_PATIENT_CHR" CLOB,                                                     
	"RELEASE_STUDY" VARCHAR2(255)                                                  
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("DATA_BY_PATIENT_CHR") STORE AS BASICFILE (                               
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE NOLOGGING                                                             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
 LOB ("PED_BY_PATIENT_CHR") STORE AS BASICFILE (                                
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE NOLOGGING                                                             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_MRNA_ANNOTATION_RELEASE"                             
   (	"GPL_ID" VARCHAR2(100),                                                    
	"PROBE_ID" VARCHAR2(100),                                                      
	"GENE_SYMBOL" VARCHAR2(100),                                                   
	"GENE_ID" VARCHAR2(100),                                                       
	"PROBESET_ID" NUMBER(38,0)                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."DE_GPL_INFO_RELEASE"                                    
   (	"PLATFORM" VARCHAR2(10),                                                   
	"TITLE" VARCHAR2(500),                                                         
	"ORGANISM" VARCHAR2(100),                                                      
	"ANNOTATION_DATE" TIMESTAMP (6)                                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_XTRIAL_EXCLUSION"                                    
   (	"TRIAL_ID" VARCHAR2(200)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_XTRIAL_CTRL_VOCAB"                                   
   (	"CTRL_VOCAB_CODE" VARCHAR2(200) NOT NULL ENABLE,                           
	"CTRL_VOCAB_NAME" VARCHAR2(200) NOT NULL ENABLE,                               
	"CTRL_VOCAB_CATEGORY" VARCHAR2(200),                                           
	"CTRL_VOCAB_ID" NUMBER(18,0) NOT NULL ENABLE                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_TEST_RESULT"                                         
   (	"TEST_ID" NUMBER(18,0) NOT NULL ENABLE,                                    
	"TEST_RESULT_ID" NUMBER(18,0) NOT NULL ENABLE,                                 
	"TEST_RESULT_TEXT" VARCHAR2(2000),                                             
	"TEST_RESULT_NBR" NUMBER(22,0),                                                
	"TEST_RUN_ID" NUMBER(18,0),                                                    
	"EXTERNAL_LOCATION" VARCHAR2(2000),                                            
	"RUN_DATE" DATE,                                                               
	"STUDY_ID" VARCHAR2(2000)                                                      
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_TEST_CATEGORY"                                       
   (	"TEST_CATEGORY_ID" NUMBER(18,0) NOT NULL ENABLE,                           
	"TEST_CATEGORY" NVARCHAR2(255),                                                
	"TEST_SUB_CATEGORY1" NVARCHAR2(255),                                           
	"TEST_SUB_CATEGORY2" NVARCHAR2(255),                                           
	 CONSTRAINT "CZ_TEST_CATEGORY_PK" PRIMARY KEY ("TEST_CATEGORY_ID")             
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"  ENABLE                                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_TEST"                                                
   (	"TEST_ID" NUMBER(18,0) NOT NULL ENABLE,                                    
	"TEST_NAME" NVARCHAR2(200),                                                    
	"TEST_DESC" NVARCHAR2(1000),                                                   
	"TEST_SCHEMA" NVARCHAR2(255),                                                  
	"TEST_TABLE" NVARCHAR2(255),                                                   
	"TEST_COLUMN" NVARCHAR2(255),                                                  
	"TEST_TYPE" NVARCHAR2(255),                                                    
	"TEST_SQL" NVARCHAR2(2000),                                                    
	"TEST_PARAM1" NVARCHAR2(2000),                                                 
	"TEST_PARAM2" NVARCHAR2(2000),                                                 
	"TEST_PARAM3" NVARCHAR2(2000),                                                 
	"TEST_MIN_VALUE" NUMBER(18,4),                                                 
	"TEST_MAX_VALUE" NUMBER(18,4),                                                 
	"TEST_CATEGORY_ID" NUMBER,                                                     
	"TEST_SEVERITY_CD" NVARCHAR2(20),                                              
	"TABLE_TYPE" VARCHAR2(100),                                                    
	 CONSTRAINT "CZ_TEST_PK" PRIMARY KEY ("TEST_ID")                               
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"  ENABLE,                                               
	 CONSTRAINT "CZ_TEST_CZ_TEST_CATEGORY_FK1" FOREIGN KEY ("TEST_CATEGORY_ID")    
	  REFERENCES "TM_CZ"."CZ_TEST_CATEGORY" ("TEST_CATEGORY_ID") ENABLE            
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING            
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_REQUIRED_UPLOAD_FIELD"                               
   (	"REQUIRED_UPLOAD_FIELD_ID" NUMBER(22,0) NOT NULL ENABLE,                   
	"TYPE" NVARCHAR2(50),                                                          
	"FIELD" NVARCHAR2(50),                                                         
	 CONSTRAINT "CZ_REQUIRED_UPLOAD_FIELD_PK" PRIMARY KEY ("REQUIRED_UPLOAD_FIELD_I
D")                                                                             
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"  ENABLE                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_PERSON"                                              
   (	"PERSON_ID" NUMBER(18,0) NOT NULL ENABLE,                                  
	"F_NAME" NVARCHAR2(200),                                                       
	"L_NAME" NVARCHAR2(200),                                                       
	"M_NAME" NVARCHAR2(200),                                                       
	"USER_NAME" NVARCHAR2(20),                                                     
	"ROLE_CODE" VARCHAR2(20),                                                      
	"EMAIL_ADDRESS" VARCHAR2(100),                                                 
	"MAIL_ADDRESS" VARCHAR2(200),                                                  
	"CELL_PHONE" VARCHAR2(20),                                                     
	"WORK_PHONE" VARCHAR2(20),                                                     
	 CONSTRAINT "CZ_PERSON_PK" PRIMARY KEY ("PERSON_ID")                           
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"  ENABLE                                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_JOB_MESSAGE"                                         
   (	"JOB_ID" NUMBER(18,0) NOT NULL ENABLE,                                     
	"MESSAGE_ID" NUMBER(18,0),                                                     
	"MESSAGE_LINE" NUMBER(18,0),                                                   
	"MESSAGE_PROCEDURE" NVARCHAR2(100),                                            
	"INFO_MESSAGE" NVARCHAR2(2000),                                                
	"SEQ_ID" NUMBER(18,0) NOT NULL ENABLE                                          
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_JOB_MASTER"                                          
   (	"JOB_ID" NUMBER(18,0) DEFAULT NULL NOT NULL ENABLE,                        
	"START_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE,                               
	"END_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE,                                 
	"ACTIVE" NVARCHAR2(1),                                                         
	"TIME_ELAPSED_SECS" NUMBER(18,4) DEFAULT 0,                                    
	"BUILD_ID" NUMBER(18,0),                                                       
	"SESSION_ID" NUMBER(18,0),                                                     
	"DATABASE_NAME" NVARCHAR2(50),                                                 
	"JOB_STATUS" NVARCHAR2(50),                                                    
	"JOB_NAME" NVARCHAR2(500),                                                     
	 CONSTRAINT "CZ_JOB_MASTER_PK" PRIMARY KEY ("JOB_ID")                          
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645        
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"  ENABLE                                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_JOB_ERROR"                                           
   (	"JOB_ID" NUMBER(18,0) NOT NULL ENABLE,                                     
	"ERROR_NUMBER" NUMBER(18,0),                                                   
	"ERROR_MESSAGE" NVARCHAR2(1000),                                               
	"ERROR_STACK" NVARCHAR2(2000),                                                 
	"SEQ_ID" NUMBER(18,0) NOT NULL ENABLE,                                         
	"ERROR_BACKTRACE" NVARCHAR2(2000)                                              
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645        
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_JOB_AUDIT"                                           
   (	"SEQ_ID" NUMBER(18,0) NOT NULL ENABLE,                                     
	"JOB_ID" NUMBER(18,0) NOT NULL ENABLE,                                         
	"DATABASE_NAME" NVARCHAR2(50),                                                 
	"PROCEDURE_NAME" NVARCHAR2(100),                                               
	"STEP_DESC" NVARCHAR2(1000),                                                   
	"STEP_STATUS" NVARCHAR2(50),                                                   
	"RECORDS_MANIPULATED" NUMBER(18,0),                                            
	"STEP_NUMBER" NUMBER(18,0),                                                    
	"JOB_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE,                                 
	"TIME_ELAPSED_SECS" NUMBER(18,4) DEFAULT 0,                                    
	 CONSTRAINT "CZ_JOB_AUDIT_PK" PRIMARY KEY ("SEQ_ID")                           
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 3145728 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"  ENABLE                                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 29360128 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645      
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_FORM_LAYOUT"                                         
   (	"FORM_LAYOUT_ID" NUMBER(22,0) NOT NULL ENABLE,                             
	"FORM_KEY" NVARCHAR2(50),                                                      
	"FORM_COLUMN" NVARCHAR2(50),                                                   
	"DISPLAY_NAME" NVARCHAR2(50),                                                  
	"DATA_TYPE" NVARCHAR2(50),                                                     
	"SEQUENCE" NUMBER(22,0),                                                       
	 CONSTRAINT "CZ_FORM_LAYOUT_PK" PRIMARY KEY ("FORM_LAYOUT_ID")                 
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS   
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "INDX"  ENABLE                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 0 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING             
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_DATA_PROFILE_STATS"                                  
   (	"TABLE_NAME" VARCHAR2(500) NOT NULL ENABLE,                                
	"COLUMN_NAME" VARCHAR2(500) NOT NULL ENABLE,                                   
	"DATA_TYPE" VARCHAR2(500),                                                     
	"COLUMN_LENGTH" NUMBER(10,0),                                                  
	"COLUMN_PRECISION" NUMBER(10,0),                                               
	"COLUMN_SCALE" NUMBER(10,0) NOT NULL ENABLE,                                   
	"TOTAL_COUNT" NUMBER(19,0),                                                    
	"PERCENTAGE_NULL" NUMBER(5,2),                                                 
	"NULL_COUNT" NUMBER(19,0),                                                     
	"NON_NULL_COUNT" NUMBER(19,0),                                                 
	"DISTINCT_COUNT" NUMBER(19,0),                                                 
	"MAX_LENGTH" NUMBER(10,0),                                                     
	"MIN_LENGTH" NUMBER(10,0),                                                     
	"FIRST_VALUE" VARCHAR2(4000),                                                  
	"LAST_VALUE" VARCHAR2(4000),                                                   
	"MAX_LENGTH_VALUE" VARCHAR2(4000),                                             
	"MIN_LENGTH_VALUE" VARCHAR2(4000),                                             
	"ETL_DATE" DATE DEFAULT SYSDATE NOT NULL ENABLE                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_DATA_PROFILE_COLUMN_SAMPLE"                          
   (	"TABLE_NAME" VARCHAR2(500),                                                
	"COLUMN_NAME" VARCHAR2(500),                                                   
	"VALUE" VARCHAR2(4000),                                                        
	"COUNT" NUMBER(19,0),                                                          
	"ETL_DATE" DATE DEFAULT SYSDATE NOT NULL ENABLE                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CZ_DATA_PROFILE_COLUMN_EXCLUSI"                         
   (	"TABLE_NAME" VARCHAR2(500) NOT NULL ENABLE,                                
	"COLUMN_NAME" VARCHAR2(500) NOT NULL ENABLE,                                   
	"EXCLUSION_REASON" VARCHAR2(2000),                                             
	"ETL_DATE" DATE DEFAULT SYSDATE NOT NULL ENABLE                                
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CONCEPT_DIMENSION_RELEASE"                              
   (	"CONCEPT_CD" VARCHAR2(50) NOT NULL ENABLE,                                 
	"CONCEPT_PATH" VARCHAR2(700) NOT NULL ENABLE,                                  
	"NAME_CHAR" VARCHAR2(2000),                                                    
	"CONCEPT_BLOB" CLOB,                                                           
	"UPDATE_DATE" DATE,                                                            
	"DOWNLOAD_DATE" DATE,                                                          
	"IMPORT_DATE" DATE,                                                            
	"SOURCESYSTEM_CD" VARCHAR2(50),                                                
	"UPLOAD_ID" NUMBER,                                                            
	"TABLE_NAME" VARCHAR2(255),                                                    
	"RELEASE_STUDY" VARCHAR2(50)                                                   
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("CONCEPT_BLOB") STORE AS BASICFILE (                                      
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."CATEGORY_PATH_EXCLUDED_WORDS"                           
   (	"EXCLUDED_TEXT" VARCHAR2(100)                                              
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."BIO_EXPERIMENT_RELEASE"                                 
   (	"BIO_EXPERIMENT_ID" NUMBER(18,0),                                          
	"BIO_EXPERIMENT_TYPE" NVARCHAR2(200),                                          
	"TITLE" NVARCHAR2(1000),                                                       
	"DESCRIPTION" NVARCHAR2(2000),                                                 
	"DESIGN" NVARCHAR2(2000),                                                      
	"START_DATE" DATE,                                                             
	"COMPLETION_DATE" DATE,                                                        
	"PRIMARY_INVESTIGATOR" NVARCHAR2(400),                                         
	"CONTACT_FIELD" NVARCHAR2(400),                                                
	"ETL_ID" NVARCHAR2(100),                                                       
	"STATUS" VARCHAR2(100),                                                        
	"OVERALL_DESIGN" NVARCHAR2(2000),                                              
	"ACCESSION" NVARCHAR2(100),                                                    
	"ENTRYDT" DATE,                                                                
	"UPDATED" DATE,                                                                
	"INSTITUTION" VARCHAR2(100),                                                   
	"COUNTRY" VARCHAR2(50),                                                        
	"BIOMARKER_TYPE" VARCHAR2(255),                                                
	"TARGET" VARCHAR2(255),                                                        
	"ACCESS_TYPE" VARCHAR2(100),                                                   
	"RELEASE_STUDY" NVARCHAR2(100)                                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."BIO_DATA_UID_RELEASE"                                   
   (	"BIO_DATA_ID" NUMBER(18,0) NOT NULL ENABLE,                                
	"UNIQUE_ID" NVARCHAR2(200) NOT NULL ENABLE,                                    
	"BIO_DATA_TYPE" NVARCHAR2(100) NOT NULL ENABLE,                                
	"RELEASE_STUDY" NVARCHAR2(200) NOT NULL ENABLE                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."BIO_DATA_COMPOUND_RELEASE"                              
   (	"BIO_DATA_ID" NUMBER(18,0) NOT NULL ENABLE,                                
	"BIO_COMPOUND_ID" NUMBER(18,0) NOT NULL ENABLE,                                
	"ETL_SOURCE" VARCHAR2(100),                                                    
	"RELEASE_STUDY" NVARCHAR2(100)                                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."BIO_CLINICAL_TRIAL_RELEASE"                             
   (	"TRIAL_NUMBER" NVARCHAR2(510),                                             
	"STUDY_OWNER" NVARCHAR2(510),                                                  
	"STUDY_PHASE" VARCHAR2(100),                                                   
	"BLINDING_PROCEDURE" NVARCHAR2(1000),                                          
	"STUDYTYPE" NVARCHAR2(510),                                                    
	"DURATION_OF_STUDY_WEEKS" NUMBER(10,0),                                        
	"NUMBER_OF_PATIENTS" NUMBER(10,0),                                             
	"NUMBER_OF_SITES" NUMBER(10,0),                                                
	"ROUTE_OF_ADMINISTRATION" NVARCHAR2(510),                                      
	"DOSING_REGIMEN" VARCHAR2(3500),                                               
	"GROUP_ASSIGNMENT" NVARCHAR2(510),                                             
	"TYPE_OF_CONTROL" NVARCHAR2(510),                                              
	"COMPLETION_DATE" DATE,                                                        
	"PRIMARY_END_POINTS" VARCHAR2(2000),                                           
	"SECONDARY_END_POINTS" VARCHAR2(3500),                                         
	"INCLUSION_CRITERIA" NCLOB,                                                    
	"EXCLUSION_CRITERIA" NCLOB,                                                    
	"SUBJECTS" VARCHAR2(2000),                                                     
	"GENDER_RESTRICTION_MFB" NVARCHAR2(510),                                       
	"MIN_AGE" NUMBER(10,0),                                                        
	"MAX_AGE" NUMBER(10,0),                                                        
	"SECONDARY_IDS" NVARCHAR2(510),                                                
	"BIO_EXPERIMENT_ID" NUMBER(18,0),                                              
	"DEVELOPMENT_PARTNER" VARCHAR2(100),                                           
	"GEO_PLATFORM" VARCHAR2(30),                                                   
	"MAIN_FINDINGS" VARCHAR2(2000),                                                
	"PLATFORM_NAME" VARCHAR2(200),                                                 
	"SEARCH_AREA" VARCHAR2(100),                                                   
	"RELEASE_STUDY" NVARCHAR2(510)                                                 
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
 LOB ("INCLUSION_CRITERIA") STORE AS BASICFILE (                                
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
 LOB ("EXCLUSION_CRITERIA") STORE AS BASICFILE (                                
  TABLESPACE "TRANSMART" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10         
  NOCACHE LOGGING                                                               
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645         
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT))                                                
                                                                                
                                                                                
                                                                                
  CREATE TABLE "TM_CZ"."ANNOTATION_DEAPP_20120206"                              
   (	"GPL_ID" VARCHAR2(100),                                                    
	"PROBE_ID" VARCHAR2(100),                                                      
	"GENE_SYMBOL" VARCHAR2(100),                                                   
	"GENE_ID" VARCHAR2(100),                                                       
	"PROBESET_ID" NUMBER(38,0)                                                     
   ) SEGMENT CREATION IMMEDIATE                                                 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING              
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645       
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DE
FAULT CELL_FLASH_CACHE DEFAULT)                                                 
  TABLESPACE "TRANSMART"                                                        
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_FORM_LAYOUT_ID" before              
  INSERT ON "TM_CZ"."CZ_FORM_LAYOUT" FOR EACH row BEGIN IF inserting THEN IF :NE
W."FORM_LAYOUT_ID" IS NULL THEN                                                 
  SELECT SEQ_FORM_LAYOUT_ID.nextval INTO :NEW."FORM_LAYOUT_ID" FROM dual;       
END IF;                                                                         
END IF;                                                                         
END;                                                                            
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_FORM_LAYOUT_ID" ENABLE                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_XTRIAL_CTRL_VOCAB_ID"                  
before insert on "CZ_XTRIAL_CTRL_VOCAB"    for each row                         
begin     if inserting then                                                     
if :NEW."CTRL_VOCAB_ID" is null then                                            
select SEQ_CZ.nextval into :NEW."CTRL_VOCAB_ID" from dual;       end if;       e
nd if;   end;                                                                   
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_XTRIAL_CTRL_VOCAB_ID" ENABLE                         
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_PROBESET_DEAPP"                        
before insert on "PROBESET_DEAPP"                                               
	for each row begin                                                             
		if inserting then                                                             
			if :NEW."PROBESET_ID" is null then                                           
				select SEQ_PROBESET_ID.nextval into :NEW."PROBESET_ID" from dual;           
			end if;                                                                      
		end if;                                                                       
	end;                                                                           
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_PROBESET_DEAPP" ENABLE                               
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_TEST_RESULT_ID"                     
before insert on "CZ_TEST_RESULT"    for each row                               
begin     if inserting then                                                     
if :NEW."TEST_RESULT_ID" is null then                                           
select SEQ_CZ.nextval into :NEW."TEST_RESULT_ID" from dual;       end if;       
end if;   end;                                                                  
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_TEST_RESULT_ID" ENABLE                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_TEST_ID"                            
before insert on "CZ_TEST"    for each row                                      
begin     if inserting then                                                     
if :NEW."TEST_ID" is null then                                                  
select SEQ_CZ.nextval into :NEW."TEST_ID" from dual;       end if;       end if;
   end;                                                                         
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_TEST_ID" ENABLE                                   
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_TEST_CATEGORY_ID"                   
before insert on "CZ_TEST_CATEGORY"    for each row                             
begin     if inserting then                                                     
if :NEW."TEST_CATEGORY_ID" is null then                                         
select SEQ_CZ.nextval into :NEW."TEST_CATEGORY_ID" from dual;       end if;     
  end if;   end;                                                                
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_TEST_CATEGORY_ID" ENABLE                          
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_SEQ_ID"                             
  before insert on CZ_JOB_AUDIT    for each row                                 
  begin                                                                         
    if inserting then                                                           
      if :NEW.SEQ_ID is null then                                               
        select SEQ_CZ_JOB_AUDIT.nextval into :NEW.SEQ_ID from dual;             
      end if;                                                                   
    end if;                                                                     
  end;                                                                          
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_SEQ_ID" ENABLE                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_REQ_UPLOAD_FIELD_ID" before         
  INSERT ON "TM_CZ"."CZ_REQUIRED_UPLOAD_FIELD" FOR EACH row BEGIN IF inserting T
HEN IF :NEW."REQUIRED_UPLOAD_FIELD_ID" IS NULL THEN                             
  SELECT SEQ_REQUIRED_UPLOAD_FIELD_ID.nextval INTO :NEW."REQUIRED_UPLOAD_FIELD_I
D" FROM dual;                                                                   
END IF;                                                                         
END IF;                                                                         
END;                                                                            
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_REQ_UPLOAD_FIELD_ID" ENABLE                       
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_PERSONID"                           
before insert on "CZ_PERSON"                                                    
for each row                                                                    
begin     if inserting then                                                     
if :NEW."PERSON_ID" is null then                                                
select SEQ_CZ_PERSON_ID.nextval into :NEW."PERSON_ID" from dual;       end if;  
  end if; end;                                                                  
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_PERSONID" ENABLE                                  
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TRIGGER "TM_CZ"."TRG_CZ_JOB_ID"                             
  before insert on CZ_JOB_MASTER    for each row                                
  begin                                                                         
    if inserting then                                                           
      if :NEW.JOB_ID is null then                                               
        select SEQ_CZ_JOB_MASTER.nextval into :NEW.JOB_ID from dual;            
      end if;                                                                   
    end if;                                                                     
  end;                                                                          
                                                                                
                                                                                
ALTER TRIGGER "TM_CZ"."TRG_CZ_JOB_ID" ENABLE                                    
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TYPE "TM_CZ"."T_STRING_AGG" AS OBJECT                       
(                                                                               
  g_string  VARCHAR2(32767),                                                    
                                                                                
  STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)           
    RETURN NUMBER,                                                              
                                                                                
  MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,             
                                       value  IN      VARCHAR2 )                
     RETURN NUMBER,                                                             
                                                                                
  MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,        
                                         returnValue  OUT  VARCHAR2,            
                                         flags        IN   NUMBER)              
    RETURN NUMBER,                                                              
                                                                                
  MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,                
                                     ctx2  IN      t_string_agg)                
    RETURN NUMBER                                                               
);                                                                              
CREATE OR REPLACE TYPE BODY "TM_CZ"."T_STRING_AGG" IS                           
  STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)           
    RETURN NUMBER IS                                                            
  BEGIN                                                                         
    sctx := t_string_agg(NULL);                                                 
    RETURN ODCIConst.Success;                                                   
  END;                                                                          
                                                                                
  MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,             
                                       value  IN      VARCHAR2 )                
    RETURN NUMBER IS                                                            
  BEGIN                                                                         
    SELF.g_string := self.g_string || ',' || value;                             
    RETURN ODCIConst.Success;                                                   
  END;                                                                          
                                                                                
  MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,        
                                         returnValue  OUT  VARCHAR2,            
                                         flags        IN   NUMBER)              
    RETURN NUMBER IS                                                            
  BEGIN                                                                         
    returnValue := RTRIM(LTRIM(SELF.g_string, ','), ',');                       
    RETURN ODCIConst.Success;                                                   
  END;                                                                          
                                                                                
  MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,                
                                     ctx2  IN      t_string_agg)                
    RETURN NUMBER IS                                                            
  BEGIN                                                                         
    SELF.g_string := SELF.g_string || ',' || ctx2.g_string;                     
    RETURN ODCIConst.Success;                                                   
  END;                                                                          
END;                                                                            
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE TYPE "TM_CZ"."VARCHAR_TABLE" IS TABLE OF VARCHAR2(1000);    
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FORCE VIEW "TM_CZ"."ALL_TEST_DETAIL_VIEW" ("RUN_ID", "TEST_I
D", "RUN_NAME", "TABLE", "COLUMN", "CATEGORY", "SUB_CATEGORY1", "SUB_CATEGORY2",
 "SQL", "START_DATE", "END_DATE", "STATUS", "TEST_SEVERITY_CD", "ACT_RECORD_CNT"
, "MIN_VALUE_ALLOWED", "MAX_VALUE_ALLOWED", "ERROR_CODE", "ERROR_MESSAGE") AS   
  select                                                                        
  a.test_run_id RUN_ID,                                                         
  c.test_id,                                                                    
  a.test_run_name RUN_NAME,                                                     
  c.test_table "TABLE",                                                         
  c.test_column "COLUMN",                                                       
  e.test_category CATEGORY,                                                     
  e.test_sub_category1 SUB_CATEGORY1,                                           
  e.test_sub_category2 SUB_CATEGORY2,                                           
  c.test_sql "SQL",                                                             
  to_char(b.start_date,'DD/MM/YYYY HH24:MI:SS') start_date,                     
  to_char(b.end_date,'DD/MM/YYYY HH24:MI:SS') end_date,                         
  b.status,                                                                     
  c.test_severity_cd,                                                           
  d.act_record_cnt,                                                             
  c.test_min_value MIN_VALUE_ALLOWED,                                           
  c.test_max_value MAX_VALUE_ALLOWED,                                           
  d.return_code error_code,                                                     
  d.return_message error_message                                                
from az_test_run a                                                              
left outer join az_test_step_run b                                              
  on a.test_run_id = b.test_run_id                                              
join cz_test c                                                                  
  on c.test_id = b.test_id                                                      
left outer join az_test_step_act_result d                                       
  on d.test_step_run_id = b.test_step_run_id                                    
join cz_test_category e                                                         
  on e.test_category_id = c.test_category_id                                    
ORDER BY a.TEST_RUN_ID, c.test_table, c.test_column                             
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FORCE VIEW "TM_CZ"."ALL_TEST_SUMMARY_VIEW" ("TEST_RUN_ID", "
TEST_RUN_NAME", "START_DATE", "END_DATE", "STATUS", "TEST_CATEGORY", "TEST_SUB_C
ATEGORY1", "TEST_SUB_CATEGORY2", "PASS", "WARNING", "FAIL", "ERROR", "TOTAL", "D
B_VERSION") AS                                                                  
  select                                                                        
  a.test_run_id,                                                                
  a.test_run_name,                                                              
  to_char(a.start_date,'DD/MM/YYYY HH24:MI:SS') start_date,                     
  to_char(a.end_date,'DD/MM/YYYY HH24:MI:SS') end_date,                         
  a.status,                                                                     
  d.test_category,                                                              
  d.test_sub_category1,                                                         
  D.test_sub_category2,                                                         
  sum(case when b.status = 'PASS' then 1                                        
    else 0 end) PASS,                                                           
  sum(case when b.status = 'WARNING' then 1                                     
    else 0 end) WARNING,                                                        
  sum(case when b.status = 'FAIL' then 1                                        
    else 0 end) FAIL,                                                           
  sum(case when b.status = 'ERROR' then 1                                       
    else 0 end) ERROR,                                                          
  count(b.status) TOTAL,                                                        
  c.version_name as DB_Version                                                  
from az_test_run a                                                              
join az_test_step_run b                                                         
  on a.test_run_id = b.test_run_id                                              
JOIN cz_dw_version C                                                            
  ON c.dw_version_id = a.dw_version_id                                          
JOIN cz_test_category d                                                         
  ON d.test_category_id = a.test_category_id                                    
group by                                                                        
  a.test_run_id,                                                                
  a.test_run_name,                                                              
  to_char(a.start_date,'DD/MM/YYYY HH24:MI:SS'),                                
  to_char(a.end_date,'DD/MM/YYYY HH24:MI:SS'),                                  
  a.status,                                                                     
  d.test_category,                                                              
  d.test_sub_category1,                                                         
  d.test_sub_category2,                                                         
  c.version_name                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FORCE VIEW "TM_CZ"."CZV_PIVOT_SAMPLE_CATEGORIES" ("TRIAL_CD"
, "SAMPLE_ID", "TRIAL_NAME", "PATHOLOGY", "AGE", "TISSUE", "GENDER", "DATATYPE",
 "BIOBANK") AS                                                                  
  select x.trial_cd                                                             
      ,x.sample_cd as sample_id			--	RDC tranSMART                              
	  ,x.trial_name                                                                
	  ,coalesce(x.pathology,'Not Applicable') as pathology                         
	  ,coalesce(x.age,'Not Applicable') as age                                     
	  ,coalesce(x.tissue,'Not Applicable') as tissue                               
	  ,coalesce(x.gender,'Not Applicable') as gender                               
	  ,coalesce(x.datatype,'Not Applicable') as datatype                           
	  ,coalesce(x.biobank,'Not Applicable') as biobank                             
from                                                                            
	(select s.trial_cd                                                             
		   ,s.sample_cd                                                               
		   ,f.c_name as trial_name                                                    
		   ,max(decode(s.category_cd,'PATHOLOGY',s.category_value,null)) as PATHOLOGY 
		   ,max(decode(s.category_cd,'AGE',s.category_value,null)) as AGE             
		   ,max(decode(s.category_cd,'TISSUE',s.category_value,null)) as TISSUE       
		   ,max(decode(s.category_cd,'GENDER',s.category_value,null)) as GENDER       
		   ,max(decode(s.category_cd,'DATATYPE',s.category_value,null)) as DATATYPE   
		   ,max(decode(s.category_cd,'BIOBANK',s.category_value,null)) as BIOBANK     
	 from lz_src_sample_categories s                                               
		 ,i2b2 f		                                                                    
	 where s.trial_cd = f.sourcesystem_cd                                          
	   and f.c_hlevel = (select min(x.c_hlevel) from i2b2 x                        
                         where f.sourcesystem_cd = x.sourcesystem_cd            
						)                                                                         
	group by s.trial_cd                                                            
			,s.sample_cd                                                                 
			,f.c_name                                                                    
) x                                                                             
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FORCE VIEW "TM_CZ"."LAST_TEST_DETAIL_VIEW" ("RUN_ID", "TEST_
ID", "RUN_NAME", "TABLE", "COLUMN", "CATEGORY", "SUB_CATEGORY1", "SUB_CATEGORY2"
, "SQL", "START_DATE", "END_DATE", "STATUS", "TEST_SEVERITY_CD", "ACT_RECORD_CNT
", "MIN_VALUE_ALLOWED", "MAX_VALUE_ALLOWED", "ERROR_CODE", "ERROR_MESSAGE") AS  
  select                                                                        
  a.test_run_id RUN_ID,                                                         
  c.test_id,                                                                    
  a.test_run_name RUN_NAME,                                                     
  c.test_table "TABLE",                                                         
  c.test_column "COLUMN",                                                       
  e.test_category CATEGORY,                                                     
  e.test_sub_category1 SUB_CATEGORY1,                                           
  e.test_sub_category2 SUB_CATEGORY2,                                           
  c.test_sql "SQL",                                                             
  to_char(b.start_date,'DD/MM/YYYY HH24:MI:SS') start_date,                     
  to_char(b.end_date,'DD/MM/YYYY HH24:MI:SS') end_date,                         
  b.status,                                                                     
  c.test_severity_cd,                                                           
  d.act_record_cnt,                                                             
  c.test_min_value MIN_VALUE_ALLOWED,                                           
  c.test_max_value MAX_VALUE_ALLOWED,                                           
  d.return_code error_code,                                                     
  d.return_message error_message                                                
from az_test_run a                                                              
left outer join az_test_step_run b                                              
  on a.test_run_id = b.test_run_id                                              
join cz_test c                                                                  
  on c.test_id = b.test_id                                                      
left outer join az_test_step_act_result d                                       
  on d.test_step_run_id = b.test_step_run_id                                    
join cz_test_category e                                                         
  on e.test_category_id = c.test_category_id                                    
WHERE A.TEST_RUN_ID = (select max(test_Run_id) from az_test_run)                
ORDER BY a.TEST_RUN_ID, c.test_table, c.test_column                             
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
  CREATE OR REPLACE FORCE VIEW "TM_CZ"."LAST_TEST_SUMMARY_VIEW" ("TEST_RUN_ID", 
"TEST_RUN_NAME", "START_DATE", "END_DATE", "STATUS", "TEST_CATEGORY", "TEST_SUB_
CATEGORY1", "TEST_SUB_CATEGORY2", "PASS", "WARNING", "FAIL", "ERROR", "TOTAL", "
DB_VERSION") AS                                                                 
  select                                                                        
  a.test_run_id,                                                                
  a.test_run_name,                                                              
  to_char(a.start_date,'DD/MM/YYYY HH24:MI:SS') start_date,                     
  to_char(a.end_date,'DD/MM/YYYY HH24:MI:SS') end_date,                         
  a.status,                                                                     
  d.test_category,                                                              
  d.test_sub_category1,                                                         
  D.test_sub_category2,                                                         
  sum(case when b.status = 'PASS' then 1                                        
    else 0 end) PASS,                                                           
  sum(case when b.status = 'WARNING' then 1                                     
    else 0 end) WARNING,                                                        
  sum(case when b.status = 'FAIL' then 1                                        
    else 0 end) FAIL,                                                           
  sum(case when b.status = 'ERROR' then 1                                       
    else 0 end) ERROR,                                                          
  count(b.status) TOTAL,                                                        
  c.version_name as DB_Version                                                  
from az_test_run a                                                              
join az_test_step_run b                                                         
  on a.test_run_id = b.test_run_id                                              
JOIN cz_dw_version C                                                            
  ON c.dw_version_id = a.dw_version_id                                          
JOIN cz_test_category d                                                         
  ON d.test_category_id = a.test_category_id                                    
WHERE a.test_run_id = (select max(test_run_id) from az_test_run)                
group by                                                                        
  a.test_run_id,                                                                
  a.test_run_name,                                                              
  to_char(a.start_date,'DD/MM/YYYY HH24:MI:SS'),                                
  to_char(a.end_date,'DD/MM/YYYY HH24:MI:SS'),                                  
  a.status,                                                                     
  d.test_category,                                                              
  d.test_sub_category1,                                                         
  d.test_sub_category2,                                                         
  c.version_name                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
